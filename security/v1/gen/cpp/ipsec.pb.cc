// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipsec.proto

#include "ipsec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace security {
namespace v1 {
PROTOBUF_CONSTEXPR Proposals::Proposals(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crypto_alg_)*/{}
  , /*decltype(_impl_._crypto_alg_cached_byte_size_)*/{0}
  , /*decltype(_impl_.integ_alg_)*/{}
  , /*decltype(_impl_._integ_alg_cached_byte_size_)*/{0}
  , /*decltype(_impl_.prf_)*/{}
  , /*decltype(_impl_._prf_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dhgroups_)*/{}
  , /*decltype(_impl_._dhgroups_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProposalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalsDefaultTypeInternal() {}
  union {
    Proposals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalsDefaultTypeInternal _Proposals_default_instance_;
PROTOBUF_CONSTEXPR Vips::Vips(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vip_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VipsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VipsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VipsDefaultTypeInternal() {}
  union {
    Vips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VipsDefaultTypeInternal _Vips_default_instance_;
PROTOBUF_CONSTEXPR Pools::Pools(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pool_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoolsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoolsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoolsDefaultTypeInternal() {}
  union {
    Pools _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoolsDefaultTypeInternal _Pools_default_instance_;
PROTOBUF_CONSTEXPR Certs::Certs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cert_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CertsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertsDefaultTypeInternal() {}
  union {
    Certs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertsDefaultTypeInternal _Certs_default_instance_;
PROTOBUF_CONSTEXPR PubKeys::PubKeys(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pubkey_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PubKeysDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PubKeysDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PubKeysDefaultTypeInternal() {}
  union {
    PubKeys _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PubKeysDefaultTypeInternal _PubKeys_default_instance_;
PROTOBUF_CONSTEXPR Groups::Groups(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupsDefaultTypeInternal() {}
  union {
    Groups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupsDefaultTypeInternal _Groups_default_instance_;
PROTOBUF_CONSTEXPR CertPolicy::CertPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cert_policy_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CertPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertPolicyDefaultTypeInternal() {}
  union {
    CertPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertPolicyDefaultTypeInternal _CertPolicy_default_instance_;
PROTOBUF_CONSTEXPR CaCerts::CaCerts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cacert_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaCertsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaCertsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaCertsDefaultTypeInternal() {}
  union {
    CaCerts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaCertsDefaultTypeInternal _CaCerts_default_instance_;
PROTOBUF_CONSTEXPR LocalAuth::LocalAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eap_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aaa_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xauth_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.certs_)*/nullptr
  , /*decltype(_impl_.pubkeys_)*/nullptr
  , /*decltype(_impl_.auth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalAuthDefaultTypeInternal() {}
  union {
    LocalAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalAuthDefaultTypeInternal _LocalAuth_default_instance_;
PROTOBUF_CONSTEXPR RemoteAuth::RemoteAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eap_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groups_)*/nullptr
  , /*decltype(_impl_.cert_policy_)*/nullptr
  , /*decltype(_impl_.certs_)*/nullptr
  , /*decltype(_impl_.ca_certs_)*/nullptr
  , /*decltype(_impl_.pubkeys_)*/nullptr
  , /*decltype(_impl_.auth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteAuthDefaultTypeInternal() {}
  union {
    RemoteAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteAuthDefaultTypeInternal _RemoteAuth_default_instance_;
PROTOBUF_CONSTEXPR TrafficSelectors_TrafficSelector::TrafficSelectors_TrafficSelector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cidr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficSelectors_TrafficSelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSelectors_TrafficSelectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSelectors_TrafficSelectorDefaultTypeInternal() {}
  union {
    TrafficSelectors_TrafficSelector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSelectors_TrafficSelectorDefaultTypeInternal _TrafficSelectors_TrafficSelector_default_instance_;
PROTOBUF_CONSTEXPR TrafficSelectors::TrafficSelectors(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficSelectorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSelectorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSelectorsDefaultTypeInternal() {}
  union {
    TrafficSelectors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSelectorsDefaultTypeInternal _TrafficSelectors_default_instance_;
PROTOBUF_CONSTEXPR Addrs::Addrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddrsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddrsDefaultTypeInternal() {}
  union {
    Addrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddrsDefaultTypeInternal _Addrs_default_instance_;
PROTOBUF_CONSTEXPR Child::Child(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updown_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mark_in_sa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hw_offload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ag_proposals_)*/nullptr
  , /*decltype(_impl_.esp_proposals_)*/nullptr
  , /*decltype(_impl_.local_ts_)*/nullptr
  , /*decltype(_impl_.remote_ts_)*/nullptr
  , /*decltype(_impl_.rekey_time_)*/0u
  , /*decltype(_impl_.life_time_)*/0u
  , /*decltype(_impl_.rand_time_)*/0u
  , /*decltype(_impl_.inactivity_)*/0u
  , /*decltype(_impl_.mark_in_)*/0u
  , /*decltype(_impl_.mark_out_)*/0u
  , /*decltype(_impl_.set_mark_in_)*/0u
  , /*decltype(_impl_.set_mark_out_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChildDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChildDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChildDefaultTypeInternal() {}
  union {
    Child _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChildDefaultTypeInternal _Child_default_instance_;
PROTOBUF_CONSTEXPR Connection::Connection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_addrs_)*/{}
  , /*decltype(_impl_.remote_addrs_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mobike_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proposals_)*/nullptr
  , /*decltype(_impl_.vips_)*/nullptr
  , /*decltype(_impl_.pools_)*/nullptr
  , /*decltype(_impl_.local_auth_)*/nullptr
  , /*decltype(_impl_.remote_auth_)*/nullptr
  , /*decltype(_impl_.local_port_)*/0u
  , /*decltype(_impl_.remote_port_)*/0u
  , /*decltype(_impl_.dscp_)*/uint64_t{0u}
  , /*decltype(_impl_.dpd_delay_)*/0u
  , /*decltype(_impl_.dpd_timeout_)*/0u
  , /*decltype(_impl_.reauth_time_)*/0u
  , /*decltype(_impl_.rekey_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionDefaultTypeInternal _Connection_default_instance_;
PROTOBUF_CONSTEXPR IPsecVersionReq::IPsecVersionReq(
    ::_pbi::ConstantInitialized) {}
struct IPsecVersionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecVersionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecVersionReqDefaultTypeInternal() {}
  union {
    IPsecVersionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecVersionReqDefaultTypeInternal _IPsecVersionReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecVersionResp::IPsecVersionResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.daemon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sysname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.release_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.machine_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecVersionRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecVersionRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecVersionRespDefaultTypeInternal() {}
  union {
    IPsecVersionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecVersionRespDefaultTypeInternal _IPsecVersionResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecStatsReq::IPsecStatsReq(
    ::_pbi::ConstantInitialized) {}
struct IPsecStatsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecStatsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecStatsReqDefaultTypeInternal() {}
  union {
    IPsecStatsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecStatsReqDefaultTypeInternal _IPsecStatsReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecStatsResp::IPsecStatsResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecStatsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecStatsRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecStatsRespDefaultTypeInternal() {}
  union {
    IPsecStatsResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecStatsRespDefaultTypeInternal _IPsecStatsResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecInitiateReq::IPsecInitiateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ike_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loglevel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecInitiateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecInitiateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecInitiateReqDefaultTypeInternal() {}
  union {
    IPsecInitiateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecInitiateReqDefaultTypeInternal _IPsecInitiateReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecInitiateResp::IPsecInitiateResp(
    ::_pbi::ConstantInitialized) {}
struct IPsecInitiateRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecInitiateRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecInitiateRespDefaultTypeInternal() {}
  union {
    IPsecInitiateResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecInitiateRespDefaultTypeInternal _IPsecInitiateResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecTerminateReq::IPsecTerminateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ike_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loglevel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.child_id_)*/uint64_t{0u}
  , /*decltype(_impl_.ike_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecTerminateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecTerminateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecTerminateReqDefaultTypeInternal() {}
  union {
    IPsecTerminateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecTerminateReqDefaultTypeInternal _IPsecTerminateReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecTerminateResp::IPsecTerminateResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matches_)*/0u
  , /*decltype(_impl_.terminated_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecTerminateRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecTerminateRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecTerminateRespDefaultTypeInternal() {}
  union {
    IPsecTerminateResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecTerminateRespDefaultTypeInternal _IPsecTerminateResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecRekeyReq::IPsecRekeyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ike_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reauth_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.child_id_)*/uint64_t{0u}
  , /*decltype(_impl_.ike_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecRekeyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecRekeyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecRekeyReqDefaultTypeInternal() {}
  union {
    IPsecRekeyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecRekeyReqDefaultTypeInternal _IPsecRekeyReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecRekeyResp::IPsecRekeyResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matches_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecRekeyRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecRekeyRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecRekeyRespDefaultTypeInternal() {}
  union {
    IPsecRekeyResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecRekeyRespDefaultTypeInternal _IPsecRekeyResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecListSasReq::IPsecListSasReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.noblock_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ike_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.child_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ike_id_)*/uint64_t{0u}
  , /*decltype(_impl_.child_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecListSasReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecListSasReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecListSasReqDefaultTypeInternal() {}
  union {
    IPsecListSasReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecListSasReqDefaultTypeInternal _IPsecListSasReq_default_instance_;
PROTOBUF_CONSTEXPR ListChildSa::ListChildSa(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spi_in_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spi_out_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpi_in_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpi_out_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mark_in_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mark_mask_in_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mark_out_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mark_mask_out_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.if_id_in_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.if_id_out_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encr_alg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encr_keysize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.integ_alg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.integ_keysize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dh_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.esn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListChildSaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListChildSaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListChildSaDefaultTypeInternal() {}
  union {
    ListChildSa _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListChildSaDefaultTypeInternal _ListChildSa_default_instance_;
PROTOBUF_CONSTEXPR ListIkeSa::ListIkeSa(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_vips_)*/{}
  , /*decltype(_impl_.remote_vips_)*/{}
  , /*decltype(_impl_.tasks_queued_)*/{}
  , /*decltype(_impl_.tasks_active_)*/{}
  , /*decltype(_impl_.tasks_passive_)*/{}
  , /*decltype(_impl_.childsas_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uniqueid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_xauth_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_eap_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initiator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initiator_spi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responder_spi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nat_local_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nat_remote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nat_fake_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nat_any_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.if_id_in_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.if_id_out_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encr_alg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encr_keysize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.integ_alg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.integ_keysize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prf_alg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dh_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ppk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.established_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rekey_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reauth_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ikestate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListIkeSaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListIkeSaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListIkeSaDefaultTypeInternal() {}
  union {
    ListIkeSa _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListIkeSaDefaultTypeInternal _ListIkeSa_default_instance_;
PROTOBUF_CONSTEXPR IPsecListSasResp::IPsecListSasResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ikesas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecListSasRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecListSasRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecListSasRespDefaultTypeInternal() {}
  union {
    IPsecListSasResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecListSasRespDefaultTypeInternal _IPsecListSasResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecListConnsReq::IPsecListConnsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ike_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecListConnsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecListConnsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecListConnsReqDefaultTypeInternal() {}
  union {
    IPsecListConnsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecListConnsReqDefaultTypeInternal _IPsecListConnsReq_default_instance_;
PROTOBUF_CONSTEXPR ListConnAuth::ListConnAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eaptype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eapvendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xauth_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.revocation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ca_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aaa_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eap_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xauth_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_)*/nullptr
  , /*decltype(_impl_.cert_policy_)*/nullptr
  , /*decltype(_impl_.certs_)*/nullptr
  , /*decltype(_impl_.cacerts_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConnAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConnAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConnAuthDefaultTypeInternal() {}
  union {
    ListConnAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConnAuthDefaultTypeInternal _ListConnAuth_default_instance_;
PROTOBUF_CONSTEXPR ListChild::ListChild(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dpd_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.close_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interface_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.priority_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_ts_)*/nullptr
  , /*decltype(_impl_.remote_ts_)*/nullptr
  , /*decltype(_impl_.rekey_time_)*/0u
  , /*decltype(_impl_.rekey_bytes_)*/0u
  , /*decltype(_impl_.rekey_packets_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListChildDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListChildDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListChildDefaultTypeInternal() {}
  union {
    ListChild _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListChildDefaultTypeInternal _ListChild_default_instance_;
PROTOBUF_CONSTEXPR ListConnResp::ListConnResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_addrs_)*/{}
  , /*decltype(_impl_.remote_addrs_)*/{}
  , /*decltype(_impl_.local_auth_)*/{}
  , /*decltype(_impl_.remote_auth_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unique_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ppk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ppk_required_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reauth_time_)*/0u
  , /*decltype(_impl_.rekey_time_)*/0u
  , /*decltype(_impl_.dpd_delay_)*/0u
  , /*decltype(_impl_.dpd_timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConnRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConnRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConnRespDefaultTypeInternal() {}
  union {
    ListConnResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConnRespDefaultTypeInternal _ListConnResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecListConnsResp::IPsecListConnsResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecListConnsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecListConnsRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecListConnsRespDefaultTypeInternal() {}
  union {
    IPsecListConnsResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecListConnsRespDefaultTypeInternal _IPsecListConnsResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecListCertsReq::IPsecListCertsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecListCertsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecListCertsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecListCertsReqDefaultTypeInternal() {}
  union {
    IPsecListCertsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecListCertsReqDefaultTypeInternal _IPsecListCertsReq_default_instance_;
PROTOBUF_CONSTEXPR ListCert::ListCert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hasprivkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notbefore_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notafter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCertDefaultTypeInternal() {}
  union {
    ListCert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCertDefaultTypeInternal _ListCert_default_instance_;
PROTOBUF_CONSTEXPR IPsecListCertsResp::IPsecListCertsResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.certs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecListCertsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecListCertsRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecListCertsRespDefaultTypeInternal() {}
  union {
    IPsecListCertsResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecListCertsRespDefaultTypeInternal _IPsecListCertsResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecLoadConnReq::IPsecLoadConnReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecLoadConnReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecLoadConnReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecLoadConnReqDefaultTypeInternal() {}
  union {
    IPsecLoadConnReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecLoadConnReqDefaultTypeInternal _IPsecLoadConnReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecLoadConnResp::IPsecLoadConnResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecLoadConnRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecLoadConnRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecLoadConnRespDefaultTypeInternal() {}
  union {
    IPsecLoadConnResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecLoadConnRespDefaultTypeInternal _IPsecLoadConnResp_default_instance_;
PROTOBUF_CONSTEXPR IPsecUnloadConnReq::IPsecUnloadConnReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecUnloadConnReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecUnloadConnReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecUnloadConnReqDefaultTypeInternal() {}
  union {
    IPsecUnloadConnReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecUnloadConnReqDefaultTypeInternal _IPsecUnloadConnReq_default_instance_;
PROTOBUF_CONSTEXPR IPsecUnloadConnResp::IPsecUnloadConnResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPsecUnloadConnRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPsecUnloadConnRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPsecUnloadConnRespDefaultTypeInternal() {}
  union {
    IPsecUnloadConnResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPsecUnloadConnRespDefaultTypeInternal _IPsecUnloadConnResp_default_instance_;
}  // namespace v1
}  // namespace security
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_ipsec_2eproto[41];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ipsec_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ipsec_2eproto = nullptr;

const uint32_t TableStruct_ipsec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Proposals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Proposals, _impl_.crypto_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Proposals, _impl_.integ_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Proposals, _impl_.prf_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Proposals, _impl_.dhgroups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Vips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Vips, _impl_.vip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Pools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Pools, _impl_.pool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Certs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Certs, _impl_.cert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::PubKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::PubKeys, _impl_.pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Groups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Groups, _impl_.group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::CertPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::CertPolicy, _impl_.cert_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::CaCerts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::CaCerts, _impl_.cacert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.auth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.eap_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.aaa_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.xauth_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.certs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::LocalAuth, _impl_.pubkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.auth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.eap_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.groups_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.cert_policy_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.certs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.ca_certs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::RemoteAuth, _impl_.pubkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::TrafficSelectors_TrafficSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::TrafficSelectors_TrafficSelector, _impl_.cidr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::TrafficSelectors_TrafficSelector, _impl_.proto_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::TrafficSelectors_TrafficSelector, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::TrafficSelectors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::TrafficSelectors, _impl_.ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Addrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Addrs, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.ag_proposals_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.esp_proposals_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.local_ts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.remote_ts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.rekey_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.life_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.rand_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.updown_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.inactivity_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.mark_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.mark_in_sa_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.mark_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.set_mark_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.set_mark_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Child, _impl_.hw_offload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.local_addrs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.remote_addrs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.local_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.remote_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.proposals_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.vips_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.dscp_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.mobike_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.dpd_delay_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.dpd_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.reauth_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.rekey_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.pools_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.local_auth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.remote_auth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::Connection, _impl_.children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionResp, _impl_.daemon_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionResp, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionResp, _impl_.sysname_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionResp, _impl_.release_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecVersionResp, _impl_.machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecStatsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecStatsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecStatsResp, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecInitiateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecInitiateReq, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecInitiateReq, _impl_.ike_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecInitiateReq, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecInitiateReq, _impl_.loglevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecInitiateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.ike_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.child_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.ike_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateReq, _impl_.loglevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateResp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateResp, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecTerminateResp, _impl_.terminated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyReq, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyReq, _impl_.ike_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyReq, _impl_.child_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyReq, _impl_.ike_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyReq, _impl_.reauth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyResp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecRekeyResp, _impl_.matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasReq, _impl_.noblock_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasReq, _impl_.ike_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasReq, _impl_.ike_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasReq, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasReq, _impl_.child_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.spi_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.spi_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.cpi_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.cpi_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.mark_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.mark_mask_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.mark_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.mark_mask_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.if_id_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.if_id_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.encr_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.encr_keysize_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.integ_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.integ_keysize_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.dh_group_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChildSa, _impl_.esn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.uniqueid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.ikestate_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.local_host_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.local_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.local_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.remote_host_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.remote_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.remote_xauth_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.remote_eap_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.initiator_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.initiator_spi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.responder_spi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.nat_local_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.nat_remote_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.nat_fake_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.nat_any_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.if_id_in_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.if_id_out_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.encr_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.encr_keysize_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.integ_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.integ_keysize_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.prf_alg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.dh_group_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.ppk_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.established_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.rekey_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.reauth_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.local_vips_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.remote_vips_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.tasks_queued_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.tasks_active_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.tasks_passive_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListIkeSa, _impl_.childsas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListSasResp, _impl_.ikesas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListConnsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListConnsReq, _impl_.ike_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.class__),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.eaptype_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.eapvendor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.xauth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.revocation_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.ca_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.aaa_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.eap_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.xauth_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.cert_policy_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.certs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnAuth, _impl_.cacerts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.rekey_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.rekey_bytes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.rekey_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.dpd_action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.close_action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.local_ts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.remote_ts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.interface_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListChild, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.local_addrs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.remote_addrs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.reauth_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.rekey_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.unique_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.dpd_delay_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.dpd_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.ppk_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.ppk_required_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.local_auth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.remote_auth_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListConnResp, _impl_.children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListConnsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListConnsResp, _impl_.connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListCertsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListCertsReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListCertsReq, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListCertsReq, _impl_.subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.hasprivkey_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.notbefore_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::ListCert, _impl_.notafter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListCertsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecListCertsResp, _impl_.certs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecLoadConnReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecLoadConnReq, _impl_.connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecLoadConnResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecLoadConnResp, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecUnloadConnReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecUnloadConnReq, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecUnloadConnResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::v1::IPsecUnloadConnResp, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::security::v1::Proposals)},
  { 10, -1, -1, sizeof(::opi_api::security::v1::Vips)},
  { 17, -1, -1, sizeof(::opi_api::security::v1::Pools)},
  { 24, -1, -1, sizeof(::opi_api::security::v1::Certs)},
  { 31, -1, -1, sizeof(::opi_api::security::v1::PubKeys)},
  { 38, -1, -1, sizeof(::opi_api::security::v1::Groups)},
  { 45, -1, -1, sizeof(::opi_api::security::v1::CertPolicy)},
  { 52, -1, -1, sizeof(::opi_api::security::v1::CaCerts)},
  { 59, -1, -1, sizeof(::opi_api::security::v1::LocalAuth)},
  { 72, -1, -1, sizeof(::opi_api::security::v1::RemoteAuth)},
  { 86, -1, -1, sizeof(::opi_api::security::v1::TrafficSelectors_TrafficSelector)},
  { 95, -1, -1, sizeof(::opi_api::security::v1::TrafficSelectors)},
  { 102, -1, -1, sizeof(::opi_api::security::v1::Addrs)},
  { 109, -1, -1, sizeof(::opi_api::security::v1::Child)},
  { 131, -1, -1, sizeof(::opi_api::security::v1::Connection)},
  { 156, -1, -1, sizeof(::opi_api::security::v1::IPsecVersionReq)},
  { 162, -1, -1, sizeof(::opi_api::security::v1::IPsecVersionResp)},
  { 173, -1, -1, sizeof(::opi_api::security::v1::IPsecStatsReq)},
  { 179, -1, -1, sizeof(::opi_api::security::v1::IPsecStatsResp)},
  { 186, -1, -1, sizeof(::opi_api::security::v1::IPsecInitiateReq)},
  { 196, -1, -1, sizeof(::opi_api::security::v1::IPsecInitiateResp)},
  { 202, -1, -1, sizeof(::opi_api::security::v1::IPsecTerminateReq)},
  { 215, -1, -1, sizeof(::opi_api::security::v1::IPsecTerminateResp)},
  { 224, -1, -1, sizeof(::opi_api::security::v1::IPsecRekeyReq)},
  { 235, -1, -1, sizeof(::opi_api::security::v1::IPsecRekeyResp)},
  { 243, -1, -1, sizeof(::opi_api::security::v1::IPsecListSasReq)},
  { 254, -1, -1, sizeof(::opi_api::security::v1::ListChildSa)},
  { 279, -1, -1, sizeof(::opi_api::security::v1::ListIkeSa)},
  { 322, -1, -1, sizeof(::opi_api::security::v1::IPsecListSasResp)},
  { 329, -1, -1, sizeof(::opi_api::security::v1::IPsecListConnsReq)},
  { 336, -1, -1, sizeof(::opi_api::security::v1::ListConnAuth)},
  { 356, -1, -1, sizeof(::opi_api::security::v1::ListChild)},
  { 374, -1, -1, sizeof(::opi_api::security::v1::ListConnResp)},
  { 394, -1, -1, sizeof(::opi_api::security::v1::IPsecListConnsResp)},
  { 401, -1, -1, sizeof(::opi_api::security::v1::IPsecListCertsReq)},
  { 410, -1, -1, sizeof(::opi_api::security::v1::ListCert)},
  { 423, -1, -1, sizeof(::opi_api::security::v1::IPsecListCertsResp)},
  { 430, -1, -1, sizeof(::opi_api::security::v1::IPsecLoadConnReq)},
  { 437, -1, -1, sizeof(::opi_api::security::v1::IPsecLoadConnResp)},
  { 444, -1, -1, sizeof(::opi_api::security::v1::IPsecUnloadConnReq)},
  { 451, -1, -1, sizeof(::opi_api::security::v1::IPsecUnloadConnResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::security::v1::_Proposals_default_instance_._instance,
  &::opi_api::security::v1::_Vips_default_instance_._instance,
  &::opi_api::security::v1::_Pools_default_instance_._instance,
  &::opi_api::security::v1::_Certs_default_instance_._instance,
  &::opi_api::security::v1::_PubKeys_default_instance_._instance,
  &::opi_api::security::v1::_Groups_default_instance_._instance,
  &::opi_api::security::v1::_CertPolicy_default_instance_._instance,
  &::opi_api::security::v1::_CaCerts_default_instance_._instance,
  &::opi_api::security::v1::_LocalAuth_default_instance_._instance,
  &::opi_api::security::v1::_RemoteAuth_default_instance_._instance,
  &::opi_api::security::v1::_TrafficSelectors_TrafficSelector_default_instance_._instance,
  &::opi_api::security::v1::_TrafficSelectors_default_instance_._instance,
  &::opi_api::security::v1::_Addrs_default_instance_._instance,
  &::opi_api::security::v1::_Child_default_instance_._instance,
  &::opi_api::security::v1::_Connection_default_instance_._instance,
  &::opi_api::security::v1::_IPsecVersionReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecVersionResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecStatsReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecStatsResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecInitiateReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecInitiateResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecTerminateReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecTerminateResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecRekeyReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecRekeyResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecListSasReq_default_instance_._instance,
  &::opi_api::security::v1::_ListChildSa_default_instance_._instance,
  &::opi_api::security::v1::_ListIkeSa_default_instance_._instance,
  &::opi_api::security::v1::_IPsecListSasResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecListConnsReq_default_instance_._instance,
  &::opi_api::security::v1::_ListConnAuth_default_instance_._instance,
  &::opi_api::security::v1::_ListChild_default_instance_._instance,
  &::opi_api::security::v1::_ListConnResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecListConnsResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecListCertsReq_default_instance_._instance,
  &::opi_api::security::v1::_ListCert_default_instance_._instance,
  &::opi_api::security::v1::_IPsecListCertsResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecLoadConnReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecLoadConnResp_default_instance_._instance,
  &::opi_api::security::v1::_IPsecUnloadConnReq_default_instance_._instance,
  &::opi_api::security::v1::_IPsecUnloadConnResp_default_instance_._instance,
};

const char descriptor_table_protodef_ipsec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013ipsec.proto\022\023opi_api.security.v1\"\361\001\n\tP"
  "roposals\0228\n\ncrypto_alg\030\001 \003(\0162$.opi_api.s"
  "ecurity.v1.CryptoAlgorithm\0226\n\tinteg_alg\030"
  "\002 \003(\0162#.opi_api.security.v1.IntegAlgorit"
  "hm\0226\n\003prf\030\003 \003(\0162).opi_api.security.v1.Ps"
  "eudoRandomFunction\022:\n\010dhgroups\030\004 \003(\0162(.o"
  "pi_api.security.v1.DiffieHellmanGroups\"\023"
  "\n\004Vips\022\013\n\003vip\030\001 \003(\t\"\025\n\005Pools\022\014\n\004pool\030\001 \003"
  "(\t\"\025\n\005Certs\022\014\n\004cert\030\001 \003(\t\"\031\n\007PubKeys\022\016\n\006"
  "pubkey\030\001 \003(\t\"\027\n\006Groups\022\r\n\005group\030\001 \003(\t\"!\n"
  "\nCertPolicy\022\023\n\013cert_policy\030\001 \003(\t\"\031\n\007CaCe"
  "rts\022\016\n\006cacert\030\001 \003(\t\"\320\001\n\tLocalAuth\022+\n\004aut"
  "h\030\001 \001(\0162\035.opi_api.security.v1.AuthType\022\n"
  "\n\002id\030\002 \001(\t\022\016\n\006eap_id\030\003 \001(\t\022\016\n\006aaa_id\030\004 \001"
  "(\t\022\020\n\010xauth_id\030\005 \001(\t\022)\n\005certs\030\006 \001(\0132\032.op"
  "i_api.security.v1.Certs\022-\n\007pubkeys\030\007 \001(\013"
  "2\034.opi_api.security.v1.PubKeys\"\302\002\n\nRemot"
  "eAuth\022+\n\004auth\030\001 \001(\0162\035.opi_api.security.v"
  "1.AuthType\022\n\n\002id\030\002 \001(\t\022\016\n\006eap_id\030\003 \001(\t\022+"
  "\n\006groups\030\004 \001(\0132\033.opi_api.security.v1.Gro"
  "ups\0224\n\013cert_policy\030\005 \001(\0132\037.opi_api.secur"
  "ity.v1.CertPolicy\022)\n\005certs\030\006 \001(\0132\032.opi_a"
  "pi.security.v1.Certs\022.\n\010ca_certs\030\007 \001(\0132\034"
  ".opi_api.security.v1.CaCerts\022-\n\007pubkeys\030"
  "\010 \001(\0132\034.opi_api.security.v1.PubKeys\"\223\001\n\020"
  "TrafficSelectors\022A\n\002ts\030\001 \003(\01325.opi_api.s"
  "ecurity.v1.TrafficSelectors.TrafficSelec"
  "tor\032<\n\017TrafficSelector\022\014\n\004cidr\030\001 \001(\t\022\r\n\005"
  "proto\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\"\025\n\005Addrs\022\014\n\004ad"
  "dr\030\001 \001(\t\"\311\003\n\005Child\022\014\n\004name\030\001 \001(\t\0224\n\014ag_p"
  "roposals\030\002 \001(\0132\036.opi_api.security.v1.Pro"
  "posals\0225\n\resp_proposals\030\003 \001(\0132\036.opi_api."
  "security.v1.Proposals\0227\n\010local_ts\030\004 \001(\0132"
  "%.opi_api.security.v1.TrafficSelectors\0228"
  "\n\tremote_ts\030\005 \001(\0132%.opi_api.security.v1."
  "TrafficSelectors\022\022\n\nrekey_time\030\006 \001(\r\022\021\n\t"
  "life_time\030\007 \001(\r\022\021\n\trand_time\030\010 \001(\r\022\016\n\006up"
  "down\030\t \001(\t\022\022\n\ninactivity\030\n \001(\r\022\017\n\007mark_i"
  "n\030\013 \001(\r\022\022\n\nmark_in_sa\030\014 \001(\t\022\020\n\010mark_out\030"
  "\r \001(\r\022\023\n\013set_mark_in\030\016 \001(\r\022\024\n\014set_mark_o"
  "ut\030\017 \001(\r\022\022\n\nhw_offload\030\020 \001(\t\"\324\004\n\nConnect"
  "ion\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022/\n\013lo"
  "cal_addrs\030\003 \003(\0132\032.opi_api.security.v1.Ad"
  "drs\0220\n\014remote_addrs\030\004 \003(\0132\032.opi_api.secu"
  "rity.v1.Addrs\022\022\n\nlocal_port\030\005 \001(\r\022\023\n\013rem"
  "ote_port\030\006 \001(\r\0221\n\tproposals\030\007 \001(\0132\036.opi_"
  "api.security.v1.Proposals\022\'\n\004vips\030\010 \001(\0132"
  "\031.opi_api.security.v1.Vips\022\014\n\004dscp\030\t \001(\004"
  "\022\r\n\005encap\030\n \001(\t\022\016\n\006mobike\030\013 \001(\t\022\021\n\tdpd_d"
  "elay\030\014 \001(\r\022\023\n\013dpd_timeout\030\r \001(\r\022\023\n\013reaut"
  "h_time\030\016 \001(\r\022\022\n\nrekey_time\030\017 \001(\r\022)\n\005pool"
  "s\030\020 \001(\0132\032.opi_api.security.v1.Pools\0222\n\nl"
  "ocal_auth\030\021 \001(\0132\036.opi_api.security.v1.Lo"
  "calAuth\0224\n\013remote_auth\030\022 \001(\0132\037.opi_api.s"
  "ecurity.v1.RemoteAuth\022,\n\010children\030\023 \003(\0132"
  "\032.opi_api.security.v1.Child\"\021\n\017IPsecVers"
  "ionReq\"f\n\020IPsecVersionResp\022\016\n\006daemon\030\001 \001"
  "(\t\022\017\n\007version\030\002 \001(\t\022\017\n\007sysname\030\003 \001(\t\022\017\n\007"
  "release\030\004 \001(\t\022\017\n\007machine\030\005 \001(\t\"\017\n\rIPsecS"
  "tatsReq\" \n\016IPsecStatsResp\022\016\n\006status\030\001 \001("
  "\t\"Q\n\020IPsecInitiateReq\022\r\n\005child\030\001 \001(\t\022\013\n\003"
  "ike\030\002 \001(\t\022\017\n\007timeout\030\003 \001(\t\022\020\n\010loglevel\030\004"
  " \001(\t\"\023\n\021IPsecInitiateResp\"\203\001\n\021IPsecTermi"
  "nateReq\022\r\n\005child\030\001 \001(\t\022\013\n\003ike\030\002 \001(\t\022\020\n\010c"
  "hild_id\030\003 \001(\004\022\016\n\006ike_id\030\004 \001(\004\022\r\n\005force\030\005"
  " \001(\t\022\017\n\007timeout\030\006 \001(\t\022\020\n\010loglevel\030\007 \001(\t\""
  "J\n\022IPsecTerminateResp\022\017\n\007success\030\001 \001(\t\022\017"
  "\n\007matches\030\002 \001(\r\022\022\n\nterminated\030\003 \001(\r\"]\n\rI"
  "PsecRekeyReq\022\r\n\005child\030\001 \001(\t\022\013\n\003ike\030\002 \001(\t"
  "\022\020\n\010child_id\030\003 \001(\004\022\016\n\006ike_id\030\004 \001(\004\022\016\n\006re"
  "auth\030\005 \001(\t\"2\n\016IPsecRekeyResp\022\017\n\007success\030"
  "\001 \001(\t\022\017\n\007matches\030\002 \001(\r\"`\n\017IPsecListSasRe"
  "q\022\017\n\007noblock\030\001 \001(\t\022\013\n\003ike\030\002 \001(\t\022\016\n\006ike_i"
  "d\030\003 \001(\004\022\r\n\005child\030\004 \001(\t\022\020\n\010child_id\030\005 \001(\004"
  "\"\344\002\n\013ListChildSa\022\014\n\004name\030\001 \001(\t\022\020\n\010protoc"
  "ol\030\002 \001(\t\022\r\n\005encap\030\003 \001(\t\022\016\n\006spi_in\030\004 \001(\t\022"
  "\017\n\007spi_out\030\005 \001(\t\022\016\n\006cpi_in\030\006 \001(\t\022\017\n\007cpi_"
  "out\030\007 \001(\t\022\017\n\007mark_in\030\010 \001(\t\022\024\n\014mark_mask_"
  "in\030\t \001(\t\022\020\n\010mark_out\030\n \001(\t\022\025\n\rmark_mask_"
  "out\030\013 \001(\t\022\020\n\010if_id_in\030\014 \001(\t\022\021\n\tif_id_out"
  "\030\r \001(\t\022\020\n\010encr_alg\030\016 \001(\t\022\024\n\014encr_keysize"
  "\030\017 \001(\t\022\021\n\tinteg_alg\030\020 \001(\t\022\025\n\rinteg_keysi"
  "ze\030\021 \001(\t\022\020\n\010dh_group\030\022 \001(\t\022\013\n\003esn\030\023 \001(\t\""
  "\246\006\n\tListIkeSa\022\014\n\004name\030\001 \001(\t\022\020\n\010uniqueid\030"
  "\002 \001(\t\022\017\n\007version\030\003 \001(\t\0221\n\010ikestate\030\004 \001(\016"
  "2\037.opi_api.security.v1.IkeSaState\022\022\n\nloc"
  "al_host\030\005 \001(\t\022\022\n\nlocal_port\030\006 \001(\t\022\020\n\010loc"
  "al_id\030\007 \001(\t\022\023\n\013remote_host\030\010 \001(\t\022\023\n\013remo"
  "te_port\030\t \001(\t\022\021\n\tremote_id\030\n \001(\t\022\027\n\017remo"
  "te_xauth_id\030\013 \001(\t\022\025\n\rremote_eap_id\030\014 \001(\t"
  "\022\021\n\tinitiator\030\r \001(\t\022\025\n\rinitiator_spi\030\016 \001"
  "(\t\022\025\n\rresponder_spi\030\017 \001(\t\022\021\n\tnat_local\030\020"
  " \001(\t\022\022\n\nnat_remote\030\021 \001(\t\022\020\n\010nat_fake\030\022 \001"
  "(\t\022\017\n\007nat_any\030\023 \001(\t\022\020\n\010if_id_in\030\024 \001(\t\022\021\n"
  "\tif_id_out\030\025 \001(\t\022\020\n\010encr_alg\030\026 \001(\t\022\024\n\014en"
  "cr_keysize\030\027 \001(\t\022\021\n\tinteg_alg\030\030 \001(\t\022\025\n\ri"
  "nteg_keysize\030\031 \001(\t\022\017\n\007prf_alg\030\032 \001(\t\022\020\n\010d"
  "h_group\030\033 \001(\t\022\013\n\003ppk\030\034 \001(\t\022\023\n\013establishe"
  "d\030\035 \001(\t\022\022\n\nrekey_time\030\036 \001(\t\022\023\n\013reauth_ti"
  "me\030\037 \001(\t\022\022\n\nlocal_vips\030  \003(\t\022\023\n\013remote_v"
  "ips\030! \003(\t\022\024\n\014tasks_queued\030\" \003(\t\022\024\n\014tasks"
  "_active\030# \003(\t\022\025\n\rtasks_passive\030$ \003(\t\0222\n\010"
  "childsas\030% \003(\0132 .opi_api.security.v1.Lis"
  "tChildSa\"B\n\020IPsecListSasResp\022.\n\006ikesas\030\001"
  " \003(\0132\036.opi_api.security.v1.ListIkeSa\" \n\021"
  "IPsecListConnsReq\022\013\n\003ike\030\001 \001(\t\"\355\002\n\014ListC"
  "onnAuth\022\r\n\005class\030\001 \001(\t\022\017\n\007eaptype\030\002 \001(\t\022"
  "\021\n\teapvendor\030\003 \001(\t\022\r\n\005xauth\030\004 \001(\t\022\022\n\nrev"
  "ocation\030\005 \001(\t\022\n\n\002id\030\006 \001(\t\022\r\n\005ca_id\030\007 \001(\t"
  "\022\016\n\006aaa_id\030\010 \001(\t\022\016\n\006eap_id\030\t \001(\t\022\020\n\010xaut"
  "h_id\030\n \001(\t\022*\n\005group\030\013 \001(\0132\033.opi_api.secu"
  "rity.v1.Groups\0224\n\013cert_policy\030\014 \001(\0132\037.op"
  "i_api.security.v1.CertPolicy\022)\n\005certs\030\r "
  "\001(\0132\032.opi_api.security.v1.Certs\022-\n\007cacer"
  "ts\030\016 \001(\0132\034.opi_api.security.v1.CaCerts\"\270"
  "\002\n\tListChild\022\014\n\004name\030\001 \001(\t\022\014\n\004mode\030\002 \001(\t"
  "\022\r\n\005label\030\003 \001(\t\022\022\n\nrekey_time\030\004 \001(\r\022\023\n\013r"
  "ekey_bytes\030\005 \001(\r\022\025\n\rrekey_packets\030\006 \001(\r\022"
  "\022\n\ndpd_action\030\007 \001(\t\022\024\n\014close_action\030\010 \001("
  "\t\0227\n\010local_ts\030\t \001(\0132%.opi_api.security.v"
  "1.TrafficSelectors\0228\n\tremote_ts\030\n \001(\0132%."
  "opi_api.security.v1.TrafficSelectors\022\021\n\t"
  "interface\030\013 \001(\t\022\020\n\010priority\030\014 \001(\t\"\265\003\n\014Li"
  "stConnResp\022\014\n\004name\030\001 \001(\t\022/\n\013local_addrs\030"
  "\002 \003(\0132\032.opi_api.security.v1.Addrs\0220\n\014rem"
  "ote_addrs\030\003 \003(\0132\032.opi_api.security.v1.Ad"
  "drs\022\017\n\007version\030\004 \001(\t\022\023\n\013reauth_time\030\005 \001("
  "\r\022\022\n\nrekey_time\030\006 \001(\r\022\016\n\006unique\030\007 \001(\t\022\021\n"
  "\tdpd_delay\030\010 \001(\r\022\023\n\013dpd_timeout\030\t \001(\r\022\013\n"
  "\003ppk\030\n \001(\t\022\024\n\014ppk_required\030\013 \001(\t\0225\n\nloca"
  "l_auth\030\014 \003(\0132!.opi_api.security.v1.ListC"
  "onnAuth\0226\n\013remote_auth\030\r \003(\0132!.opi_api.s"
  "ecurity.v1.ListConnAuth\0220\n\010children\030\016 \003("
  "\0132\036.opi_api.security.v1.ListChild\"K\n\022IPs"
  "ecListConnsResp\0225\n\nconnection\030\001 \003(\0132!.op"
  "i_api.security.v1.ListConnResp\"@\n\021IPsecL"
  "istCertsReq\022\014\n\004type\030\001 \001(\t\022\014\n\004flag\030\002 \001(\t\022"
  "\017\n\007subject\030\003 \001(\t\"\316\001\n\010ListCert\0222\n\004type\030\001 "
  "\001(\0162$.opi_api.security.v1.CertificateTyp"
  "e\0226\n\004flag\030\002 \001(\0162(.opi_api.security.v1.X5"
  "09CertificateFlag\022\022\n\nhasprivkey\030\003 \001(\t\022\014\n"
  "\004data\030\004 \001(\t\022\017\n\007subject\030\005 \001(\t\022\021\n\tnotbefor"
  "e\030\006 \001(\t\022\020\n\010notafter\030\007 \001(\t\"B\n\022IPsecListCe"
  "rtsResp\022,\n\005certs\030\001 \003(\0132\035.opi_api.securit"
  "y.v1.ListCert\"G\n\020IPsecLoadConnReq\0223\n\ncon"
  "nection\030\001 \001(\0132\037.opi_api.security.v1.Conn"
  "ection\"$\n\021IPsecLoadConnResp\022\017\n\007success\030\001"
  " \001(\t\"\"\n\022IPsecUnloadConnReq\022\014\n\004name\030\001 \001(\t"
  "\"&\n\023IPsecUnloadConnResp\022\017\n\007success\030\001 \001(\t"
  "*\212\001\n\017CryptoAlgorithm\022\017\n\013NONE_CRYPTO\020\000\022\n\n"
  "\006AES128\020\001\022\n\n\006AES192\020\002\022\n\n\006AES256\020\003\022\020\n\014AES"
  "128GCM128\020\004\022\020\n\014AES256GCM128\020\005\022\016\n\nAES128G"
  "MAC\020\006\022\016\n\nAES256GMAC\020\007*\201\001\n\016IntegAlgorithm"
  "\022\016\n\nNONE_INTEG\020\000\022\007\n\003MD5\020\001\022\013\n\007MD5_128\020\002\022\010"
  "\n\004SHA1\020\003\022\014\n\010SHA1_160\020\004\022\n\n\006SHA256\020\005\022\n\n\006SH"
  "A384\020\007\022\n\n\006SHA512\020\010\022\r\n\tSHA256_96\020\t*\335\001\n\023Di"
  "ffieHellmanGroups\022\021\n\rNONE_DH_GROUP\020\000\022\013\n\007"
  "MODP768\020\001\022\014\n\010MODP1024\020\002\022\014\n\010MODP1536\020\003\022\014\n"
  "\010MODP2048\020\004\022\014\n\010MODP3072\020\005\022\014\n\010MODP4096\020\006\022"
  "\014\n\010MODP6144\020\007\022\014\n\010MODP8192\020\010\022\020\n\014MODP1024S"
  "160\020\t\022\020\n\014MODP2048S224\020\n\022\020\n\014MODP2048S256\020"
  "\013\022\016\n\nCURVE25519\020\014*\212\001\n\024PseudoRandomFuncti"
  "on\022\014\n\010NONE_PRF\020\000\022\n\n\006PRFMD5\020\001\022\013\n\007PRFSHA1\020"
  "\002\022\016\n\nPRFAESXCBC\020\003\022\016\n\nPRFAESCMAC\020\004\022\r\n\tPRF"
  "SHA256\020\005\022\r\n\tPRFSHA384\020\006\022\r\n\tPRFSHA512\020\007*0"
  "\n\tIPsecMode\022\017\n\013TUNNEL_MODE\020\000\022\022\n\016TRANSPOR"
  "T_MODE\020\001*3\n\010AuthType\022\n\n\006PUBKEY\020\000\022\007\n\003PSK\020"
  "\001\022\t\n\005XAUTH\020\002\022\007\n\003EAP\020\003*\200\001\n\nIkeSaState\022\013\n\007"
  "CREATED\020\000\022\016\n\nCONNECTING\020\001\022\017\n\013ESTABLISHED"
  "\020\002\022\013\n\007PASSIVE\020\003\022\014\n\010REKEYING\020\004\022\013\n\007REKEYED"
  "\020\005\022\014\n\010DELETING\020\006\022\016\n\nDESTROYING\020\007*\352\001\n\014Chi"
  "ldSaState\022\021\n\rCHILD_CREATED\020\000\022\020\n\014CHILD_RO"
  "UTED\020\001\022\024\n\020CHILD_INSTALLING\020\002\022\023\n\017CHILD_IN"
  "STALLED\020\003\022\022\n\016CHILD_UPDATING\020\004\022\022\n\016CHILD_R"
  "EKEYING\020\005\022\021\n\rCHILD_REKEYED\020\006\022\022\n\016CHILD_RE"
  "TRYING\020\007\022\022\n\016CHILD_DELETING\020\010\022\021\n\rCHILD_DE"
  "LETED\020\t\022\024\n\020CHILD_DESTROYING\020\n*n\n\017Certifi"
  "cateType\022\r\n\tCERT_X509\020\000\022\020\n\014CERT_X509_AC\020"
  "\001\022\021\n\rCERT_X509_CRL\020\002\022\026\n\022CERT_OCSP_RESPON"
  "SE\020\003\022\017\n\013CERT_PUBKEY\020\004*u\n\023X509Certificate"
  "Flag\022\027\n\023X509_CERT_FLAG_NONE\020\000\022\025\n\021X509_CE"
  "RT_FLAG_CA\020\001\022\025\n\021X509_CERT_FLAG_AA\020\002\022\027\n\023X"
  "509_CERT_FLAG_OCSP\020\0032\322\007\n\005IPsec\022]\n\014IPsecV"
  "ersion\022$.opi_api.security.v1.IPsecVersio"
  "nReq\032%.opi_api.security.v1.IPsecVersionR"
  "esp\"\000\022W\n\nIPsecStats\022\".opi_api.security.v"
  "1.IPsecStatsReq\032#.opi_api.security.v1.IP"
  "secStatsResp\"\000\022`\n\rIPsecInitiate\022%.opi_ap"
  "i.security.v1.IPsecInitiateReq\032&.opi_api"
  ".security.v1.IPsecInitiateResp\"\000\022c\n\016IPse"
  "cTerminate\022&.opi_api.security.v1.IPsecTe"
  "rminateReq\032\'.opi_api.security.v1.IPsecTe"
  "rminateResp\"\000\022W\n\nIPsecRekey\022\".opi_api.se"
  "curity.v1.IPsecRekeyReq\032#.opi_api.securi"
  "ty.v1.IPsecRekeyResp\"\000\022]\n\014IPsecListSas\022$"
  ".opi_api.security.v1.IPsecListSasReq\032%.o"
  "pi_api.security.v1.IPsecListSasResp\"\000\022c\n"
  "\016IPsecListConns\022&.opi_api.security.v1.IP"
  "secListConnsReq\032\'.opi_api.security.v1.IP"
  "secListConnsResp\"\000\022c\n\016IPsecListCerts\022&.o"
  "pi_api.security.v1.IPsecListCertsReq\032\'.o"
  "pi_api.security.v1.IPsecListCertsResp\"\000\022"
  "`\n\rIPsecLoadConn\022%.opi_api.security.v1.I"
  "PsecLoadConnReq\032&.opi_api.security.v1.IP"
  "secLoadConnResp\"\000\022f\n\017IPsecUnloadConn\022\'.o"
  "pi_api.security.v1.IPsecUnloadConnReq\032(."
  "opi_api.security.v1.IPsecUnloadConnResp\""
  "\000B2Z0github.com/opiproject/opi-api/secur"
  "ity/v1/gen/gob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ipsec_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ipsec_2eproto = {
    false, false, 8341, descriptor_table_protodef_ipsec_2eproto,
    "ipsec.proto",
    &descriptor_table_ipsec_2eproto_once, nullptr, 0, 41,
    schemas, file_default_instances, TableStruct_ipsec_2eproto::offsets,
    file_level_metadata_ipsec_2eproto, file_level_enum_descriptors_ipsec_2eproto,
    file_level_service_descriptors_ipsec_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ipsec_2eproto_getter() {
  return &descriptor_table_ipsec_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ipsec_2eproto(&descriptor_table_ipsec_2eproto);
namespace opi_api {
namespace security {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CryptoAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[0];
}
bool CryptoAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[1];
}
bool IntegAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiffieHellmanGroups_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[2];
}
bool DiffieHellmanGroups_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PseudoRandomFunction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[3];
}
bool PseudoRandomFunction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPsecMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[4];
}
bool IPsecMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[5];
}
bool AuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IkeSaState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[6];
}
bool IkeSaState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChildSaState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[7];
}
bool ChildSaState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CertificateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[8];
}
bool CertificateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* X509CertificateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ipsec_2eproto);
  return file_level_enum_descriptors_ipsec_2eproto[9];
}
bool X509CertificateFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Proposals::_Internal {
 public:
};

Proposals::Proposals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Proposals)
}
Proposals::Proposals(const Proposals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proposals* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crypto_alg_){from._impl_.crypto_alg_}
    , /*decltype(_impl_._crypto_alg_cached_byte_size_)*/{0}
    , decltype(_impl_.integ_alg_){from._impl_.integ_alg_}
    , /*decltype(_impl_._integ_alg_cached_byte_size_)*/{0}
    , decltype(_impl_.prf_){from._impl_.prf_}
    , /*decltype(_impl_._prf_cached_byte_size_)*/{0}
    , decltype(_impl_.dhgroups_){from._impl_.dhgroups_}
    , /*decltype(_impl_._dhgroups_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Proposals)
}

inline void Proposals::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crypto_alg_){arena}
    , /*decltype(_impl_._crypto_alg_cached_byte_size_)*/{0}
    , decltype(_impl_.integ_alg_){arena}
    , /*decltype(_impl_._integ_alg_cached_byte_size_)*/{0}
    , decltype(_impl_.prf_){arena}
    , /*decltype(_impl_._prf_cached_byte_size_)*/{0}
    , decltype(_impl_.dhgroups_){arena}
    , /*decltype(_impl_._dhgroups_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Proposals::~Proposals() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Proposals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proposals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crypto_alg_.~RepeatedField();
  _impl_.integ_alg_.~RepeatedField();
  _impl_.prf_.~RepeatedField();
  _impl_.dhgroups_.~RepeatedField();
}

void Proposals::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proposals::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Proposals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crypto_alg_.Clear();
  _impl_.integ_alg_.Clear();
  _impl_.prf_.Clear();
  _impl_.dhgroups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.security.v1.CryptoAlgorithm crypto_alg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_crypto_alg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_crypto_alg(static_cast<::opi_api::security::v1::CryptoAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.IntegAlgorithm integ_alg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_integ_alg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_integ_alg(static_cast<::opi_api::security::v1::IntegAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.PseudoRandomFunction prf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_prf(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_prf(static_cast<::opi_api::security::v1::PseudoRandomFunction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.DiffieHellmanGroups dhgroups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_dhgroups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_dhgroups(static_cast<::opi_api::security::v1::DiffieHellmanGroups>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Proposals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Proposals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.CryptoAlgorithm crypto_alg = 1;
  {
    int byte_size = _impl_._crypto_alg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.crypto_alg_, byte_size, target);
    }
  }

  // repeated .opi_api.security.v1.IntegAlgorithm integ_alg = 2;
  {
    int byte_size = _impl_._integ_alg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.integ_alg_, byte_size, target);
    }
  }

  // repeated .opi_api.security.v1.PseudoRandomFunction prf = 3;
  {
    int byte_size = _impl_._prf_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.prf_, byte_size, target);
    }
  }

  // repeated .opi_api.security.v1.DiffieHellmanGroups dhgroups = 4;
  {
    int byte_size = _impl_._dhgroups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, _impl_.dhgroups_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Proposals)
  return target;
}

size_t Proposals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Proposals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.CryptoAlgorithm crypto_alg = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_crypto_alg_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_crypto_alg(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._crypto_alg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opi_api.security.v1.IntegAlgorithm integ_alg = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_integ_alg_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_integ_alg(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._integ_alg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opi_api.security.v1.PseudoRandomFunction prf = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_prf_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_prf(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._prf_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opi_api.security.v1.DiffieHellmanGroups dhgroups = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_dhgroups_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_dhgroups(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dhgroups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposals::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proposals::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposals::GetClassData() const { return &_class_data_; }


void Proposals::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proposals*>(&to_msg);
  auto& from = static_cast<const Proposals&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Proposals)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.crypto_alg_.MergeFrom(from._impl_.crypto_alg_);
  _this->_impl_.integ_alg_.MergeFrom(from._impl_.integ_alg_);
  _this->_impl_.prf_.MergeFrom(from._impl_.prf_);
  _this->_impl_.dhgroups_.MergeFrom(from._impl_.dhgroups_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposals::CopyFrom(const Proposals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Proposals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposals::IsInitialized() const {
  return true;
}

void Proposals::InternalSwap(Proposals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.crypto_alg_.InternalSwap(&other->_impl_.crypto_alg_);
  _impl_.integ_alg_.InternalSwap(&other->_impl_.integ_alg_);
  _impl_.prf_.InternalSwap(&other->_impl_.prf_);
  _impl_.dhgroups_.InternalSwap(&other->_impl_.dhgroups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposals::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[0]);
}

// ===================================================================

class Vips::_Internal {
 public:
};

Vips::Vips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Vips)
}
Vips::Vips(const Vips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vips* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vip_){from._impl_.vip_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Vips)
}

inline void Vips::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vip_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vips::~Vips() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Vips)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vips::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vip_.~RepeatedPtrField();
}

void Vips::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vips::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Vips)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vip_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vips::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string vip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Vips.vip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vips::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Vips)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string vip = 1;
  for (int i = 0, n = this->_internal_vip_size(); i < n; i++) {
    const auto& s = this->_internal_vip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Vips.vip");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Vips)
  return target;
}

size_t Vips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Vips)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vip = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.vip_.size());
  for (int i = 0, n = _impl_.vip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.vip_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vips::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vips::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vips::GetClassData() const { return &_class_data_; }


void Vips::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vips*>(&to_msg);
  auto& from = static_cast<const Vips&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Vips)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vip_.MergeFrom(from._impl_.vip_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vips::CopyFrom(const Vips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Vips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vips::IsInitialized() const {
  return true;
}

void Vips::InternalSwap(Vips* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vip_.InternalSwap(&other->_impl_.vip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vips::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[1]);
}

// ===================================================================

class Pools::_Internal {
 public:
};

Pools::Pools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Pools)
}
Pools::Pools(const Pools& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pools* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pool_){from._impl_.pool_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Pools)
}

inline void Pools::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pool_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pools::~Pools() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Pools)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pools::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pool_.~RepeatedPtrField();
}

void Pools::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pools::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Pools)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pools::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pool();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Pools.pool"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pools::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Pools)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pool = 1;
  for (int i = 0, n = this->_internal_pool_size(); i < n; i++) {
    const auto& s = this->_internal_pool(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Pools.pool");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Pools)
  return target;
}

size_t Pools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Pools)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pool = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pool_.size());
  for (int i = 0, n = _impl_.pool_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pool_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pools::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pools::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pools::GetClassData() const { return &_class_data_; }


void Pools::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pools*>(&to_msg);
  auto& from = static_cast<const Pools&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Pools)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pool_.MergeFrom(from._impl_.pool_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pools::CopyFrom(const Pools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Pools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pools::IsInitialized() const {
  return true;
}

void Pools::InternalSwap(Pools* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pool_.InternalSwap(&other->_impl_.pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pools::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[2]);
}

// ===================================================================

class Certs::_Internal {
 public:
};

Certs::Certs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Certs)
}
Certs::Certs(const Certs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Certs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cert_){from._impl_.cert_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Certs)
}

inline void Certs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cert_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Certs::~Certs() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Certs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Certs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cert_.~RepeatedPtrField();
}

void Certs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Certs::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Certs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cert_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Certs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cert();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Certs.cert"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Certs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Certs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cert = 1;
  for (int i = 0, n = this->_internal_cert_size(); i < n; i++) {
    const auto& s = this->_internal_cert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Certs.cert");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Certs)
  return target;
}

size_t Certs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Certs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cert = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cert_.size());
  for (int i = 0, n = _impl_.cert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cert_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Certs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Certs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Certs::GetClassData() const { return &_class_data_; }


void Certs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Certs*>(&to_msg);
  auto& from = static_cast<const Certs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Certs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cert_.MergeFrom(from._impl_.cert_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Certs::CopyFrom(const Certs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Certs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certs::IsInitialized() const {
  return true;
}

void Certs::InternalSwap(Certs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cert_.InternalSwap(&other->_impl_.cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Certs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[3]);
}

// ===================================================================

class PubKeys::_Internal {
 public:
};

PubKeys::PubKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.PubKeys)
}
PubKeys::PubKeys(const PubKeys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PubKeys* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){from._impl_.pubkey_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.PubKeys)
}

inline void PubKeys::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PubKeys::~PubKeys() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.PubKeys)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PubKeys::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pubkey_.~RepeatedPtrField();
}

void PubKeys::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PubKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.PubKeys)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pubkey_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubKeys::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pubkey();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.PubKeys.pubkey"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PubKeys::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.PubKeys)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pubkey = 1;
  for (int i = 0, n = this->_internal_pubkey_size(); i < n; i++) {
    const auto& s = this->_internal_pubkey(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.PubKeys.pubkey");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.PubKeys)
  return target;
}

size_t PubKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.PubKeys)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pubkey = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pubkey_.size());
  for (int i = 0, n = _impl_.pubkey_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pubkey_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubKeys::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PubKeys::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubKeys::GetClassData() const { return &_class_data_; }


void PubKeys::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PubKeys*>(&to_msg);
  auto& from = static_cast<const PubKeys&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.PubKeys)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pubkey_.MergeFrom(from._impl_.pubkey_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubKeys::CopyFrom(const PubKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.PubKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKeys::IsInitialized() const {
  return true;
}

void PubKeys::InternalSwap(PubKeys* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pubkey_.InternalSwap(&other->_impl_.pubkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PubKeys::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[4]);
}

// ===================================================================

class Groups::_Internal {
 public:
};

Groups::Groups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Groups)
}
Groups::Groups(const Groups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Groups* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){from._impl_.group_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Groups)
}

inline void Groups::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Groups::~Groups() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Groups)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Groups::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.~RepeatedPtrField();
}

void Groups::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Groups::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Groups)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Groups::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Groups.group"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Groups::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Groups)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string group = 1;
  for (int i = 0, n = this->_internal_group_size(); i < n; i++) {
    const auto& s = this->_internal_group(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Groups.group");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Groups)
  return target;
}

size_t Groups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Groups)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string group = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_.size());
  for (int i = 0, n = _impl_.group_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Groups::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Groups::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Groups::GetClassData() const { return &_class_data_; }


void Groups::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Groups*>(&to_msg);
  auto& from = static_cast<const Groups&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Groups)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_.MergeFrom(from._impl_.group_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Groups::CopyFrom(const Groups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Groups::IsInitialized() const {
  return true;
}

void Groups::InternalSwap(Groups* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.group_.InternalSwap(&other->_impl_.group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Groups::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[5]);
}

// ===================================================================

class CertPolicy::_Internal {
 public:
};

CertPolicy::CertPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.CertPolicy)
}
CertPolicy::CertPolicy(const CertPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CertPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cert_policy_){from._impl_.cert_policy_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.CertPolicy)
}

inline void CertPolicy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cert_policy_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CertPolicy::~CertPolicy() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.CertPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cert_policy_.~RepeatedPtrField();
}

void CertPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CertPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.CertPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cert_policy_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string cert_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cert_policy();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.CertPolicy.cert_policy"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.CertPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cert_policy = 1;
  for (int i = 0, n = this->_internal_cert_policy_size(); i < n; i++) {
    const auto& s = this->_internal_cert_policy(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.CertPolicy.cert_policy");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.CertPolicy)
  return target;
}

size_t CertPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.CertPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cert_policy = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cert_policy_.size());
  for (int i = 0, n = _impl_.cert_policy_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cert_policy_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CertPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertPolicy::GetClassData() const { return &_class_data_; }


void CertPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CertPolicy*>(&to_msg);
  auto& from = static_cast<const CertPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.CertPolicy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cert_policy_.MergeFrom(from._impl_.cert_policy_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertPolicy::CopyFrom(const CertPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.CertPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertPolicy::IsInitialized() const {
  return true;
}

void CertPolicy::InternalSwap(CertPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cert_policy_.InternalSwap(&other->_impl_.cert_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CertPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[6]);
}

// ===================================================================

class CaCerts::_Internal {
 public:
};

CaCerts::CaCerts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.CaCerts)
}
CaCerts::CaCerts(const CaCerts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CaCerts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cacert_){from._impl_.cacert_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.CaCerts)
}

inline void CaCerts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cacert_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CaCerts::~CaCerts() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.CaCerts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaCerts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cacert_.~RepeatedPtrField();
}

void CaCerts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaCerts::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.CaCerts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cacert_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaCerts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string cacert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cacert();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.CaCerts.cacert"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaCerts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.CaCerts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cacert = 1;
  for (int i = 0, n = this->_internal_cacert_size(); i < n; i++) {
    const auto& s = this->_internal_cacert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.CaCerts.cacert");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.CaCerts)
  return target;
}

size_t CaCerts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.CaCerts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cacert = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cacert_.size());
  for (int i = 0, n = _impl_.cacert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cacert_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaCerts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CaCerts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaCerts::GetClassData() const { return &_class_data_; }


void CaCerts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CaCerts*>(&to_msg);
  auto& from = static_cast<const CaCerts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.CaCerts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cacert_.MergeFrom(from._impl_.cacert_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaCerts::CopyFrom(const CaCerts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.CaCerts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaCerts::IsInitialized() const {
  return true;
}

void CaCerts::InternalSwap(CaCerts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cacert_.InternalSwap(&other->_impl_.cacert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CaCerts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[7]);
}

// ===================================================================

class LocalAuth::_Internal {
 public:
  static const ::opi_api::security::v1::Certs& certs(const LocalAuth* msg);
  static const ::opi_api::security::v1::PubKeys& pubkeys(const LocalAuth* msg);
};

const ::opi_api::security::v1::Certs&
LocalAuth::_Internal::certs(const LocalAuth* msg) {
  return *msg->_impl_.certs_;
}
const ::opi_api::security::v1::PubKeys&
LocalAuth::_Internal::pubkeys(const LocalAuth* msg) {
  return *msg->_impl_.pubkeys_;
}
LocalAuth::LocalAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.LocalAuth)
}
LocalAuth::LocalAuth(const LocalAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.eap_id_){}
    , decltype(_impl_.aaa_id_){}
    , decltype(_impl_.xauth_id_){}
    , decltype(_impl_.certs_){nullptr}
    , decltype(_impl_.pubkeys_){nullptr}
    , decltype(_impl_.auth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eap_id().empty()) {
    _this->_impl_.eap_id_.Set(from._internal_eap_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aaa_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aaa_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aaa_id().empty()) {
    _this->_impl_.aaa_id_.Set(from._internal_aaa_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xauth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xauth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xauth_id().empty()) {
    _this->_impl_.xauth_id_.Set(from._internal_xauth_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_certs()) {
    _this->_impl_.certs_ = new ::opi_api::security::v1::Certs(*from._impl_.certs_);
  }
  if (from._internal_has_pubkeys()) {
    _this->_impl_.pubkeys_ = new ::opi_api::security::v1::PubKeys(*from._impl_.pubkeys_);
  }
  _this->_impl_.auth_ = from._impl_.auth_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.LocalAuth)
}

inline void LocalAuth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.eap_id_){}
    , decltype(_impl_.aaa_id_){}
    , decltype(_impl_.xauth_id_){}
    , decltype(_impl_.certs_){nullptr}
    , decltype(_impl_.pubkeys_){nullptr}
    , decltype(_impl_.auth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aaa_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aaa_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xauth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xauth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalAuth::~LocalAuth() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.LocalAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.eap_id_.Destroy();
  _impl_.aaa_id_.Destroy();
  _impl_.xauth_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.certs_;
  if (this != internal_default_instance()) delete _impl_.pubkeys_;
}

void LocalAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.LocalAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.eap_id_.ClearToEmpty();
  _impl_.aaa_id_.ClearToEmpty();
  _impl_.xauth_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.certs_ != nullptr) {
    delete _impl_.certs_;
  }
  _impl_.certs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pubkeys_ != nullptr) {
    delete _impl_.pubkeys_;
  }
  _impl_.pubkeys_ = nullptr;
  _impl_.auth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.security.v1.AuthType auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auth(static_cast<::opi_api::security::v1::AuthType>(val));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.LocalAuth.id"));
        } else
          goto handle_unusual;
        continue;
      // string eap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_eap_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.LocalAuth.eap_id"));
        } else
          goto handle_unusual;
        continue;
      // string aaa_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_aaa_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.LocalAuth.aaa_id"));
        } else
          goto handle_unusual;
        continue;
      // string xauth_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_xauth_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.LocalAuth.xauth_id"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Certs certs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_certs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.PubKeys pubkeys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pubkeys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.LocalAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.security.v1.AuthType auth = 1;
  if (this->_internal_auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auth(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.LocalAuth.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string eap_id = 3;
  if (!this->_internal_eap_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eap_id().data(), static_cast<int>(this->_internal_eap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.LocalAuth.eap_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_eap_id(), target);
  }

  // string aaa_id = 4;
  if (!this->_internal_aaa_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aaa_id().data(), static_cast<int>(this->_internal_aaa_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.LocalAuth.aaa_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_aaa_id(), target);
  }

  // string xauth_id = 5;
  if (!this->_internal_xauth_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xauth_id().data(), static_cast<int>(this->_internal_xauth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.LocalAuth.xauth_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_xauth_id(), target);
  }

  // .opi_api.security.v1.Certs certs = 6;
  if (this->_internal_has_certs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::certs(this),
        _Internal::certs(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.PubKeys pubkeys = 7;
  if (this->_internal_has_pubkeys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pubkeys(this),
        _Internal::pubkeys(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.LocalAuth)
  return target;
}

size_t LocalAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.LocalAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string eap_id = 3;
  if (!this->_internal_eap_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eap_id());
  }

  // string aaa_id = 4;
  if (!this->_internal_aaa_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aaa_id());
  }

  // string xauth_id = 5;
  if (!this->_internal_xauth_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xauth_id());
  }

  // .opi_api.security.v1.Certs certs = 6;
  if (this->_internal_has_certs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.certs_);
  }

  // .opi_api.security.v1.PubKeys pubkeys = 7;
  if (this->_internal_has_pubkeys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pubkeys_);
  }

  // .opi_api.security.v1.AuthType auth = 1;
  if (this->_internal_auth() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_auth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalAuth::GetClassData() const { return &_class_data_; }


void LocalAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalAuth*>(&to_msg);
  auto& from = static_cast<const LocalAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.LocalAuth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_eap_id().empty()) {
    _this->_internal_set_eap_id(from._internal_eap_id());
  }
  if (!from._internal_aaa_id().empty()) {
    _this->_internal_set_aaa_id(from._internal_aaa_id());
  }
  if (!from._internal_xauth_id().empty()) {
    _this->_internal_set_xauth_id(from._internal_xauth_id());
  }
  if (from._internal_has_certs()) {
    _this->_internal_mutable_certs()->::opi_api::security::v1::Certs::MergeFrom(
        from._internal_certs());
  }
  if (from._internal_has_pubkeys()) {
    _this->_internal_mutable_pubkeys()->::opi_api::security::v1::PubKeys::MergeFrom(
        from._internal_pubkeys());
  }
  if (from._internal_auth() != 0) {
    _this->_internal_set_auth(from._internal_auth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalAuth::CopyFrom(const LocalAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.LocalAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalAuth::IsInitialized() const {
  return true;
}

void LocalAuth::InternalSwap(LocalAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eap_id_, lhs_arena,
      &other->_impl_.eap_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aaa_id_, lhs_arena,
      &other->_impl_.aaa_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xauth_id_, lhs_arena,
      &other->_impl_.xauth_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalAuth, _impl_.auth_)
      + sizeof(LocalAuth::_impl_.auth_)
      - PROTOBUF_FIELD_OFFSET(LocalAuth, _impl_.certs_)>(
          reinterpret_cast<char*>(&_impl_.certs_),
          reinterpret_cast<char*>(&other->_impl_.certs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[8]);
}

// ===================================================================

class RemoteAuth::_Internal {
 public:
  static const ::opi_api::security::v1::Groups& groups(const RemoteAuth* msg);
  static const ::opi_api::security::v1::CertPolicy& cert_policy(const RemoteAuth* msg);
  static const ::opi_api::security::v1::Certs& certs(const RemoteAuth* msg);
  static const ::opi_api::security::v1::CaCerts& ca_certs(const RemoteAuth* msg);
  static const ::opi_api::security::v1::PubKeys& pubkeys(const RemoteAuth* msg);
};

const ::opi_api::security::v1::Groups&
RemoteAuth::_Internal::groups(const RemoteAuth* msg) {
  return *msg->_impl_.groups_;
}
const ::opi_api::security::v1::CertPolicy&
RemoteAuth::_Internal::cert_policy(const RemoteAuth* msg) {
  return *msg->_impl_.cert_policy_;
}
const ::opi_api::security::v1::Certs&
RemoteAuth::_Internal::certs(const RemoteAuth* msg) {
  return *msg->_impl_.certs_;
}
const ::opi_api::security::v1::CaCerts&
RemoteAuth::_Internal::ca_certs(const RemoteAuth* msg) {
  return *msg->_impl_.ca_certs_;
}
const ::opi_api::security::v1::PubKeys&
RemoteAuth::_Internal::pubkeys(const RemoteAuth* msg) {
  return *msg->_impl_.pubkeys_;
}
RemoteAuth::RemoteAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.RemoteAuth)
}
RemoteAuth::RemoteAuth(const RemoteAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.eap_id_){}
    , decltype(_impl_.groups_){nullptr}
    , decltype(_impl_.cert_policy_){nullptr}
    , decltype(_impl_.certs_){nullptr}
    , decltype(_impl_.ca_certs_){nullptr}
    , decltype(_impl_.pubkeys_){nullptr}
    , decltype(_impl_.auth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eap_id().empty()) {
    _this->_impl_.eap_id_.Set(from._internal_eap_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_groups()) {
    _this->_impl_.groups_ = new ::opi_api::security::v1::Groups(*from._impl_.groups_);
  }
  if (from._internal_has_cert_policy()) {
    _this->_impl_.cert_policy_ = new ::opi_api::security::v1::CertPolicy(*from._impl_.cert_policy_);
  }
  if (from._internal_has_certs()) {
    _this->_impl_.certs_ = new ::opi_api::security::v1::Certs(*from._impl_.certs_);
  }
  if (from._internal_has_ca_certs()) {
    _this->_impl_.ca_certs_ = new ::opi_api::security::v1::CaCerts(*from._impl_.ca_certs_);
  }
  if (from._internal_has_pubkeys()) {
    _this->_impl_.pubkeys_ = new ::opi_api::security::v1::PubKeys(*from._impl_.pubkeys_);
  }
  _this->_impl_.auth_ = from._impl_.auth_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.RemoteAuth)
}

inline void RemoteAuth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.eap_id_){}
    , decltype(_impl_.groups_){nullptr}
    , decltype(_impl_.cert_policy_){nullptr}
    , decltype(_impl_.certs_){nullptr}
    , decltype(_impl_.ca_certs_){nullptr}
    , decltype(_impl_.pubkeys_){nullptr}
    , decltype(_impl_.auth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteAuth::~RemoteAuth() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.RemoteAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.eap_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.groups_;
  if (this != internal_default_instance()) delete _impl_.cert_policy_;
  if (this != internal_default_instance()) delete _impl_.certs_;
  if (this != internal_default_instance()) delete _impl_.ca_certs_;
  if (this != internal_default_instance()) delete _impl_.pubkeys_;
}

void RemoteAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.RemoteAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.eap_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.groups_ != nullptr) {
    delete _impl_.groups_;
  }
  _impl_.groups_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cert_policy_ != nullptr) {
    delete _impl_.cert_policy_;
  }
  _impl_.cert_policy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.certs_ != nullptr) {
    delete _impl_.certs_;
  }
  _impl_.certs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ca_certs_ != nullptr) {
    delete _impl_.ca_certs_;
  }
  _impl_.ca_certs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pubkeys_ != nullptr) {
    delete _impl_.pubkeys_;
  }
  _impl_.pubkeys_ = nullptr;
  _impl_.auth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.security.v1.AuthType auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auth(static_cast<::opi_api::security::v1::AuthType>(val));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.RemoteAuth.id"));
        } else
          goto handle_unusual;
        continue;
      // string eap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_eap_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.RemoteAuth.eap_id"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Groups groups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_groups(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.CertPolicy cert_policy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Certs certs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_certs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.CaCerts ca_certs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ca_certs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.PubKeys pubkeys = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pubkeys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.RemoteAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.security.v1.AuthType auth = 1;
  if (this->_internal_auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auth(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.RemoteAuth.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string eap_id = 3;
  if (!this->_internal_eap_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eap_id().data(), static_cast<int>(this->_internal_eap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.RemoteAuth.eap_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_eap_id(), target);
  }

  // .opi_api.security.v1.Groups groups = 4;
  if (this->_internal_has_groups()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::groups(this),
        _Internal::groups(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.CertPolicy cert_policy = 5;
  if (this->_internal_has_cert_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cert_policy(this),
        _Internal::cert_policy(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.Certs certs = 6;
  if (this->_internal_has_certs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::certs(this),
        _Internal::certs(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.CaCerts ca_certs = 7;
  if (this->_internal_has_ca_certs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ca_certs(this),
        _Internal::ca_certs(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.PubKeys pubkeys = 8;
  if (this->_internal_has_pubkeys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::pubkeys(this),
        _Internal::pubkeys(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.RemoteAuth)
  return target;
}

size_t RemoteAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.RemoteAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string eap_id = 3;
  if (!this->_internal_eap_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eap_id());
  }

  // .opi_api.security.v1.Groups groups = 4;
  if (this->_internal_has_groups()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.groups_);
  }

  // .opi_api.security.v1.CertPolicy cert_policy = 5;
  if (this->_internal_has_cert_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cert_policy_);
  }

  // .opi_api.security.v1.Certs certs = 6;
  if (this->_internal_has_certs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.certs_);
  }

  // .opi_api.security.v1.CaCerts ca_certs = 7;
  if (this->_internal_has_ca_certs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ca_certs_);
  }

  // .opi_api.security.v1.PubKeys pubkeys = 8;
  if (this->_internal_has_pubkeys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pubkeys_);
  }

  // .opi_api.security.v1.AuthType auth = 1;
  if (this->_internal_auth() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_auth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteAuth::GetClassData() const { return &_class_data_; }


void RemoteAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteAuth*>(&to_msg);
  auto& from = static_cast<const RemoteAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.RemoteAuth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_eap_id().empty()) {
    _this->_internal_set_eap_id(from._internal_eap_id());
  }
  if (from._internal_has_groups()) {
    _this->_internal_mutable_groups()->::opi_api::security::v1::Groups::MergeFrom(
        from._internal_groups());
  }
  if (from._internal_has_cert_policy()) {
    _this->_internal_mutable_cert_policy()->::opi_api::security::v1::CertPolicy::MergeFrom(
        from._internal_cert_policy());
  }
  if (from._internal_has_certs()) {
    _this->_internal_mutable_certs()->::opi_api::security::v1::Certs::MergeFrom(
        from._internal_certs());
  }
  if (from._internal_has_ca_certs()) {
    _this->_internal_mutable_ca_certs()->::opi_api::security::v1::CaCerts::MergeFrom(
        from._internal_ca_certs());
  }
  if (from._internal_has_pubkeys()) {
    _this->_internal_mutable_pubkeys()->::opi_api::security::v1::PubKeys::MergeFrom(
        from._internal_pubkeys());
  }
  if (from._internal_auth() != 0) {
    _this->_internal_set_auth(from._internal_auth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteAuth::CopyFrom(const RemoteAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.RemoteAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteAuth::IsInitialized() const {
  return true;
}

void RemoteAuth::InternalSwap(RemoteAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eap_id_, lhs_arena,
      &other->_impl_.eap_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteAuth, _impl_.auth_)
      + sizeof(RemoteAuth::_impl_.auth_)
      - PROTOBUF_FIELD_OFFSET(RemoteAuth, _impl_.groups_)>(
          reinterpret_cast<char*>(&_impl_.groups_),
          reinterpret_cast<char*>(&other->_impl_.groups_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[9]);
}

// ===================================================================

class TrafficSelectors_TrafficSelector::_Internal {
 public:
};

TrafficSelectors_TrafficSelector::TrafficSelectors_TrafficSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.TrafficSelectors.TrafficSelector)
}
TrafficSelectors_TrafficSelector::TrafficSelectors_TrafficSelector(const TrafficSelectors_TrafficSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSelectors_TrafficSelector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cidr_){}
    , decltype(_impl_.proto_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cidr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cidr().empty()) {
    _this->_impl_.cidr_.Set(from._internal_cidr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto().empty()) {
    _this->_impl_.proto_.Set(from._internal_proto(), 
      _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.TrafficSelectors.TrafficSelector)
}

inline void TrafficSelectors_TrafficSelector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cidr_){}
    , decltype(_impl_.proto_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cidr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cidr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSelectors_TrafficSelector::~TrafficSelectors_TrafficSelector() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSelectors_TrafficSelector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cidr_.Destroy();
  _impl_.proto_.Destroy();
  _impl_.port_.Destroy();
}

void TrafficSelectors_TrafficSelector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSelectors_TrafficSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cidr_.ClearToEmpty();
  _impl_.proto_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSelectors_TrafficSelector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cidr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cidr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr"));
        } else
          goto handle_unusual;
        continue;
      // string proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.TrafficSelectors.TrafficSelector.proto"));
        } else
          goto handle_unusual;
        continue;
      // string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.TrafficSelectors.TrafficSelector.port"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSelectors_TrafficSelector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cidr = 1;
  if (!this->_internal_cidr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidr().data(), static_cast<int>(this->_internal_cidr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cidr(), target);
  }

  // string proto = 2;
  if (!this->_internal_proto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto().data(), static_cast<int>(this->_internal_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.TrafficSelectors.TrafficSelector.proto");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto(), target);
  }

  // string port = 3;
  if (!this->_internal_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.TrafficSelectors.TrafficSelector.port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  return target;
}

size_t TrafficSelectors_TrafficSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cidr = 1;
  if (!this->_internal_cidr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidr());
  }

  // string proto = 2;
  if (!this->_internal_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto());
  }

  // string port = 3;
  if (!this->_internal_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSelectors_TrafficSelector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSelectors_TrafficSelector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSelectors_TrafficSelector::GetClassData() const { return &_class_data_; }


void TrafficSelectors_TrafficSelector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSelectors_TrafficSelector*>(&to_msg);
  auto& from = static_cast<const TrafficSelectors_TrafficSelector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cidr().empty()) {
    _this->_internal_set_cidr(from._internal_cidr());
  }
  if (!from._internal_proto().empty()) {
    _this->_internal_set_proto(from._internal_proto());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSelectors_TrafficSelector::CopyFrom(const TrafficSelectors_TrafficSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.TrafficSelectors.TrafficSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSelectors_TrafficSelector::IsInitialized() const {
  return true;
}

void TrafficSelectors_TrafficSelector::InternalSwap(TrafficSelectors_TrafficSelector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cidr_, lhs_arena,
      &other->_impl_.cidr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_, lhs_arena,
      &other->_impl_.proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.port_, lhs_arena,
      &other->_impl_.port_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSelectors_TrafficSelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[10]);
}

// ===================================================================

class TrafficSelectors::_Internal {
 public:
};

TrafficSelectors::TrafficSelectors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.TrafficSelectors)
}
TrafficSelectors::TrafficSelectors(const TrafficSelectors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSelectors* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ts_){from._impl_.ts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.TrafficSelectors)
}

inline void TrafficSelectors::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficSelectors::~TrafficSelectors() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.TrafficSelectors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSelectors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ts_.~RepeatedPtrField();
}

void TrafficSelectors::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSelectors::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.TrafficSelectors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSelectors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.security.v1.TrafficSelectors.TrafficSelector ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSelectors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.TrafficSelectors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.TrafficSelectors.TrafficSelector ts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ts_size()); i < n; i++) {
    const auto& repfield = this->_internal_ts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.TrafficSelectors)
  return target;
}

size_t TrafficSelectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.TrafficSelectors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.TrafficSelectors.TrafficSelector ts = 1;
  total_size += 1UL * this->_internal_ts_size();
  for (const auto& msg : this->_impl_.ts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSelectors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSelectors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSelectors::GetClassData() const { return &_class_data_; }


void TrafficSelectors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSelectors*>(&to_msg);
  auto& from = static_cast<const TrafficSelectors&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.TrafficSelectors)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ts_.MergeFrom(from._impl_.ts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSelectors::CopyFrom(const TrafficSelectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.TrafficSelectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSelectors::IsInitialized() const {
  return true;
}

void TrafficSelectors::InternalSwap(TrafficSelectors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ts_.InternalSwap(&other->_impl_.ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSelectors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[11]);
}

// ===================================================================

class Addrs::_Internal {
 public:
};

Addrs::Addrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Addrs)
}
Addrs::Addrs(const Addrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Addrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Addrs)
}

inline void Addrs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Addrs::~Addrs() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Addrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Addrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void Addrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Addrs::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Addrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Addrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Addrs.addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Addrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Addrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Addrs.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Addrs)
  return target;
}

size_t Addrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Addrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Addrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Addrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Addrs::GetClassData() const { return &_class_data_; }


void Addrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Addrs*>(&to_msg);
  auto& from = static_cast<const Addrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Addrs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Addrs::CopyFrom(const Addrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Addrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addrs::IsInitialized() const {
  return true;
}

void Addrs::InternalSwap(Addrs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Addrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[12]);
}

// ===================================================================

class Child::_Internal {
 public:
  static const ::opi_api::security::v1::Proposals& ag_proposals(const Child* msg);
  static const ::opi_api::security::v1::Proposals& esp_proposals(const Child* msg);
  static const ::opi_api::security::v1::TrafficSelectors& local_ts(const Child* msg);
  static const ::opi_api::security::v1::TrafficSelectors& remote_ts(const Child* msg);
};

const ::opi_api::security::v1::Proposals&
Child::_Internal::ag_proposals(const Child* msg) {
  return *msg->_impl_.ag_proposals_;
}
const ::opi_api::security::v1::Proposals&
Child::_Internal::esp_proposals(const Child* msg) {
  return *msg->_impl_.esp_proposals_;
}
const ::opi_api::security::v1::TrafficSelectors&
Child::_Internal::local_ts(const Child* msg) {
  return *msg->_impl_.local_ts_;
}
const ::opi_api::security::v1::TrafficSelectors&
Child::_Internal::remote_ts(const Child* msg) {
  return *msg->_impl_.remote_ts_;
}
Child::Child(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Child)
}
Child::Child(const Child& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Child* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.updown_){}
    , decltype(_impl_.mark_in_sa_){}
    , decltype(_impl_.hw_offload_){}
    , decltype(_impl_.ag_proposals_){nullptr}
    , decltype(_impl_.esp_proposals_){nullptr}
    , decltype(_impl_.local_ts_){nullptr}
    , decltype(_impl_.remote_ts_){nullptr}
    , decltype(_impl_.rekey_time_){}
    , decltype(_impl_.life_time_){}
    , decltype(_impl_.rand_time_){}
    , decltype(_impl_.inactivity_){}
    , decltype(_impl_.mark_in_){}
    , decltype(_impl_.mark_out_){}
    , decltype(_impl_.set_mark_in_){}
    , decltype(_impl_.set_mark_out_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updown_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updown_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updown().empty()) {
    _this->_impl_.updown_.Set(from._internal_updown(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mark_in_sa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_in_sa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_in_sa().empty()) {
    _this->_impl_.mark_in_sa_.Set(from._internal_mark_in_sa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hw_offload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hw_offload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hw_offload().empty()) {
    _this->_impl_.hw_offload_.Set(from._internal_hw_offload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ag_proposals()) {
    _this->_impl_.ag_proposals_ = new ::opi_api::security::v1::Proposals(*from._impl_.ag_proposals_);
  }
  if (from._internal_has_esp_proposals()) {
    _this->_impl_.esp_proposals_ = new ::opi_api::security::v1::Proposals(*from._impl_.esp_proposals_);
  }
  if (from._internal_has_local_ts()) {
    _this->_impl_.local_ts_ = new ::opi_api::security::v1::TrafficSelectors(*from._impl_.local_ts_);
  }
  if (from._internal_has_remote_ts()) {
    _this->_impl_.remote_ts_ = new ::opi_api::security::v1::TrafficSelectors(*from._impl_.remote_ts_);
  }
  ::memcpy(&_impl_.rekey_time_, &from._impl_.rekey_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.set_mark_out_) -
    reinterpret_cast<char*>(&_impl_.rekey_time_)) + sizeof(_impl_.set_mark_out_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Child)
}

inline void Child::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.updown_){}
    , decltype(_impl_.mark_in_sa_){}
    , decltype(_impl_.hw_offload_){}
    , decltype(_impl_.ag_proposals_){nullptr}
    , decltype(_impl_.esp_proposals_){nullptr}
    , decltype(_impl_.local_ts_){nullptr}
    , decltype(_impl_.remote_ts_){nullptr}
    , decltype(_impl_.rekey_time_){0u}
    , decltype(_impl_.life_time_){0u}
    , decltype(_impl_.rand_time_){0u}
    , decltype(_impl_.inactivity_){0u}
    , decltype(_impl_.mark_in_){0u}
    , decltype(_impl_.mark_out_){0u}
    , decltype(_impl_.set_mark_in_){0u}
    , decltype(_impl_.set_mark_out_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updown_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updown_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mark_in_sa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_in_sa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hw_offload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hw_offload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Child::~Child() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Child)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Child::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.updown_.Destroy();
  _impl_.mark_in_sa_.Destroy();
  _impl_.hw_offload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ag_proposals_;
  if (this != internal_default_instance()) delete _impl_.esp_proposals_;
  if (this != internal_default_instance()) delete _impl_.local_ts_;
  if (this != internal_default_instance()) delete _impl_.remote_ts_;
}

void Child::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Child::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Child)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.updown_.ClearToEmpty();
  _impl_.mark_in_sa_.ClearToEmpty();
  _impl_.hw_offload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ag_proposals_ != nullptr) {
    delete _impl_.ag_proposals_;
  }
  _impl_.ag_proposals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.esp_proposals_ != nullptr) {
    delete _impl_.esp_proposals_;
  }
  _impl_.esp_proposals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.local_ts_ != nullptr) {
    delete _impl_.local_ts_;
  }
  _impl_.local_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remote_ts_ != nullptr) {
    delete _impl_.remote_ts_;
  }
  _impl_.remote_ts_ = nullptr;
  ::memset(&_impl_.rekey_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.set_mark_out_) -
      reinterpret_cast<char*>(&_impl_.rekey_time_)) + sizeof(_impl_.set_mark_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Child::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Child.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Proposals ag_proposals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ag_proposals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Proposals esp_proposals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_esp_proposals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.TrafficSelectors local_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.TrafficSelectors remote_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rekey_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rekey_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 life_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.life_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rand_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.rand_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updown = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_updown();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Child.updown"));
        } else
          goto handle_unusual;
        continue;
      // uint32 inactivity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.inactivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mark_in = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.mark_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mark_in_sa = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_mark_in_sa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Child.mark_in_sa"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mark_out = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.mark_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 set_mark_in = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.set_mark_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 set_mark_out = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.set_mark_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hw_offload = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_hw_offload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Child.hw_offload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Child::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Child)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Child.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.security.v1.Proposals ag_proposals = 2;
  if (this->_internal_has_ag_proposals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ag_proposals(this),
        _Internal::ag_proposals(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.Proposals esp_proposals = 3;
  if (this->_internal_has_esp_proposals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::esp_proposals(this),
        _Internal::esp_proposals(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.TrafficSelectors local_ts = 4;
  if (this->_internal_has_local_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::local_ts(this),
        _Internal::local_ts(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.TrafficSelectors remote_ts = 5;
  if (this->_internal_has_remote_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::remote_ts(this),
        _Internal::remote_ts(this).GetCachedSize(), target, stream);
  }

  // uint32 rekey_time = 6;
  if (this->_internal_rekey_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rekey_time(), target);
  }

  // uint32 life_time = 7;
  if (this->_internal_life_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_life_time(), target);
  }

  // uint32 rand_time = 8;
  if (this->_internal_rand_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rand_time(), target);
  }

  // string updown = 9;
  if (!this->_internal_updown().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updown().data(), static_cast<int>(this->_internal_updown().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Child.updown");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_updown(), target);
  }

  // uint32 inactivity = 10;
  if (this->_internal_inactivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_inactivity(), target);
  }

  // uint32 mark_in = 11;
  if (this->_internal_mark_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_mark_in(), target);
  }

  // string mark_in_sa = 12;
  if (!this->_internal_mark_in_sa().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mark_in_sa().data(), static_cast<int>(this->_internal_mark_in_sa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Child.mark_in_sa");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_mark_in_sa(), target);
  }

  // uint32 mark_out = 13;
  if (this->_internal_mark_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mark_out(), target);
  }

  // uint32 set_mark_in = 14;
  if (this->_internal_set_mark_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_set_mark_in(), target);
  }

  // uint32 set_mark_out = 15;
  if (this->_internal_set_mark_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_set_mark_out(), target);
  }

  // string hw_offload = 16;
  if (!this->_internal_hw_offload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hw_offload().data(), static_cast<int>(this->_internal_hw_offload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Child.hw_offload");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_hw_offload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Child)
  return target;
}

size_t Child::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Child)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string updown = 9;
  if (!this->_internal_updown().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updown());
  }

  // string mark_in_sa = 12;
  if (!this->_internal_mark_in_sa().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mark_in_sa());
  }

  // string hw_offload = 16;
  if (!this->_internal_hw_offload().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hw_offload());
  }

  // .opi_api.security.v1.Proposals ag_proposals = 2;
  if (this->_internal_has_ag_proposals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ag_proposals_);
  }

  // .opi_api.security.v1.Proposals esp_proposals = 3;
  if (this->_internal_has_esp_proposals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.esp_proposals_);
  }

  // .opi_api.security.v1.TrafficSelectors local_ts = 4;
  if (this->_internal_has_local_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_ts_);
  }

  // .opi_api.security.v1.TrafficSelectors remote_ts = 5;
  if (this->_internal_has_remote_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_ts_);
  }

  // uint32 rekey_time = 6;
  if (this->_internal_rekey_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rekey_time());
  }

  // uint32 life_time = 7;
  if (this->_internal_life_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_life_time());
  }

  // uint32 rand_time = 8;
  if (this->_internal_rand_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rand_time());
  }

  // uint32 inactivity = 10;
  if (this->_internal_inactivity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inactivity());
  }

  // uint32 mark_in = 11;
  if (this->_internal_mark_in() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mark_in());
  }

  // uint32 mark_out = 13;
  if (this->_internal_mark_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mark_out());
  }

  // uint32 set_mark_in = 14;
  if (this->_internal_set_mark_in() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_set_mark_in());
  }

  // uint32 set_mark_out = 15;
  if (this->_internal_set_mark_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_set_mark_out());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Child::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Child::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Child::GetClassData() const { return &_class_data_; }


void Child::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Child*>(&to_msg);
  auto& from = static_cast<const Child&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Child)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_updown().empty()) {
    _this->_internal_set_updown(from._internal_updown());
  }
  if (!from._internal_mark_in_sa().empty()) {
    _this->_internal_set_mark_in_sa(from._internal_mark_in_sa());
  }
  if (!from._internal_hw_offload().empty()) {
    _this->_internal_set_hw_offload(from._internal_hw_offload());
  }
  if (from._internal_has_ag_proposals()) {
    _this->_internal_mutable_ag_proposals()->::opi_api::security::v1::Proposals::MergeFrom(
        from._internal_ag_proposals());
  }
  if (from._internal_has_esp_proposals()) {
    _this->_internal_mutable_esp_proposals()->::opi_api::security::v1::Proposals::MergeFrom(
        from._internal_esp_proposals());
  }
  if (from._internal_has_local_ts()) {
    _this->_internal_mutable_local_ts()->::opi_api::security::v1::TrafficSelectors::MergeFrom(
        from._internal_local_ts());
  }
  if (from._internal_has_remote_ts()) {
    _this->_internal_mutable_remote_ts()->::opi_api::security::v1::TrafficSelectors::MergeFrom(
        from._internal_remote_ts());
  }
  if (from._internal_rekey_time() != 0) {
    _this->_internal_set_rekey_time(from._internal_rekey_time());
  }
  if (from._internal_life_time() != 0) {
    _this->_internal_set_life_time(from._internal_life_time());
  }
  if (from._internal_rand_time() != 0) {
    _this->_internal_set_rand_time(from._internal_rand_time());
  }
  if (from._internal_inactivity() != 0) {
    _this->_internal_set_inactivity(from._internal_inactivity());
  }
  if (from._internal_mark_in() != 0) {
    _this->_internal_set_mark_in(from._internal_mark_in());
  }
  if (from._internal_mark_out() != 0) {
    _this->_internal_set_mark_out(from._internal_mark_out());
  }
  if (from._internal_set_mark_in() != 0) {
    _this->_internal_set_set_mark_in(from._internal_set_mark_in());
  }
  if (from._internal_set_mark_out() != 0) {
    _this->_internal_set_set_mark_out(from._internal_set_mark_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Child::CopyFrom(const Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Child::IsInitialized() const {
  return true;
}

void Child::InternalSwap(Child* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updown_, lhs_arena,
      &other->_impl_.updown_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mark_in_sa_, lhs_arena,
      &other->_impl_.mark_in_sa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hw_offload_, lhs_arena,
      &other->_impl_.hw_offload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Child, _impl_.set_mark_out_)
      + sizeof(Child::_impl_.set_mark_out_)
      - PROTOBUF_FIELD_OFFSET(Child, _impl_.ag_proposals_)>(
          reinterpret_cast<char*>(&_impl_.ag_proposals_),
          reinterpret_cast<char*>(&other->_impl_.ag_proposals_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Child::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[13]);
}

// ===================================================================

class Connection::_Internal {
 public:
  static const ::opi_api::security::v1::Proposals& proposals(const Connection* msg);
  static const ::opi_api::security::v1::Vips& vips(const Connection* msg);
  static const ::opi_api::security::v1::Pools& pools(const Connection* msg);
  static const ::opi_api::security::v1::LocalAuth& local_auth(const Connection* msg);
  static const ::opi_api::security::v1::RemoteAuth& remote_auth(const Connection* msg);
};

const ::opi_api::security::v1::Proposals&
Connection::_Internal::proposals(const Connection* msg) {
  return *msg->_impl_.proposals_;
}
const ::opi_api::security::v1::Vips&
Connection::_Internal::vips(const Connection* msg) {
  return *msg->_impl_.vips_;
}
const ::opi_api::security::v1::Pools&
Connection::_Internal::pools(const Connection* msg) {
  return *msg->_impl_.pools_;
}
const ::opi_api::security::v1::LocalAuth&
Connection::_Internal::local_auth(const Connection* msg) {
  return *msg->_impl_.local_auth_;
}
const ::opi_api::security::v1::RemoteAuth&
Connection::_Internal::remote_auth(const Connection* msg) {
  return *msg->_impl_.remote_auth_;
}
Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Connection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_addrs_){from._impl_.local_addrs_}
    , decltype(_impl_.remote_addrs_){from._impl_.remote_addrs_}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.encap_){}
    , decltype(_impl_.mobike_){}
    , decltype(_impl_.proposals_){nullptr}
    , decltype(_impl_.vips_){nullptr}
    , decltype(_impl_.pools_){nullptr}
    , decltype(_impl_.local_auth_){nullptr}
    , decltype(_impl_.remote_auth_){nullptr}
    , decltype(_impl_.local_port_){}
    , decltype(_impl_.remote_port_){}
    , decltype(_impl_.dscp_){}
    , decltype(_impl_.dpd_delay_){}
    , decltype(_impl_.dpd_timeout_){}
    , decltype(_impl_.reauth_time_){}
    , decltype(_impl_.rekey_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encap().empty()) {
    _this->_impl_.encap_.Set(from._internal_encap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mobike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mobike().empty()) {
    _this->_impl_.mobike_.Set(from._internal_mobike(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_proposals()) {
    _this->_impl_.proposals_ = new ::opi_api::security::v1::Proposals(*from._impl_.proposals_);
  }
  if (from._internal_has_vips()) {
    _this->_impl_.vips_ = new ::opi_api::security::v1::Vips(*from._impl_.vips_);
  }
  if (from._internal_has_pools()) {
    _this->_impl_.pools_ = new ::opi_api::security::v1::Pools(*from._impl_.pools_);
  }
  if (from._internal_has_local_auth()) {
    _this->_impl_.local_auth_ = new ::opi_api::security::v1::LocalAuth(*from._impl_.local_auth_);
  }
  if (from._internal_has_remote_auth()) {
    _this->_impl_.remote_auth_ = new ::opi_api::security::v1::RemoteAuth(*from._impl_.remote_auth_);
  }
  ::memcpy(&_impl_.local_port_, &from._impl_.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rekey_time_) -
    reinterpret_cast<char*>(&_impl_.local_port_)) + sizeof(_impl_.rekey_time_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.Connection)
}

inline void Connection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_addrs_){arena}
    , decltype(_impl_.remote_addrs_){arena}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.encap_){}
    , decltype(_impl_.mobike_){}
    , decltype(_impl_.proposals_){nullptr}
    , decltype(_impl_.vips_){nullptr}
    , decltype(_impl_.pools_){nullptr}
    , decltype(_impl_.local_auth_){nullptr}
    , decltype(_impl_.remote_auth_){nullptr}
    , decltype(_impl_.local_port_){0u}
    , decltype(_impl_.remote_port_){0u}
    , decltype(_impl_.dscp_){uint64_t{0u}}
    , decltype(_impl_.dpd_delay_){0u}
    , decltype(_impl_.dpd_timeout_){0u}
    , decltype(_impl_.reauth_time_){0u}
    , decltype(_impl_.rekey_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mobike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.Connection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_addrs_.~RepeatedPtrField();
  _impl_.remote_addrs_.~RepeatedPtrField();
  _impl_.children_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.encap_.Destroy();
  _impl_.mobike_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proposals_;
  if (this != internal_default_instance()) delete _impl_.vips_;
  if (this != internal_default_instance()) delete _impl_.pools_;
  if (this != internal_default_instance()) delete _impl_.local_auth_;
  if (this != internal_default_instance()) delete _impl_.remote_auth_;
}

void Connection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.Connection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_addrs_.Clear();
  _impl_.remote_addrs_.Clear();
  _impl_.children_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.encap_.ClearToEmpty();
  _impl_.mobike_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.proposals_ != nullptr) {
    delete _impl_.proposals_;
  }
  _impl_.proposals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vips_ != nullptr) {
    delete _impl_.vips_;
  }
  _impl_.vips_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pools_ != nullptr) {
    delete _impl_.pools_;
  }
  _impl_.pools_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.local_auth_ != nullptr) {
    delete _impl_.local_auth_;
  }
  _impl_.local_auth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remote_auth_ != nullptr) {
    delete _impl_.remote_auth_;
  }
  _impl_.remote_auth_ = nullptr;
  ::memset(&_impl_.local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rekey_time_) -
      reinterpret_cast<char*>(&_impl_.local_port_)) + sizeof(_impl_.rekey_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Connection.name"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Connection.version"));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.Addrs local_addrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.Addrs remote_addrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 local_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.local_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remote_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Proposals proposals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Vips vips = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vips(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dscp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.dscp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_encap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Connection.encap"));
        } else
          goto handle_unusual;
        continue;
      // string mobike = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mobike();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.Connection.mobike"));
        } else
          goto handle_unusual;
        continue;
      // uint32 dpd_delay = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.dpd_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dpd_timeout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.dpd_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reauth_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.reauth_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rekey_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.rekey_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Pools pools = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_pools(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.LocalAuth local_auth = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.RemoteAuth remote_auth = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.Child children = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.Connection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Connection.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Connection.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // repeated .opi_api.security.v1.Addrs local_addrs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opi_api.security.v1.Addrs remote_addrs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 local_port = 5;
  if (this->_internal_local_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_local_port(), target);
  }

  // uint32 remote_port = 6;
  if (this->_internal_remote_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remote_port(), target);
  }

  // .opi_api.security.v1.Proposals proposals = 7;
  if (this->_internal_has_proposals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::proposals(this),
        _Internal::proposals(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.Vips vips = 8;
  if (this->_internal_has_vips()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vips(this),
        _Internal::vips(this).GetCachedSize(), target, stream);
  }

  // uint64 dscp = 9;
  if (this->_internal_dscp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_dscp(), target);
  }

  // string encap = 10;
  if (!this->_internal_encap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encap().data(), static_cast<int>(this->_internal_encap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Connection.encap");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_encap(), target);
  }

  // string mobike = 11;
  if (!this->_internal_mobike().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobike().data(), static_cast<int>(this->_internal_mobike().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.Connection.mobike");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mobike(), target);
  }

  // uint32 dpd_delay = 12;
  if (this->_internal_dpd_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_dpd_delay(), target);
  }

  // uint32 dpd_timeout = 13;
  if (this->_internal_dpd_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_dpd_timeout(), target);
  }

  // uint32 reauth_time = 14;
  if (this->_internal_reauth_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_reauth_time(), target);
  }

  // uint32 rekey_time = 15;
  if (this->_internal_rekey_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rekey_time(), target);
  }

  // .opi_api.security.v1.Pools pools = 16;
  if (this->_internal_has_pools()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::pools(this),
        _Internal::pools(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.LocalAuth local_auth = 17;
  if (this->_internal_has_local_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::local_auth(this),
        _Internal::local_auth(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.RemoteAuth remote_auth = 18;
  if (this->_internal_has_remote_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::remote_auth(this),
        _Internal::remote_auth(this).GetCachedSize(), target, stream);
  }

  // repeated .opi_api.security.v1.Child children = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.Connection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.Addrs local_addrs = 3;
  total_size += 1UL * this->_internal_local_addrs_size();
  for (const auto& msg : this->_impl_.local_addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.security.v1.Addrs remote_addrs = 4;
  total_size += 1UL * this->_internal_remote_addrs_size();
  for (const auto& msg : this->_impl_.remote_addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.security.v1.Child children = 19;
  total_size += 2UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string encap = 10;
  if (!this->_internal_encap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encap());
  }

  // string mobike = 11;
  if (!this->_internal_mobike().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobike());
  }

  // .opi_api.security.v1.Proposals proposals = 7;
  if (this->_internal_has_proposals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposals_);
  }

  // .opi_api.security.v1.Vips vips = 8;
  if (this->_internal_has_vips()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vips_);
  }

  // .opi_api.security.v1.Pools pools = 16;
  if (this->_internal_has_pools()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pools_);
  }

  // .opi_api.security.v1.LocalAuth local_auth = 17;
  if (this->_internal_has_local_auth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_auth_);
  }

  // .opi_api.security.v1.RemoteAuth remote_auth = 18;
  if (this->_internal_has_remote_auth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_auth_);
  }

  // uint32 local_port = 5;
  if (this->_internal_local_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_local_port());
  }

  // uint32 remote_port = 6;
  if (this->_internal_remote_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_port());
  }

  // uint64 dscp = 9;
  if (this->_internal_dscp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dscp());
  }

  // uint32 dpd_delay = 12;
  if (this->_internal_dpd_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dpd_delay());
  }

  // uint32 dpd_timeout = 13;
  if (this->_internal_dpd_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dpd_timeout());
  }

  // uint32 reauth_time = 14;
  if (this->_internal_reauth_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reauth_time());
  }

  // uint32 rekey_time = 15;
  if (this->_internal_rekey_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rekey_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Connection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }


void Connection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Connection*>(&to_msg);
  auto& from = static_cast<const Connection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.Connection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_addrs_.MergeFrom(from._impl_.local_addrs_);
  _this->_impl_.remote_addrs_.MergeFrom(from._impl_.remote_addrs_);
  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_encap().empty()) {
    _this->_internal_set_encap(from._internal_encap());
  }
  if (!from._internal_mobike().empty()) {
    _this->_internal_set_mobike(from._internal_mobike());
  }
  if (from._internal_has_proposals()) {
    _this->_internal_mutable_proposals()->::opi_api::security::v1::Proposals::MergeFrom(
        from._internal_proposals());
  }
  if (from._internal_has_vips()) {
    _this->_internal_mutable_vips()->::opi_api::security::v1::Vips::MergeFrom(
        from._internal_vips());
  }
  if (from._internal_has_pools()) {
    _this->_internal_mutable_pools()->::opi_api::security::v1::Pools::MergeFrom(
        from._internal_pools());
  }
  if (from._internal_has_local_auth()) {
    _this->_internal_mutable_local_auth()->::opi_api::security::v1::LocalAuth::MergeFrom(
        from._internal_local_auth());
  }
  if (from._internal_has_remote_auth()) {
    _this->_internal_mutable_remote_auth()->::opi_api::security::v1::RemoteAuth::MergeFrom(
        from._internal_remote_auth());
  }
  if (from._internal_local_port() != 0) {
    _this->_internal_set_local_port(from._internal_local_port());
  }
  if (from._internal_remote_port() != 0) {
    _this->_internal_set_remote_port(from._internal_remote_port());
  }
  if (from._internal_dscp() != 0) {
    _this->_internal_set_dscp(from._internal_dscp());
  }
  if (from._internal_dpd_delay() != 0) {
    _this->_internal_set_dpd_delay(from._internal_dpd_delay());
  }
  if (from._internal_dpd_timeout() != 0) {
    _this->_internal_set_dpd_timeout(from._internal_dpd_timeout());
  }
  if (from._internal_reauth_time() != 0) {
    _this->_internal_set_reauth_time(from._internal_reauth_time());
  }
  if (from._internal_rekey_time() != 0) {
    _this->_internal_set_rekey_time(from._internal_rekey_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.local_addrs_.InternalSwap(&other->_impl_.local_addrs_);
  _impl_.remote_addrs_.InternalSwap(&other->_impl_.remote_addrs_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encap_, lhs_arena,
      &other->_impl_.encap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobike_, lhs_arena,
      &other->_impl_.mobike_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, _impl_.rekey_time_)
      + sizeof(Connection::_impl_.rekey_time_)
      - PROTOBUF_FIELD_OFFSET(Connection, _impl_.proposals_)>(
          reinterpret_cast<char*>(&_impl_.proposals_),
          reinterpret_cast<char*>(&other->_impl_.proposals_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[14]);
}

// ===================================================================

class IPsecVersionReq::_Internal {
 public:
};

IPsecVersionReq::IPsecVersionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecVersionReq)
}
IPsecVersionReq::IPsecVersionReq(const IPsecVersionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  IPsecVersionReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecVersionReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecVersionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecVersionReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IPsecVersionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[15]);
}

// ===================================================================

class IPsecVersionResp::_Internal {
 public:
};

IPsecVersionResp::IPsecVersionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecVersionResp)
}
IPsecVersionResp::IPsecVersionResp(const IPsecVersionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecVersionResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.daemon_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.sysname_){}
    , decltype(_impl_.release_){}
    , decltype(_impl_.machine_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.daemon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.daemon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_daemon().empty()) {
    _this->_impl_.daemon_.Set(from._internal_daemon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sysname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sysname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sysname().empty()) {
    _this->_impl_.sysname_.Set(from._internal_sysname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.release_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.release_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_release().empty()) {
    _this->_impl_.release_.Set(from._internal_release(), 
      _this->GetArenaForAllocation());
  }
  _impl_.machine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_machine().empty()) {
    _this->_impl_.machine_.Set(from._internal_machine(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecVersionResp)
}

inline void IPsecVersionResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.daemon_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.sysname_){}
    , decltype(_impl_.release_){}
    , decltype(_impl_.machine_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.daemon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.daemon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sysname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sysname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.release_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.release_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.machine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecVersionResp::~IPsecVersionResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecVersionResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecVersionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.daemon_.Destroy();
  _impl_.version_.Destroy();
  _impl_.sysname_.Destroy();
  _impl_.release_.Destroy();
  _impl_.machine_.Destroy();
}

void IPsecVersionResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecVersionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecVersionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.daemon_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.sysname_.ClearToEmpty();
  _impl_.release_.ClearToEmpty();
  _impl_.machine_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecVersionResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string daemon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_daemon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecVersionResp.daemon"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecVersionResp.version"));
        } else
          goto handle_unusual;
        continue;
      // string sysname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sysname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecVersionResp.sysname"));
        } else
          goto handle_unusual;
        continue;
      // string release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_release();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecVersionResp.release"));
        } else
          goto handle_unusual;
        continue;
      // string machine = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_machine();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecVersionResp.machine"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecVersionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecVersionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string daemon = 1;
  if (!this->_internal_daemon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_daemon().data(), static_cast<int>(this->_internal_daemon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecVersionResp.daemon");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_daemon(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecVersionResp.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // string sysname = 3;
  if (!this->_internal_sysname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sysname().data(), static_cast<int>(this->_internal_sysname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecVersionResp.sysname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sysname(), target);
  }

  // string release = 4;
  if (!this->_internal_release().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_release().data(), static_cast<int>(this->_internal_release().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecVersionResp.release");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_release(), target);
  }

  // string machine = 5;
  if (!this->_internal_machine().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine().data(), static_cast<int>(this->_internal_machine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecVersionResp.machine");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_machine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecVersionResp)
  return target;
}

size_t IPsecVersionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecVersionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string daemon = 1;
  if (!this->_internal_daemon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_daemon());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string sysname = 3;
  if (!this->_internal_sysname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sysname());
  }

  // string release = 4;
  if (!this->_internal_release().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_release());
  }

  // string machine = 5;
  if (!this->_internal_machine().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecVersionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecVersionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecVersionResp::GetClassData() const { return &_class_data_; }


void IPsecVersionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecVersionResp*>(&to_msg);
  auto& from = static_cast<const IPsecVersionResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecVersionResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_daemon().empty()) {
    _this->_internal_set_daemon(from._internal_daemon());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_sysname().empty()) {
    _this->_internal_set_sysname(from._internal_sysname());
  }
  if (!from._internal_release().empty()) {
    _this->_internal_set_release(from._internal_release());
  }
  if (!from._internal_machine().empty()) {
    _this->_internal_set_machine(from._internal_machine());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecVersionResp::CopyFrom(const IPsecVersionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecVersionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecVersionResp::IsInitialized() const {
  return true;
}

void IPsecVersionResp::InternalSwap(IPsecVersionResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.daemon_, lhs_arena,
      &other->_impl_.daemon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sysname_, lhs_arena,
      &other->_impl_.sysname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.release_, lhs_arena,
      &other->_impl_.release_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.machine_, lhs_arena,
      &other->_impl_.machine_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecVersionResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[16]);
}

// ===================================================================

class IPsecStatsReq::_Internal {
 public:
};

IPsecStatsReq::IPsecStatsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecStatsReq)
}
IPsecStatsReq::IPsecStatsReq(const IPsecStatsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  IPsecStatsReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecStatsReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecStatsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecStatsReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IPsecStatsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[17]);
}

// ===================================================================

class IPsecStatsResp::_Internal {
 public:
};

IPsecStatsResp::IPsecStatsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecStatsResp)
}
IPsecStatsResp::IPsecStatsResp(const IPsecStatsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecStatsResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecStatsResp)
}

inline void IPsecStatsResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecStatsResp::~IPsecStatsResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecStatsResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecStatsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void IPsecStatsResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecStatsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecStatsResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecStatsResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecStatsResp.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecStatsResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecStatsResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecStatsResp.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecStatsResp)
  return target;
}

size_t IPsecStatsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecStatsResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecStatsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecStatsResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecStatsResp::GetClassData() const { return &_class_data_; }


void IPsecStatsResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecStatsResp*>(&to_msg);
  auto& from = static_cast<const IPsecStatsResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecStatsResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecStatsResp::CopyFrom(const IPsecStatsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecStatsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecStatsResp::IsInitialized() const {
  return true;
}

void IPsecStatsResp::InternalSwap(IPsecStatsResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecStatsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[18]);
}

// ===================================================================

class IPsecInitiateReq::_Internal {
 public:
};

IPsecInitiateReq::IPsecInitiateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecInitiateReq)
}
IPsecInitiateReq::IPsecInitiateReq(const IPsecInitiateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecInitiateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.loglevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_child().empty()) {
    _this->_impl_.child_.Set(from._internal_child(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ike().empty()) {
    _this->_impl_.ike_.Set(from._internal_ike(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeout().empty()) {
    _this->_impl_.timeout_.Set(from._internal_timeout(), 
      _this->GetArenaForAllocation());
  }
  _impl_.loglevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loglevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loglevel().empty()) {
    _this->_impl_.loglevel_.Set(from._internal_loglevel(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecInitiateReq)
}

inline void IPsecInitiateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.loglevel_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.loglevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loglevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecInitiateReq::~IPsecInitiateReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecInitiateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecInitiateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_.Destroy();
  _impl_.ike_.Destroy();
  _impl_.timeout_.Destroy();
  _impl_.loglevel_.Destroy();
}

void IPsecInitiateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecInitiateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecInitiateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_.ClearToEmpty();
  _impl_.ike_.ClearToEmpty();
  _impl_.timeout_.ClearToEmpty();
  _impl_.loglevel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecInitiateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_child();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecInitiateReq.child"));
        } else
          goto handle_unusual;
        continue;
      // string ike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ike();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecInitiateReq.ike"));
        } else
          goto handle_unusual;
        continue;
      // string timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_timeout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecInitiateReq.timeout"));
        } else
          goto handle_unusual;
        continue;
      // string loglevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_loglevel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecInitiateReq.loglevel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecInitiateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecInitiateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string child = 1;
  if (!this->_internal_child().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_child().data(), static_cast<int>(this->_internal_child().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecInitiateReq.child");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_child(), target);
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ike().data(), static_cast<int>(this->_internal_ike().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecInitiateReq.ike");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ike(), target);
  }

  // string timeout = 3;
  if (!this->_internal_timeout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeout().data(), static_cast<int>(this->_internal_timeout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecInitiateReq.timeout");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timeout(), target);
  }

  // string loglevel = 4;
  if (!this->_internal_loglevel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loglevel().data(), static_cast<int>(this->_internal_loglevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecInitiateReq.loglevel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_loglevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecInitiateReq)
  return target;
}

size_t IPsecInitiateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecInitiateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string child = 1;
  if (!this->_internal_child().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child());
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ike());
  }

  // string timeout = 3;
  if (!this->_internal_timeout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeout());
  }

  // string loglevel = 4;
  if (!this->_internal_loglevel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loglevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecInitiateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecInitiateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecInitiateReq::GetClassData() const { return &_class_data_; }


void IPsecInitiateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecInitiateReq*>(&to_msg);
  auto& from = static_cast<const IPsecInitiateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecInitiateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_child().empty()) {
    _this->_internal_set_child(from._internal_child());
  }
  if (!from._internal_ike().empty()) {
    _this->_internal_set_ike(from._internal_ike());
  }
  if (!from._internal_timeout().empty()) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (!from._internal_loglevel().empty()) {
    _this->_internal_set_loglevel(from._internal_loglevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecInitiateReq::CopyFrom(const IPsecInitiateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecInitiateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecInitiateReq::IsInitialized() const {
  return true;
}

void IPsecInitiateReq::InternalSwap(IPsecInitiateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_, lhs_arena,
      &other->_impl_.child_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ike_, lhs_arena,
      &other->_impl_.ike_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeout_, lhs_arena,
      &other->_impl_.timeout_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loglevel_, lhs_arena,
      &other->_impl_.loglevel_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecInitiateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[19]);
}

// ===================================================================

class IPsecInitiateResp::_Internal {
 public:
};

IPsecInitiateResp::IPsecInitiateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecInitiateResp)
}
IPsecInitiateResp::IPsecInitiateResp(const IPsecInitiateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  IPsecInitiateResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecInitiateResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecInitiateResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecInitiateResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IPsecInitiateResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[20]);
}

// ===================================================================

class IPsecTerminateReq::_Internal {
 public:
};

IPsecTerminateReq::IPsecTerminateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecTerminateReq)
}
IPsecTerminateReq::IPsecTerminateReq(const IPsecTerminateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecTerminateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.force_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.loglevel_){}
    , decltype(_impl_.child_id_){}
    , decltype(_impl_.ike_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_child().empty()) {
    _this->_impl_.child_.Set(from._internal_child(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ike().empty()) {
    _this->_impl_.ike_.Set(from._internal_ike(), 
      _this->GetArenaForAllocation());
  }
  _impl_.force_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.force_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_force().empty()) {
    _this->_impl_.force_.Set(from._internal_force(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeout().empty()) {
    _this->_impl_.timeout_.Set(from._internal_timeout(), 
      _this->GetArenaForAllocation());
  }
  _impl_.loglevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loglevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loglevel().empty()) {
    _this->_impl_.loglevel_.Set(from._internal_loglevel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.child_id_, &from._impl_.child_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ike_id_) -
    reinterpret_cast<char*>(&_impl_.child_id_)) + sizeof(_impl_.ike_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecTerminateReq)
}

inline void IPsecTerminateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.force_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.loglevel_){}
    , decltype(_impl_.child_id_){uint64_t{0u}}
    , decltype(_impl_.ike_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.force_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.force_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.loglevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loglevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecTerminateReq::~IPsecTerminateReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecTerminateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecTerminateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_.Destroy();
  _impl_.ike_.Destroy();
  _impl_.force_.Destroy();
  _impl_.timeout_.Destroy();
  _impl_.loglevel_.Destroy();
}

void IPsecTerminateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecTerminateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecTerminateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_.ClearToEmpty();
  _impl_.ike_.ClearToEmpty();
  _impl_.force_.ClearToEmpty();
  _impl_.timeout_.ClearToEmpty();
  _impl_.loglevel_.ClearToEmpty();
  ::memset(&_impl_.child_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ike_id_) -
      reinterpret_cast<char*>(&_impl_.child_id_)) + sizeof(_impl_.ike_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecTerminateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_child();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecTerminateReq.child"));
        } else
          goto handle_unusual;
        continue;
      // string ike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ike();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecTerminateReq.ike"));
        } else
          goto handle_unusual;
        continue;
      // uint64 child_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.child_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ike_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ike_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string force = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_force();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecTerminateReq.force"));
        } else
          goto handle_unusual;
        continue;
      // string timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_timeout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecTerminateReq.timeout"));
        } else
          goto handle_unusual;
        continue;
      // string loglevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_loglevel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecTerminateReq.loglevel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecTerminateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecTerminateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string child = 1;
  if (!this->_internal_child().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_child().data(), static_cast<int>(this->_internal_child().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecTerminateReq.child");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_child(), target);
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ike().data(), static_cast<int>(this->_internal_ike().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecTerminateReq.ike");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ike(), target);
  }

  // uint64 child_id = 3;
  if (this->_internal_child_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_child_id(), target);
  }

  // uint64 ike_id = 4;
  if (this->_internal_ike_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ike_id(), target);
  }

  // string force = 5;
  if (!this->_internal_force().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_force().data(), static_cast<int>(this->_internal_force().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecTerminateReq.force");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_force(), target);
  }

  // string timeout = 6;
  if (!this->_internal_timeout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeout().data(), static_cast<int>(this->_internal_timeout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecTerminateReq.timeout");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_timeout(), target);
  }

  // string loglevel = 7;
  if (!this->_internal_loglevel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loglevel().data(), static_cast<int>(this->_internal_loglevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecTerminateReq.loglevel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_loglevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecTerminateReq)
  return target;
}

size_t IPsecTerminateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecTerminateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string child = 1;
  if (!this->_internal_child().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child());
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ike());
  }

  // string force = 5;
  if (!this->_internal_force().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_force());
  }

  // string timeout = 6;
  if (!this->_internal_timeout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeout());
  }

  // string loglevel = 7;
  if (!this->_internal_loglevel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loglevel());
  }

  // uint64 child_id = 3;
  if (this->_internal_child_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_child_id());
  }

  // uint64 ike_id = 4;
  if (this->_internal_ike_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ike_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecTerminateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecTerminateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecTerminateReq::GetClassData() const { return &_class_data_; }


void IPsecTerminateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecTerminateReq*>(&to_msg);
  auto& from = static_cast<const IPsecTerminateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecTerminateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_child().empty()) {
    _this->_internal_set_child(from._internal_child());
  }
  if (!from._internal_ike().empty()) {
    _this->_internal_set_ike(from._internal_ike());
  }
  if (!from._internal_force().empty()) {
    _this->_internal_set_force(from._internal_force());
  }
  if (!from._internal_timeout().empty()) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (!from._internal_loglevel().empty()) {
    _this->_internal_set_loglevel(from._internal_loglevel());
  }
  if (from._internal_child_id() != 0) {
    _this->_internal_set_child_id(from._internal_child_id());
  }
  if (from._internal_ike_id() != 0) {
    _this->_internal_set_ike_id(from._internal_ike_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecTerminateReq::CopyFrom(const IPsecTerminateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecTerminateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecTerminateReq::IsInitialized() const {
  return true;
}

void IPsecTerminateReq::InternalSwap(IPsecTerminateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_, lhs_arena,
      &other->_impl_.child_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ike_, lhs_arena,
      &other->_impl_.ike_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.force_, lhs_arena,
      &other->_impl_.force_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeout_, lhs_arena,
      &other->_impl_.timeout_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loglevel_, lhs_arena,
      &other->_impl_.loglevel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPsecTerminateReq, _impl_.ike_id_)
      + sizeof(IPsecTerminateReq::_impl_.ike_id_)
      - PROTOBUF_FIELD_OFFSET(IPsecTerminateReq, _impl_.child_id_)>(
          reinterpret_cast<char*>(&_impl_.child_id_),
          reinterpret_cast<char*>(&other->_impl_.child_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecTerminateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[21]);
}

// ===================================================================

class IPsecTerminateResp::_Internal {
 public:
};

IPsecTerminateResp::IPsecTerminateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecTerminateResp)
}
IPsecTerminateResp::IPsecTerminateResp(const IPsecTerminateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecTerminateResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.terminated_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_success().empty()) {
    _this->_impl_.success_.Set(from._internal_success(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.matches_, &from._impl_.matches_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.terminated_) -
    reinterpret_cast<char*>(&_impl_.matches_)) + sizeof(_impl_.terminated_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecTerminateResp)
}

inline void IPsecTerminateResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.matches_){0u}
    , decltype(_impl_.terminated_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecTerminateResp::~IPsecTerminateResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecTerminateResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecTerminateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.Destroy();
}

void IPsecTerminateResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecTerminateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecTerminateResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_.ClearToEmpty();
  ::memset(&_impl_.matches_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.terminated_) -
      reinterpret_cast<char*>(&_impl_.matches_)) + sizeof(_impl_.terminated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecTerminateResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_success();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecTerminateResp.success"));
        } else
          goto handle_unusual;
        continue;
      // uint32 matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 terminated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.terminated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecTerminateResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecTerminateResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecTerminateResp.success");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_success(), target);
  }

  // uint32 matches = 2;
  if (this->_internal_matches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matches(), target);
  }

  // uint32 terminated = 3;
  if (this->_internal_terminated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_terminated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecTerminateResp)
  return target;
}

size_t IPsecTerminateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecTerminateResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // uint32 matches = 2;
  if (this->_internal_matches() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matches());
  }

  // uint32 terminated = 3;
  if (this->_internal_terminated() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_terminated());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecTerminateResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecTerminateResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecTerminateResp::GetClassData() const { return &_class_data_; }


void IPsecTerminateResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecTerminateResp*>(&to_msg);
  auto& from = static_cast<const IPsecTerminateResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecTerminateResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_success().empty()) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_matches() != 0) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_terminated() != 0) {
    _this->_internal_set_terminated(from._internal_terminated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecTerminateResp::CopyFrom(const IPsecTerminateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecTerminateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecTerminateResp::IsInitialized() const {
  return true;
}

void IPsecTerminateResp::InternalSwap(IPsecTerminateResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.success_, lhs_arena,
      &other->_impl_.success_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPsecTerminateResp, _impl_.terminated_)
      + sizeof(IPsecTerminateResp::_impl_.terminated_)
      - PROTOBUF_FIELD_OFFSET(IPsecTerminateResp, _impl_.matches_)>(
          reinterpret_cast<char*>(&_impl_.matches_),
          reinterpret_cast<char*>(&other->_impl_.matches_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecTerminateResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[22]);
}

// ===================================================================

class IPsecRekeyReq::_Internal {
 public:
};

IPsecRekeyReq::IPsecRekeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecRekeyReq)
}
IPsecRekeyReq::IPsecRekeyReq(const IPsecRekeyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecRekeyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.reauth_){}
    , decltype(_impl_.child_id_){}
    , decltype(_impl_.ike_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_child().empty()) {
    _this->_impl_.child_.Set(from._internal_child(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ike().empty()) {
    _this->_impl_.ike_.Set(from._internal_ike(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reauth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reauth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reauth().empty()) {
    _this->_impl_.reauth_.Set(from._internal_reauth(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.child_id_, &from._impl_.child_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ike_id_) -
    reinterpret_cast<char*>(&_impl_.child_id_)) + sizeof(_impl_.ike_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecRekeyReq)
}

inline void IPsecRekeyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.reauth_){}
    , decltype(_impl_.child_id_){uint64_t{0u}}
    , decltype(_impl_.ike_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reauth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reauth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecRekeyReq::~IPsecRekeyReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecRekeyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecRekeyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_.Destroy();
  _impl_.ike_.Destroy();
  _impl_.reauth_.Destroy();
}

void IPsecRekeyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecRekeyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecRekeyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_.ClearToEmpty();
  _impl_.ike_.ClearToEmpty();
  _impl_.reauth_.ClearToEmpty();
  ::memset(&_impl_.child_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ike_id_) -
      reinterpret_cast<char*>(&_impl_.child_id_)) + sizeof(_impl_.ike_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecRekeyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_child();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecRekeyReq.child"));
        } else
          goto handle_unusual;
        continue;
      // string ike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ike();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecRekeyReq.ike"));
        } else
          goto handle_unusual;
        continue;
      // uint64 child_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.child_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ike_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ike_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reauth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reauth();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecRekeyReq.reauth"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecRekeyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecRekeyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string child = 1;
  if (!this->_internal_child().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_child().data(), static_cast<int>(this->_internal_child().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecRekeyReq.child");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_child(), target);
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ike().data(), static_cast<int>(this->_internal_ike().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecRekeyReq.ike");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ike(), target);
  }

  // uint64 child_id = 3;
  if (this->_internal_child_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_child_id(), target);
  }

  // uint64 ike_id = 4;
  if (this->_internal_ike_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ike_id(), target);
  }

  // string reauth = 5;
  if (!this->_internal_reauth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reauth().data(), static_cast<int>(this->_internal_reauth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecRekeyReq.reauth");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reauth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecRekeyReq)
  return target;
}

size_t IPsecRekeyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecRekeyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string child = 1;
  if (!this->_internal_child().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child());
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ike());
  }

  // string reauth = 5;
  if (!this->_internal_reauth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reauth());
  }

  // uint64 child_id = 3;
  if (this->_internal_child_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_child_id());
  }

  // uint64 ike_id = 4;
  if (this->_internal_ike_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ike_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecRekeyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecRekeyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecRekeyReq::GetClassData() const { return &_class_data_; }


void IPsecRekeyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecRekeyReq*>(&to_msg);
  auto& from = static_cast<const IPsecRekeyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecRekeyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_child().empty()) {
    _this->_internal_set_child(from._internal_child());
  }
  if (!from._internal_ike().empty()) {
    _this->_internal_set_ike(from._internal_ike());
  }
  if (!from._internal_reauth().empty()) {
    _this->_internal_set_reauth(from._internal_reauth());
  }
  if (from._internal_child_id() != 0) {
    _this->_internal_set_child_id(from._internal_child_id());
  }
  if (from._internal_ike_id() != 0) {
    _this->_internal_set_ike_id(from._internal_ike_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecRekeyReq::CopyFrom(const IPsecRekeyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecRekeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecRekeyReq::IsInitialized() const {
  return true;
}

void IPsecRekeyReq::InternalSwap(IPsecRekeyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_, lhs_arena,
      &other->_impl_.child_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ike_, lhs_arena,
      &other->_impl_.ike_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reauth_, lhs_arena,
      &other->_impl_.reauth_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPsecRekeyReq, _impl_.ike_id_)
      + sizeof(IPsecRekeyReq::_impl_.ike_id_)
      - PROTOBUF_FIELD_OFFSET(IPsecRekeyReq, _impl_.child_id_)>(
          reinterpret_cast<char*>(&_impl_.child_id_),
          reinterpret_cast<char*>(&other->_impl_.child_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecRekeyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[23]);
}

// ===================================================================

class IPsecRekeyResp::_Internal {
 public:
};

IPsecRekeyResp::IPsecRekeyResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecRekeyResp)
}
IPsecRekeyResp::IPsecRekeyResp(const IPsecRekeyResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecRekeyResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.matches_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_success().empty()) {
    _this->_impl_.success_.Set(from._internal_success(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.matches_ = from._impl_.matches_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecRekeyResp)
}

inline void IPsecRekeyResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.matches_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecRekeyResp::~IPsecRekeyResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecRekeyResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecRekeyResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.Destroy();
}

void IPsecRekeyResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecRekeyResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecRekeyResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_.ClearToEmpty();
  _impl_.matches_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecRekeyResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_success();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecRekeyResp.success"));
        } else
          goto handle_unusual;
        continue;
      // uint32 matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecRekeyResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecRekeyResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecRekeyResp.success");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_success(), target);
  }

  // uint32 matches = 2;
  if (this->_internal_matches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecRekeyResp)
  return target;
}

size_t IPsecRekeyResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecRekeyResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // uint32 matches = 2;
  if (this->_internal_matches() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matches());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecRekeyResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecRekeyResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecRekeyResp::GetClassData() const { return &_class_data_; }


void IPsecRekeyResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecRekeyResp*>(&to_msg);
  auto& from = static_cast<const IPsecRekeyResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecRekeyResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_success().empty()) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_matches() != 0) {
    _this->_internal_set_matches(from._internal_matches());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecRekeyResp::CopyFrom(const IPsecRekeyResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecRekeyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecRekeyResp::IsInitialized() const {
  return true;
}

void IPsecRekeyResp::InternalSwap(IPsecRekeyResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.success_, lhs_arena,
      &other->_impl_.success_, rhs_arena
  );
  swap(_impl_.matches_, other->_impl_.matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecRekeyResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[24]);
}

// ===================================================================

class IPsecListSasReq::_Internal {
 public:
};

IPsecListSasReq::IPsecListSasReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecListSasReq)
}
IPsecListSasReq::IPsecListSasReq(const IPsecListSasReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecListSasReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.noblock_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.child_){}
    , decltype(_impl_.ike_id_){}
    , decltype(_impl_.child_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.noblock_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.noblock_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_noblock().empty()) {
    _this->_impl_.noblock_.Set(from._internal_noblock(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ike().empty()) {
    _this->_impl_.ike_.Set(from._internal_ike(), 
      _this->GetArenaForAllocation());
  }
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_child().empty()) {
    _this->_impl_.child_.Set(from._internal_child(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ike_id_, &from._impl_.ike_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.child_id_) -
    reinterpret_cast<char*>(&_impl_.ike_id_)) + sizeof(_impl_.child_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecListSasReq)
}

inline void IPsecListSasReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.noblock_){}
    , decltype(_impl_.ike_){}
    , decltype(_impl_.child_){}
    , decltype(_impl_.ike_id_){uint64_t{0u}}
    , decltype(_impl_.child_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.noblock_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.noblock_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.child_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecListSasReq::~IPsecListSasReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecListSasReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecListSasReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.noblock_.Destroy();
  _impl_.ike_.Destroy();
  _impl_.child_.Destroy();
}

void IPsecListSasReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecListSasReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecListSasReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.noblock_.ClearToEmpty();
  _impl_.ike_.ClearToEmpty();
  _impl_.child_.ClearToEmpty();
  ::memset(&_impl_.ike_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.child_id_) -
      reinterpret_cast<char*>(&_impl_.ike_id_)) + sizeof(_impl_.child_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecListSasReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string noblock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_noblock();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListSasReq.noblock"));
        } else
          goto handle_unusual;
        continue;
      // string ike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ike();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListSasReq.ike"));
        } else
          goto handle_unusual;
        continue;
      // uint64 ike_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ike_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string child = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_child();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListSasReq.child"));
        } else
          goto handle_unusual;
        continue;
      // uint64 child_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.child_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecListSasReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecListSasReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string noblock = 1;
  if (!this->_internal_noblock().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_noblock().data(), static_cast<int>(this->_internal_noblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListSasReq.noblock");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_noblock(), target);
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ike().data(), static_cast<int>(this->_internal_ike().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListSasReq.ike");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ike(), target);
  }

  // uint64 ike_id = 3;
  if (this->_internal_ike_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ike_id(), target);
  }

  // string child = 4;
  if (!this->_internal_child().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_child().data(), static_cast<int>(this->_internal_child().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListSasReq.child");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_child(), target);
  }

  // uint64 child_id = 5;
  if (this->_internal_child_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_child_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecListSasReq)
  return target;
}

size_t IPsecListSasReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecListSasReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string noblock = 1;
  if (!this->_internal_noblock().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_noblock());
  }

  // string ike = 2;
  if (!this->_internal_ike().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ike());
  }

  // string child = 4;
  if (!this->_internal_child().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child());
  }

  // uint64 ike_id = 3;
  if (this->_internal_ike_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ike_id());
  }

  // uint64 child_id = 5;
  if (this->_internal_child_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_child_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecListSasReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecListSasReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecListSasReq::GetClassData() const { return &_class_data_; }


void IPsecListSasReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecListSasReq*>(&to_msg);
  auto& from = static_cast<const IPsecListSasReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecListSasReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_noblock().empty()) {
    _this->_internal_set_noblock(from._internal_noblock());
  }
  if (!from._internal_ike().empty()) {
    _this->_internal_set_ike(from._internal_ike());
  }
  if (!from._internal_child().empty()) {
    _this->_internal_set_child(from._internal_child());
  }
  if (from._internal_ike_id() != 0) {
    _this->_internal_set_ike_id(from._internal_ike_id());
  }
  if (from._internal_child_id() != 0) {
    _this->_internal_set_child_id(from._internal_child_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecListSasReq::CopyFrom(const IPsecListSasReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecListSasReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecListSasReq::IsInitialized() const {
  return true;
}

void IPsecListSasReq::InternalSwap(IPsecListSasReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.noblock_, lhs_arena,
      &other->_impl_.noblock_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ike_, lhs_arena,
      &other->_impl_.ike_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_, lhs_arena,
      &other->_impl_.child_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPsecListSasReq, _impl_.child_id_)
      + sizeof(IPsecListSasReq::_impl_.child_id_)
      - PROTOBUF_FIELD_OFFSET(IPsecListSasReq, _impl_.ike_id_)>(
          reinterpret_cast<char*>(&_impl_.ike_id_),
          reinterpret_cast<char*>(&other->_impl_.ike_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecListSasReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[25]);
}

// ===================================================================

class ListChildSa::_Internal {
 public:
};

ListChildSa::ListChildSa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.ListChildSa)
}
ListChildSa::ListChildSa(const ListChildSa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListChildSa* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.encap_){}
    , decltype(_impl_.spi_in_){}
    , decltype(_impl_.spi_out_){}
    , decltype(_impl_.cpi_in_){}
    , decltype(_impl_.cpi_out_){}
    , decltype(_impl_.mark_in_){}
    , decltype(_impl_.mark_mask_in_){}
    , decltype(_impl_.mark_out_){}
    , decltype(_impl_.mark_mask_out_){}
    , decltype(_impl_.if_id_in_){}
    , decltype(_impl_.if_id_out_){}
    , decltype(_impl_.encr_alg_){}
    , decltype(_impl_.encr_keysize_){}
    , decltype(_impl_.integ_alg_){}
    , decltype(_impl_.integ_keysize_){}
    , decltype(_impl_.dh_group_){}
    , decltype(_impl_.esn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encap().empty()) {
    _this->_impl_.encap_.Set(from._internal_encap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.spi_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spi_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spi_in().empty()) {
    _this->_impl_.spi_in_.Set(from._internal_spi_in(), 
      _this->GetArenaForAllocation());
  }
  _impl_.spi_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spi_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spi_out().empty()) {
    _this->_impl_.spi_out_.Set(from._internal_spi_out(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpi_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpi_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpi_in().empty()) {
    _this->_impl_.cpi_in_.Set(from._internal_cpi_in(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpi_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpi_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpi_out().empty()) {
    _this->_impl_.cpi_out_.Set(from._internal_cpi_out(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mark_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_in().empty()) {
    _this->_impl_.mark_in_.Set(from._internal_mark_in(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mark_mask_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_mask_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_mask_in().empty()) {
    _this->_impl_.mark_mask_in_.Set(from._internal_mark_mask_in(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mark_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_out().empty()) {
    _this->_impl_.mark_out_.Set(from._internal_mark_out(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mark_mask_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_mask_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_mask_out().empty()) {
    _this->_impl_.mark_mask_out_.Set(from._internal_mark_mask_out(), 
      _this->GetArenaForAllocation());
  }
  _impl_.if_id_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_if_id_in().empty()) {
    _this->_impl_.if_id_in_.Set(from._internal_if_id_in(), 
      _this->GetArenaForAllocation());
  }
  _impl_.if_id_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_if_id_out().empty()) {
    _this->_impl_.if_id_out_.Set(from._internal_if_id_out(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encr_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encr_alg().empty()) {
    _this->_impl_.encr_alg_.Set(from._internal_encr_alg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encr_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encr_keysize().empty()) {
    _this->_impl_.encr_keysize_.Set(from._internal_encr_keysize(), 
      _this->GetArenaForAllocation());
  }
  _impl_.integ_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_integ_alg().empty()) {
    _this->_impl_.integ_alg_.Set(from._internal_integ_alg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.integ_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_integ_keysize().empty()) {
    _this->_impl_.integ_keysize_.Set(from._internal_integ_keysize(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dh_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dh_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dh_group().empty()) {
    _this->_impl_.dh_group_.Set(from._internal_dh_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.esn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.esn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_esn().empty()) {
    _this->_impl_.esn_.Set(from._internal_esn(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.ListChildSa)
}

inline void ListChildSa::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.encap_){}
    , decltype(_impl_.spi_in_){}
    , decltype(_impl_.spi_out_){}
    , decltype(_impl_.cpi_in_){}
    , decltype(_impl_.cpi_out_){}
    , decltype(_impl_.mark_in_){}
    , decltype(_impl_.mark_mask_in_){}
    , decltype(_impl_.mark_out_){}
    , decltype(_impl_.mark_mask_out_){}
    , decltype(_impl_.if_id_in_){}
    , decltype(_impl_.if_id_out_){}
    , decltype(_impl_.encr_alg_){}
    , decltype(_impl_.encr_keysize_){}
    , decltype(_impl_.integ_alg_){}
    , decltype(_impl_.integ_keysize_){}
    , decltype(_impl_.dh_group_){}
    , decltype(_impl_.esn_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.spi_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spi_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.spi_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spi_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpi_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpi_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpi_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpi_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mark_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mark_mask_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_mask_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mark_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mark_mask_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mark_mask_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.if_id_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.if_id_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encr_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encr_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.integ_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.integ_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dh_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dh_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.esn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.esn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListChildSa::~ListChildSa() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.ListChildSa)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListChildSa::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.protocol_.Destroy();
  _impl_.encap_.Destroy();
  _impl_.spi_in_.Destroy();
  _impl_.spi_out_.Destroy();
  _impl_.cpi_in_.Destroy();
  _impl_.cpi_out_.Destroy();
  _impl_.mark_in_.Destroy();
  _impl_.mark_mask_in_.Destroy();
  _impl_.mark_out_.Destroy();
  _impl_.mark_mask_out_.Destroy();
  _impl_.if_id_in_.Destroy();
  _impl_.if_id_out_.Destroy();
  _impl_.encr_alg_.Destroy();
  _impl_.encr_keysize_.Destroy();
  _impl_.integ_alg_.Destroy();
  _impl_.integ_keysize_.Destroy();
  _impl_.dh_group_.Destroy();
  _impl_.esn_.Destroy();
}

void ListChildSa::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListChildSa::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.ListChildSa)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.protocol_.ClearToEmpty();
  _impl_.encap_.ClearToEmpty();
  _impl_.spi_in_.ClearToEmpty();
  _impl_.spi_out_.ClearToEmpty();
  _impl_.cpi_in_.ClearToEmpty();
  _impl_.cpi_out_.ClearToEmpty();
  _impl_.mark_in_.ClearToEmpty();
  _impl_.mark_mask_in_.ClearToEmpty();
  _impl_.mark_out_.ClearToEmpty();
  _impl_.mark_mask_out_.ClearToEmpty();
  _impl_.if_id_in_.ClearToEmpty();
  _impl_.if_id_out_.ClearToEmpty();
  _impl_.encr_alg_.ClearToEmpty();
  _impl_.encr_keysize_.ClearToEmpty();
  _impl_.integ_alg_.ClearToEmpty();
  _impl_.integ_keysize_.ClearToEmpty();
  _impl_.dh_group_.ClearToEmpty();
  _impl_.esn_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChildSa::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.name"));
        } else
          goto handle_unusual;
        continue;
      // string protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.protocol"));
        } else
          goto handle_unusual;
        continue;
      // string encap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.encap"));
        } else
          goto handle_unusual;
        continue;
      // string spi_in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_spi_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.spi_in"));
        } else
          goto handle_unusual;
        continue;
      // string spi_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_spi_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.spi_out"));
        } else
          goto handle_unusual;
        continue;
      // string cpi_in = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cpi_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.cpi_in"));
        } else
          goto handle_unusual;
        continue;
      // string cpi_out = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cpi_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.cpi_out"));
        } else
          goto handle_unusual;
        continue;
      // string mark_in = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mark_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.mark_in"));
        } else
          goto handle_unusual;
        continue;
      // string mark_mask_in = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_mark_mask_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.mark_mask_in"));
        } else
          goto handle_unusual;
        continue;
      // string mark_out = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_mark_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.mark_out"));
        } else
          goto handle_unusual;
        continue;
      // string mark_mask_out = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mark_mask_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.mark_mask_out"));
        } else
          goto handle_unusual;
        continue;
      // string if_id_in = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_if_id_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.if_id_in"));
        } else
          goto handle_unusual;
        continue;
      // string if_id_out = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_if_id_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.if_id_out"));
        } else
          goto handle_unusual;
        continue;
      // string encr_alg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_encr_alg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.encr_alg"));
        } else
          goto handle_unusual;
        continue;
      // string encr_keysize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_encr_keysize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.encr_keysize"));
        } else
          goto handle_unusual;
        continue;
      // string integ_alg = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_integ_alg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.integ_alg"));
        } else
          goto handle_unusual;
        continue;
      // string integ_keysize = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_integ_keysize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.integ_keysize"));
        } else
          goto handle_unusual;
        continue;
      // string dh_group = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_dh_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.dh_group"));
        } else
          goto handle_unusual;
        continue;
      // string esn = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_esn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChildSa.esn"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListChildSa::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.ListChildSa)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string protocol = 2;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  // string encap = 3;
  if (!this->_internal_encap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encap().data(), static_cast<int>(this->_internal_encap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.encap");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encap(), target);
  }

  // string spi_in = 4;
  if (!this->_internal_spi_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spi_in().data(), static_cast<int>(this->_internal_spi_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.spi_in");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_spi_in(), target);
  }

  // string spi_out = 5;
  if (!this->_internal_spi_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spi_out().data(), static_cast<int>(this->_internal_spi_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.spi_out");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_spi_out(), target);
  }

  // string cpi_in = 6;
  if (!this->_internal_cpi_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpi_in().data(), static_cast<int>(this->_internal_cpi_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.cpi_in");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cpi_in(), target);
  }

  // string cpi_out = 7;
  if (!this->_internal_cpi_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpi_out().data(), static_cast<int>(this->_internal_cpi_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.cpi_out");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cpi_out(), target);
  }

  // string mark_in = 8;
  if (!this->_internal_mark_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mark_in().data(), static_cast<int>(this->_internal_mark_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.mark_in");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mark_in(), target);
  }

  // string mark_mask_in = 9;
  if (!this->_internal_mark_mask_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mark_mask_in().data(), static_cast<int>(this->_internal_mark_mask_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.mark_mask_in");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_mark_mask_in(), target);
  }

  // string mark_out = 10;
  if (!this->_internal_mark_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mark_out().data(), static_cast<int>(this->_internal_mark_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.mark_out");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_mark_out(), target);
  }

  // string mark_mask_out = 11;
  if (!this->_internal_mark_mask_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mark_mask_out().data(), static_cast<int>(this->_internal_mark_mask_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.mark_mask_out");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mark_mask_out(), target);
  }

  // string if_id_in = 12;
  if (!this->_internal_if_id_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_id_in().data(), static_cast<int>(this->_internal_if_id_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.if_id_in");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_if_id_in(), target);
  }

  // string if_id_out = 13;
  if (!this->_internal_if_id_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_id_out().data(), static_cast<int>(this->_internal_if_id_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.if_id_out");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_if_id_out(), target);
  }

  // string encr_alg = 14;
  if (!this->_internal_encr_alg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encr_alg().data(), static_cast<int>(this->_internal_encr_alg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.encr_alg");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_encr_alg(), target);
  }

  // string encr_keysize = 15;
  if (!this->_internal_encr_keysize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encr_keysize().data(), static_cast<int>(this->_internal_encr_keysize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.encr_keysize");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_encr_keysize(), target);
  }

  // string integ_alg = 16;
  if (!this->_internal_integ_alg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integ_alg().data(), static_cast<int>(this->_internal_integ_alg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.integ_alg");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_integ_alg(), target);
  }

  // string integ_keysize = 17;
  if (!this->_internal_integ_keysize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integ_keysize().data(), static_cast<int>(this->_internal_integ_keysize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.integ_keysize");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_integ_keysize(), target);
  }

  // string dh_group = 18;
  if (!this->_internal_dh_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dh_group().data(), static_cast<int>(this->_internal_dh_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.dh_group");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_dh_group(), target);
  }

  // string esn = 19;
  if (!this->_internal_esn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_esn().data(), static_cast<int>(this->_internal_esn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChildSa.esn");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_esn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.ListChildSa)
  return target;
}

size_t ListChildSa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.ListChildSa)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string protocol = 2;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string encap = 3;
  if (!this->_internal_encap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encap());
  }

  // string spi_in = 4;
  if (!this->_internal_spi_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spi_in());
  }

  // string spi_out = 5;
  if (!this->_internal_spi_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spi_out());
  }

  // string cpi_in = 6;
  if (!this->_internal_cpi_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpi_in());
  }

  // string cpi_out = 7;
  if (!this->_internal_cpi_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpi_out());
  }

  // string mark_in = 8;
  if (!this->_internal_mark_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mark_in());
  }

  // string mark_mask_in = 9;
  if (!this->_internal_mark_mask_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mark_mask_in());
  }

  // string mark_out = 10;
  if (!this->_internal_mark_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mark_out());
  }

  // string mark_mask_out = 11;
  if (!this->_internal_mark_mask_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mark_mask_out());
  }

  // string if_id_in = 12;
  if (!this->_internal_if_id_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_id_in());
  }

  // string if_id_out = 13;
  if (!this->_internal_if_id_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_id_out());
  }

  // string encr_alg = 14;
  if (!this->_internal_encr_alg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encr_alg());
  }

  // string encr_keysize = 15;
  if (!this->_internal_encr_keysize().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encr_keysize());
  }

  // string integ_alg = 16;
  if (!this->_internal_integ_alg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integ_alg());
  }

  // string integ_keysize = 17;
  if (!this->_internal_integ_keysize().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integ_keysize());
  }

  // string dh_group = 18;
  if (!this->_internal_dh_group().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dh_group());
  }

  // string esn = 19;
  if (!this->_internal_esn().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_esn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChildSa::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListChildSa::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChildSa::GetClassData() const { return &_class_data_; }


void ListChildSa::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListChildSa*>(&to_msg);
  auto& from = static_cast<const ListChildSa&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.ListChildSa)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_encap().empty()) {
    _this->_internal_set_encap(from._internal_encap());
  }
  if (!from._internal_spi_in().empty()) {
    _this->_internal_set_spi_in(from._internal_spi_in());
  }
  if (!from._internal_spi_out().empty()) {
    _this->_internal_set_spi_out(from._internal_spi_out());
  }
  if (!from._internal_cpi_in().empty()) {
    _this->_internal_set_cpi_in(from._internal_cpi_in());
  }
  if (!from._internal_cpi_out().empty()) {
    _this->_internal_set_cpi_out(from._internal_cpi_out());
  }
  if (!from._internal_mark_in().empty()) {
    _this->_internal_set_mark_in(from._internal_mark_in());
  }
  if (!from._internal_mark_mask_in().empty()) {
    _this->_internal_set_mark_mask_in(from._internal_mark_mask_in());
  }
  if (!from._internal_mark_out().empty()) {
    _this->_internal_set_mark_out(from._internal_mark_out());
  }
  if (!from._internal_mark_mask_out().empty()) {
    _this->_internal_set_mark_mask_out(from._internal_mark_mask_out());
  }
  if (!from._internal_if_id_in().empty()) {
    _this->_internal_set_if_id_in(from._internal_if_id_in());
  }
  if (!from._internal_if_id_out().empty()) {
    _this->_internal_set_if_id_out(from._internal_if_id_out());
  }
  if (!from._internal_encr_alg().empty()) {
    _this->_internal_set_encr_alg(from._internal_encr_alg());
  }
  if (!from._internal_encr_keysize().empty()) {
    _this->_internal_set_encr_keysize(from._internal_encr_keysize());
  }
  if (!from._internal_integ_alg().empty()) {
    _this->_internal_set_integ_alg(from._internal_integ_alg());
  }
  if (!from._internal_integ_keysize().empty()) {
    _this->_internal_set_integ_keysize(from._internal_integ_keysize());
  }
  if (!from._internal_dh_group().empty()) {
    _this->_internal_set_dh_group(from._internal_dh_group());
  }
  if (!from._internal_esn().empty()) {
    _this->_internal_set_esn(from._internal_esn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListChildSa::CopyFrom(const ListChildSa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.ListChildSa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChildSa::IsInitialized() const {
  return true;
}

void ListChildSa::InternalSwap(ListChildSa* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encap_, lhs_arena,
      &other->_impl_.encap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spi_in_, lhs_arena,
      &other->_impl_.spi_in_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spi_out_, lhs_arena,
      &other->_impl_.spi_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpi_in_, lhs_arena,
      &other->_impl_.cpi_in_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpi_out_, lhs_arena,
      &other->_impl_.cpi_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mark_in_, lhs_arena,
      &other->_impl_.mark_in_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mark_mask_in_, lhs_arena,
      &other->_impl_.mark_mask_in_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mark_out_, lhs_arena,
      &other->_impl_.mark_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mark_mask_out_, lhs_arena,
      &other->_impl_.mark_mask_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.if_id_in_, lhs_arena,
      &other->_impl_.if_id_in_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.if_id_out_, lhs_arena,
      &other->_impl_.if_id_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encr_alg_, lhs_arena,
      &other->_impl_.encr_alg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encr_keysize_, lhs_arena,
      &other->_impl_.encr_keysize_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.integ_alg_, lhs_arena,
      &other->_impl_.integ_alg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.integ_keysize_, lhs_arena,
      &other->_impl_.integ_keysize_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dh_group_, lhs_arena,
      &other->_impl_.dh_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.esn_, lhs_arena,
      &other->_impl_.esn_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChildSa::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[26]);
}

// ===================================================================

class ListIkeSa::_Internal {
 public:
};

ListIkeSa::ListIkeSa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.ListIkeSa)
}
ListIkeSa::ListIkeSa(const ListIkeSa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListIkeSa* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_vips_){from._impl_.local_vips_}
    , decltype(_impl_.remote_vips_){from._impl_.remote_vips_}
    , decltype(_impl_.tasks_queued_){from._impl_.tasks_queued_}
    , decltype(_impl_.tasks_active_){from._impl_.tasks_active_}
    , decltype(_impl_.tasks_passive_){from._impl_.tasks_passive_}
    , decltype(_impl_.childsas_){from._impl_.childsas_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uniqueid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.local_host_){}
    , decltype(_impl_.local_port_){}
    , decltype(_impl_.local_id_){}
    , decltype(_impl_.remote_host_){}
    , decltype(_impl_.remote_port_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.remote_xauth_id_){}
    , decltype(_impl_.remote_eap_id_){}
    , decltype(_impl_.initiator_){}
    , decltype(_impl_.initiator_spi_){}
    , decltype(_impl_.responder_spi_){}
    , decltype(_impl_.nat_local_){}
    , decltype(_impl_.nat_remote_){}
    , decltype(_impl_.nat_fake_){}
    , decltype(_impl_.nat_any_){}
    , decltype(_impl_.if_id_in_){}
    , decltype(_impl_.if_id_out_){}
    , decltype(_impl_.encr_alg_){}
    , decltype(_impl_.encr_keysize_){}
    , decltype(_impl_.integ_alg_){}
    , decltype(_impl_.integ_keysize_){}
    , decltype(_impl_.prf_alg_){}
    , decltype(_impl_.dh_group_){}
    , decltype(_impl_.ppk_){}
    , decltype(_impl_.established_){}
    , decltype(_impl_.rekey_time_){}
    , decltype(_impl_.reauth_time_){}
    , decltype(_impl_.ikestate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uniqueid().empty()) {
    _this->_impl_.uniqueid_.Set(from._internal_uniqueid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_host().empty()) {
    _this->_impl_.local_host_.Set(from._internal_local_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_port().empty()) {
    _this->_impl_.local_port_.Set(from._internal_local_port(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_id().empty()) {
    _this->_impl_.local_id_.Set(from._internal_local_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_host().empty()) {
    _this->_impl_.remote_host_.Set(from._internal_remote_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_port().empty()) {
    _this->_impl_.remote_port_.Set(from._internal_remote_port(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_id().empty()) {
    _this->_impl_.remote_id_.Set(from._internal_remote_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_xauth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_xauth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_xauth_id().empty()) {
    _this->_impl_.remote_xauth_id_.Set(from._internal_remote_xauth_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_eap_id().empty()) {
    _this->_impl_.remote_eap_id_.Set(from._internal_remote_eap_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.initiator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initiator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initiator().empty()) {
    _this->_impl_.initiator_.Set(from._internal_initiator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.initiator_spi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initiator_spi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initiator_spi().empty()) {
    _this->_impl_.initiator_spi_.Set(from._internal_initiator_spi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.responder_spi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responder_spi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responder_spi().empty()) {
    _this->_impl_.responder_spi_.Set(from._internal_responder_spi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nat_local_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_local_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nat_local().empty()) {
    _this->_impl_.nat_local_.Set(from._internal_nat_local(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nat_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_remote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nat_remote().empty()) {
    _this->_impl_.nat_remote_.Set(from._internal_nat_remote(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nat_fake_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_fake_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nat_fake().empty()) {
    _this->_impl_.nat_fake_.Set(from._internal_nat_fake(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nat_any_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_any_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nat_any().empty()) {
    _this->_impl_.nat_any_.Set(from._internal_nat_any(), 
      _this->GetArenaForAllocation());
  }
  _impl_.if_id_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_if_id_in().empty()) {
    _this->_impl_.if_id_in_.Set(from._internal_if_id_in(), 
      _this->GetArenaForAllocation());
  }
  _impl_.if_id_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_if_id_out().empty()) {
    _this->_impl_.if_id_out_.Set(from._internal_if_id_out(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encr_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encr_alg().empty()) {
    _this->_impl_.encr_alg_.Set(from._internal_encr_alg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encr_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encr_keysize().empty()) {
    _this->_impl_.encr_keysize_.Set(from._internal_encr_keysize(), 
      _this->GetArenaForAllocation());
  }
  _impl_.integ_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_integ_alg().empty()) {
    _this->_impl_.integ_alg_.Set(from._internal_integ_alg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.integ_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_integ_keysize().empty()) {
    _this->_impl_.integ_keysize_.Set(from._internal_integ_keysize(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prf_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prf_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prf_alg().empty()) {
    _this->_impl_.prf_alg_.Set(from._internal_prf_alg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dh_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dh_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dh_group().empty()) {
    _this->_impl_.dh_group_.Set(from._internal_dh_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ppk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ppk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ppk().empty()) {
    _this->_impl_.ppk_.Set(from._internal_ppk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.established_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.established_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_established().empty()) {
    _this->_impl_.established_.Set(from._internal_established(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rekey_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rekey_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rekey_time().empty()) {
    _this->_impl_.rekey_time_.Set(from._internal_rekey_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reauth_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reauth_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reauth_time().empty()) {
    _this->_impl_.reauth_time_.Set(from._internal_reauth_time(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ikestate_ = from._impl_.ikestate_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.ListIkeSa)
}

inline void ListIkeSa::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_vips_){arena}
    , decltype(_impl_.remote_vips_){arena}
    , decltype(_impl_.tasks_queued_){arena}
    , decltype(_impl_.tasks_active_){arena}
    , decltype(_impl_.tasks_passive_){arena}
    , decltype(_impl_.childsas_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uniqueid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.local_host_){}
    , decltype(_impl_.local_port_){}
    , decltype(_impl_.local_id_){}
    , decltype(_impl_.remote_host_){}
    , decltype(_impl_.remote_port_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.remote_xauth_id_){}
    , decltype(_impl_.remote_eap_id_){}
    , decltype(_impl_.initiator_){}
    , decltype(_impl_.initiator_spi_){}
    , decltype(_impl_.responder_spi_){}
    , decltype(_impl_.nat_local_){}
    , decltype(_impl_.nat_remote_){}
    , decltype(_impl_.nat_fake_){}
    , decltype(_impl_.nat_any_){}
    , decltype(_impl_.if_id_in_){}
    , decltype(_impl_.if_id_out_){}
    , decltype(_impl_.encr_alg_){}
    , decltype(_impl_.encr_keysize_){}
    , decltype(_impl_.integ_alg_){}
    , decltype(_impl_.integ_keysize_){}
    , decltype(_impl_.prf_alg_){}
    , decltype(_impl_.dh_group_){}
    , decltype(_impl_.ppk_){}
    , decltype(_impl_.established_){}
    , decltype(_impl_.rekey_time_){}
    , decltype(_impl_.reauth_time_){}
    , decltype(_impl_.ikestate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_xauth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_xauth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initiator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initiator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initiator_spi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initiator_spi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.responder_spi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responder_spi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nat_local_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_local_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nat_remote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_remote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nat_fake_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_fake_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nat_any_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nat_any_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.if_id_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.if_id_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_id_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encr_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encr_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encr_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.integ_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.integ_keysize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.integ_keysize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prf_alg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prf_alg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dh_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dh_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ppk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ppk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.established_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.established_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rekey_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rekey_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reauth_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reauth_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListIkeSa::~ListIkeSa() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.ListIkeSa)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListIkeSa::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_vips_.~RepeatedPtrField();
  _impl_.remote_vips_.~RepeatedPtrField();
  _impl_.tasks_queued_.~RepeatedPtrField();
  _impl_.tasks_active_.~RepeatedPtrField();
  _impl_.tasks_passive_.~RepeatedPtrField();
  _impl_.childsas_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.uniqueid_.Destroy();
  _impl_.version_.Destroy();
  _impl_.local_host_.Destroy();
  _impl_.local_port_.Destroy();
  _impl_.local_id_.Destroy();
  _impl_.remote_host_.Destroy();
  _impl_.remote_port_.Destroy();
  _impl_.remote_id_.Destroy();
  _impl_.remote_xauth_id_.Destroy();
  _impl_.remote_eap_id_.Destroy();
  _impl_.initiator_.Destroy();
  _impl_.initiator_spi_.Destroy();
  _impl_.responder_spi_.Destroy();
  _impl_.nat_local_.Destroy();
  _impl_.nat_remote_.Destroy();
  _impl_.nat_fake_.Destroy();
  _impl_.nat_any_.Destroy();
  _impl_.if_id_in_.Destroy();
  _impl_.if_id_out_.Destroy();
  _impl_.encr_alg_.Destroy();
  _impl_.encr_keysize_.Destroy();
  _impl_.integ_alg_.Destroy();
  _impl_.integ_keysize_.Destroy();
  _impl_.prf_alg_.Destroy();
  _impl_.dh_group_.Destroy();
  _impl_.ppk_.Destroy();
  _impl_.established_.Destroy();
  _impl_.rekey_time_.Destroy();
  _impl_.reauth_time_.Destroy();
}

void ListIkeSa::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListIkeSa::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.ListIkeSa)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_vips_.Clear();
  _impl_.remote_vips_.Clear();
  _impl_.tasks_queued_.Clear();
  _impl_.tasks_active_.Clear();
  _impl_.tasks_passive_.Clear();
  _impl_.childsas_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.uniqueid_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.local_host_.ClearToEmpty();
  _impl_.local_port_.ClearToEmpty();
  _impl_.local_id_.ClearToEmpty();
  _impl_.remote_host_.ClearToEmpty();
  _impl_.remote_port_.ClearToEmpty();
  _impl_.remote_id_.ClearToEmpty();
  _impl_.remote_xauth_id_.ClearToEmpty();
  _impl_.remote_eap_id_.ClearToEmpty();
  _impl_.initiator_.ClearToEmpty();
  _impl_.initiator_spi_.ClearToEmpty();
  _impl_.responder_spi_.ClearToEmpty();
  _impl_.nat_local_.ClearToEmpty();
  _impl_.nat_remote_.ClearToEmpty();
  _impl_.nat_fake_.ClearToEmpty();
  _impl_.nat_any_.ClearToEmpty();
  _impl_.if_id_in_.ClearToEmpty();
  _impl_.if_id_out_.ClearToEmpty();
  _impl_.encr_alg_.ClearToEmpty();
  _impl_.encr_keysize_.ClearToEmpty();
  _impl_.integ_alg_.ClearToEmpty();
  _impl_.integ_keysize_.ClearToEmpty();
  _impl_.prf_alg_.ClearToEmpty();
  _impl_.dh_group_.ClearToEmpty();
  _impl_.ppk_.ClearToEmpty();
  _impl_.established_.ClearToEmpty();
  _impl_.rekey_time_.ClearToEmpty();
  _impl_.reauth_time_.ClearToEmpty();
  _impl_.ikestate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIkeSa::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.name"));
        } else
          goto handle_unusual;
        continue;
      // string uniqueid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uniqueid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.uniqueid"));
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.version"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.IkeSaState ikestate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ikestate(static_cast<::opi_api::security::v1::IkeSaState>(val));
        } else
          goto handle_unusual;
        continue;
      // string local_host = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_local_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.local_host"));
        } else
          goto handle_unusual;
        continue;
      // string local_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_local_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.local_port"));
        } else
          goto handle_unusual;
        continue;
      // string local_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_local_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.local_id"));
        } else
          goto handle_unusual;
        continue;
      // string remote_host = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_remote_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.remote_host"));
        } else
          goto handle_unusual;
        continue;
      // string remote_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_remote_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.remote_port"));
        } else
          goto handle_unusual;
        continue;
      // string remote_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.remote_id"));
        } else
          goto handle_unusual;
        continue;
      // string remote_xauth_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_remote_xauth_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.remote_xauth_id"));
        } else
          goto handle_unusual;
        continue;
      // string remote_eap_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_remote_eap_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.remote_eap_id"));
        } else
          goto handle_unusual;
        continue;
      // string initiator = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_initiator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.initiator"));
        } else
          goto handle_unusual;
        continue;
      // string initiator_spi = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_initiator_spi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.initiator_spi"));
        } else
          goto handle_unusual;
        continue;
      // string responder_spi = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_responder_spi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.responder_spi"));
        } else
          goto handle_unusual;
        continue;
      // string nat_local = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_nat_local();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.nat_local"));
        } else
          goto handle_unusual;
        continue;
      // string nat_remote = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_nat_remote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.nat_remote"));
        } else
          goto handle_unusual;
        continue;
      // string nat_fake = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_nat_fake();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.nat_fake"));
        } else
          goto handle_unusual;
        continue;
      // string nat_any = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_nat_any();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.nat_any"));
        } else
          goto handle_unusual;
        continue;
      // string if_id_in = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_if_id_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.if_id_in"));
        } else
          goto handle_unusual;
        continue;
      // string if_id_out = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_if_id_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.if_id_out"));
        } else
          goto handle_unusual;
        continue;
      // string encr_alg = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_encr_alg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.encr_alg"));
        } else
          goto handle_unusual;
        continue;
      // string encr_keysize = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_encr_keysize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.encr_keysize"));
        } else
          goto handle_unusual;
        continue;
      // string integ_alg = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_integ_alg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.integ_alg"));
        } else
          goto handle_unusual;
        continue;
      // string integ_keysize = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_integ_keysize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.integ_keysize"));
        } else
          goto handle_unusual;
        continue;
      // string prf_alg = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_prf_alg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.prf_alg"));
        } else
          goto handle_unusual;
        continue;
      // string dh_group = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_dh_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.dh_group"));
        } else
          goto handle_unusual;
        continue;
      // string ppk = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_ppk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.ppk"));
        } else
          goto handle_unusual;
        continue;
      // string established = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_established();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.established"));
        } else
          goto handle_unusual;
        continue;
      // string rekey_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_rekey_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.rekey_time"));
        } else
          goto handle_unusual;
        continue;
      // string reauth_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_reauth_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.reauth_time"));
        } else
          goto handle_unusual;
        continue;
      // repeated string local_vips = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_local_vips();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.local_vips"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string remote_vips = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_remote_vips();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.remote_vips"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tasks_queued = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tasks_queued();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.tasks_queued"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tasks_active = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tasks_active();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.tasks_active"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tasks_passive = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tasks_passive();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListIkeSa.tasks_passive"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.ListChildSa childsas = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_childsas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListIkeSa::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.ListIkeSa)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string uniqueid = 2;
  if (!this->_internal_uniqueid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uniqueid().data(), static_cast<int>(this->_internal_uniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.uniqueid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uniqueid(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // .opi_api.security.v1.IkeSaState ikestate = 4;
  if (this->_internal_ikestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ikestate(), target);
  }

  // string local_host = 5;
  if (!this->_internal_local_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_host().data(), static_cast<int>(this->_internal_local_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.local_host");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_local_host(), target);
  }

  // string local_port = 6;
  if (!this->_internal_local_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_port().data(), static_cast<int>(this->_internal_local_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.local_port");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_local_port(), target);
  }

  // string local_id = 7;
  if (!this->_internal_local_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_id().data(), static_cast<int>(this->_internal_local_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.local_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_local_id(), target);
  }

  // string remote_host = 8;
  if (!this->_internal_remote_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_host().data(), static_cast<int>(this->_internal_remote_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.remote_host");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_remote_host(), target);
  }

  // string remote_port = 9;
  if (!this->_internal_remote_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_port().data(), static_cast<int>(this->_internal_remote_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.remote_port");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_remote_port(), target);
  }

  // string remote_id = 10;
  if (!this->_internal_remote_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.remote_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_remote_id(), target);
  }

  // string remote_xauth_id = 11;
  if (!this->_internal_remote_xauth_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_xauth_id().data(), static_cast<int>(this->_internal_remote_xauth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.remote_xauth_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_remote_xauth_id(), target);
  }

  // string remote_eap_id = 12;
  if (!this->_internal_remote_eap_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_eap_id().data(), static_cast<int>(this->_internal_remote_eap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.remote_eap_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_remote_eap_id(), target);
  }

  // string initiator = 13;
  if (!this->_internal_initiator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initiator().data(), static_cast<int>(this->_internal_initiator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.initiator");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_initiator(), target);
  }

  // string initiator_spi = 14;
  if (!this->_internal_initiator_spi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initiator_spi().data(), static_cast<int>(this->_internal_initiator_spi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.initiator_spi");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_initiator_spi(), target);
  }

  // string responder_spi = 15;
  if (!this->_internal_responder_spi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responder_spi().data(), static_cast<int>(this->_internal_responder_spi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.responder_spi");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_responder_spi(), target);
  }

  // string nat_local = 16;
  if (!this->_internal_nat_local().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nat_local().data(), static_cast<int>(this->_internal_nat_local().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.nat_local");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_nat_local(), target);
  }

  // string nat_remote = 17;
  if (!this->_internal_nat_remote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nat_remote().data(), static_cast<int>(this->_internal_nat_remote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.nat_remote");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_nat_remote(), target);
  }

  // string nat_fake = 18;
  if (!this->_internal_nat_fake().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nat_fake().data(), static_cast<int>(this->_internal_nat_fake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.nat_fake");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_nat_fake(), target);
  }

  // string nat_any = 19;
  if (!this->_internal_nat_any().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nat_any().data(), static_cast<int>(this->_internal_nat_any().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.nat_any");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_nat_any(), target);
  }

  // string if_id_in = 20;
  if (!this->_internal_if_id_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_id_in().data(), static_cast<int>(this->_internal_if_id_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.if_id_in");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_if_id_in(), target);
  }

  // string if_id_out = 21;
  if (!this->_internal_if_id_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_id_out().data(), static_cast<int>(this->_internal_if_id_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.if_id_out");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_if_id_out(), target);
  }

  // string encr_alg = 22;
  if (!this->_internal_encr_alg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encr_alg().data(), static_cast<int>(this->_internal_encr_alg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.encr_alg");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_encr_alg(), target);
  }

  // string encr_keysize = 23;
  if (!this->_internal_encr_keysize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encr_keysize().data(), static_cast<int>(this->_internal_encr_keysize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.encr_keysize");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_encr_keysize(), target);
  }

  // string integ_alg = 24;
  if (!this->_internal_integ_alg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integ_alg().data(), static_cast<int>(this->_internal_integ_alg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.integ_alg");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_integ_alg(), target);
  }

  // string integ_keysize = 25;
  if (!this->_internal_integ_keysize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integ_keysize().data(), static_cast<int>(this->_internal_integ_keysize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.integ_keysize");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_integ_keysize(), target);
  }

  // string prf_alg = 26;
  if (!this->_internal_prf_alg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prf_alg().data(), static_cast<int>(this->_internal_prf_alg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.prf_alg");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_prf_alg(), target);
  }

  // string dh_group = 27;
  if (!this->_internal_dh_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dh_group().data(), static_cast<int>(this->_internal_dh_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.dh_group");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_dh_group(), target);
  }

  // string ppk = 28;
  if (!this->_internal_ppk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ppk().data(), static_cast<int>(this->_internal_ppk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.ppk");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_ppk(), target);
  }

  // string established = 29;
  if (!this->_internal_established().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_established().data(), static_cast<int>(this->_internal_established().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.established");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_established(), target);
  }

  // string rekey_time = 30;
  if (!this->_internal_rekey_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rekey_time().data(), static_cast<int>(this->_internal_rekey_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.rekey_time");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_rekey_time(), target);
  }

  // string reauth_time = 31;
  if (!this->_internal_reauth_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reauth_time().data(), static_cast<int>(this->_internal_reauth_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.reauth_time");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_reauth_time(), target);
  }

  // repeated string local_vips = 32;
  for (int i = 0, n = this->_internal_local_vips_size(); i < n; i++) {
    const auto& s = this->_internal_local_vips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.local_vips");
    target = stream->WriteString(32, s, target);
  }

  // repeated string remote_vips = 33;
  for (int i = 0, n = this->_internal_remote_vips_size(); i < n; i++) {
    const auto& s = this->_internal_remote_vips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.remote_vips");
    target = stream->WriteString(33, s, target);
  }

  // repeated string tasks_queued = 34;
  for (int i = 0, n = this->_internal_tasks_queued_size(); i < n; i++) {
    const auto& s = this->_internal_tasks_queued(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.tasks_queued");
    target = stream->WriteString(34, s, target);
  }

  // repeated string tasks_active = 35;
  for (int i = 0, n = this->_internal_tasks_active_size(); i < n; i++) {
    const auto& s = this->_internal_tasks_active(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.tasks_active");
    target = stream->WriteString(35, s, target);
  }

  // repeated string tasks_passive = 36;
  for (int i = 0, n = this->_internal_tasks_passive_size(); i < n; i++) {
    const auto& s = this->_internal_tasks_passive(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListIkeSa.tasks_passive");
    target = stream->WriteString(36, s, target);
  }

  // repeated .opi_api.security.v1.ListChildSa childsas = 37;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_childsas_size()); i < n; i++) {
    const auto& repfield = this->_internal_childsas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.ListIkeSa)
  return target;
}

size_t ListIkeSa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.ListIkeSa)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string local_vips = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.local_vips_.size());
  for (int i = 0, n = _impl_.local_vips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.local_vips_.Get(i));
  }

  // repeated string remote_vips = 33;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.remote_vips_.size());
  for (int i = 0, n = _impl_.remote_vips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.remote_vips_.Get(i));
  }

  // repeated string tasks_queued = 34;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tasks_queued_.size());
  for (int i = 0, n = _impl_.tasks_queued_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tasks_queued_.Get(i));
  }

  // repeated string tasks_active = 35;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tasks_active_.size());
  for (int i = 0, n = _impl_.tasks_active_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tasks_active_.Get(i));
  }

  // repeated string tasks_passive = 36;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tasks_passive_.size());
  for (int i = 0, n = _impl_.tasks_passive_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tasks_passive_.Get(i));
  }

  // repeated .opi_api.security.v1.ListChildSa childsas = 37;
  total_size += 2UL * this->_internal_childsas_size();
  for (const auto& msg : this->_impl_.childsas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uniqueid = 2;
  if (!this->_internal_uniqueid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string local_host = 5;
  if (!this->_internal_local_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_host());
  }

  // string local_port = 6;
  if (!this->_internal_local_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_port());
  }

  // string local_id = 7;
  if (!this->_internal_local_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_id());
  }

  // string remote_host = 8;
  if (!this->_internal_remote_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_host());
  }

  // string remote_port = 9;
  if (!this->_internal_remote_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_port());
  }

  // string remote_id = 10;
  if (!this->_internal_remote_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string remote_xauth_id = 11;
  if (!this->_internal_remote_xauth_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_xauth_id());
  }

  // string remote_eap_id = 12;
  if (!this->_internal_remote_eap_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_eap_id());
  }

  // string initiator = 13;
  if (!this->_internal_initiator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initiator());
  }

  // string initiator_spi = 14;
  if (!this->_internal_initiator_spi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initiator_spi());
  }

  // string responder_spi = 15;
  if (!this->_internal_responder_spi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responder_spi());
  }

  // string nat_local = 16;
  if (!this->_internal_nat_local().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nat_local());
  }

  // string nat_remote = 17;
  if (!this->_internal_nat_remote().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nat_remote());
  }

  // string nat_fake = 18;
  if (!this->_internal_nat_fake().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nat_fake());
  }

  // string nat_any = 19;
  if (!this->_internal_nat_any().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nat_any());
  }

  // string if_id_in = 20;
  if (!this->_internal_if_id_in().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_id_in());
  }

  // string if_id_out = 21;
  if (!this->_internal_if_id_out().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_id_out());
  }

  // string encr_alg = 22;
  if (!this->_internal_encr_alg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encr_alg());
  }

  // string encr_keysize = 23;
  if (!this->_internal_encr_keysize().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encr_keysize());
  }

  // string integ_alg = 24;
  if (!this->_internal_integ_alg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integ_alg());
  }

  // string integ_keysize = 25;
  if (!this->_internal_integ_keysize().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integ_keysize());
  }

  // string prf_alg = 26;
  if (!this->_internal_prf_alg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prf_alg());
  }

  // string dh_group = 27;
  if (!this->_internal_dh_group().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dh_group());
  }

  // string ppk = 28;
  if (!this->_internal_ppk().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ppk());
  }

  // string established = 29;
  if (!this->_internal_established().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_established());
  }

  // string rekey_time = 30;
  if (!this->_internal_rekey_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rekey_time());
  }

  // string reauth_time = 31;
  if (!this->_internal_reauth_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reauth_time());
  }

  // .opi_api.security.v1.IkeSaState ikestate = 4;
  if (this->_internal_ikestate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ikestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIkeSa::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListIkeSa::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIkeSa::GetClassData() const { return &_class_data_; }


void ListIkeSa::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListIkeSa*>(&to_msg);
  auto& from = static_cast<const ListIkeSa&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.ListIkeSa)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_vips_.MergeFrom(from._impl_.local_vips_);
  _this->_impl_.remote_vips_.MergeFrom(from._impl_.remote_vips_);
  _this->_impl_.tasks_queued_.MergeFrom(from._impl_.tasks_queued_);
  _this->_impl_.tasks_active_.MergeFrom(from._impl_.tasks_active_);
  _this->_impl_.tasks_passive_.MergeFrom(from._impl_.tasks_passive_);
  _this->_impl_.childsas_.MergeFrom(from._impl_.childsas_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uniqueid().empty()) {
    _this->_internal_set_uniqueid(from._internal_uniqueid());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_local_host().empty()) {
    _this->_internal_set_local_host(from._internal_local_host());
  }
  if (!from._internal_local_port().empty()) {
    _this->_internal_set_local_port(from._internal_local_port());
  }
  if (!from._internal_local_id().empty()) {
    _this->_internal_set_local_id(from._internal_local_id());
  }
  if (!from._internal_remote_host().empty()) {
    _this->_internal_set_remote_host(from._internal_remote_host());
  }
  if (!from._internal_remote_port().empty()) {
    _this->_internal_set_remote_port(from._internal_remote_port());
  }
  if (!from._internal_remote_id().empty()) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (!from._internal_remote_xauth_id().empty()) {
    _this->_internal_set_remote_xauth_id(from._internal_remote_xauth_id());
  }
  if (!from._internal_remote_eap_id().empty()) {
    _this->_internal_set_remote_eap_id(from._internal_remote_eap_id());
  }
  if (!from._internal_initiator().empty()) {
    _this->_internal_set_initiator(from._internal_initiator());
  }
  if (!from._internal_initiator_spi().empty()) {
    _this->_internal_set_initiator_spi(from._internal_initiator_spi());
  }
  if (!from._internal_responder_spi().empty()) {
    _this->_internal_set_responder_spi(from._internal_responder_spi());
  }
  if (!from._internal_nat_local().empty()) {
    _this->_internal_set_nat_local(from._internal_nat_local());
  }
  if (!from._internal_nat_remote().empty()) {
    _this->_internal_set_nat_remote(from._internal_nat_remote());
  }
  if (!from._internal_nat_fake().empty()) {
    _this->_internal_set_nat_fake(from._internal_nat_fake());
  }
  if (!from._internal_nat_any().empty()) {
    _this->_internal_set_nat_any(from._internal_nat_any());
  }
  if (!from._internal_if_id_in().empty()) {
    _this->_internal_set_if_id_in(from._internal_if_id_in());
  }
  if (!from._internal_if_id_out().empty()) {
    _this->_internal_set_if_id_out(from._internal_if_id_out());
  }
  if (!from._internal_encr_alg().empty()) {
    _this->_internal_set_encr_alg(from._internal_encr_alg());
  }
  if (!from._internal_encr_keysize().empty()) {
    _this->_internal_set_encr_keysize(from._internal_encr_keysize());
  }
  if (!from._internal_integ_alg().empty()) {
    _this->_internal_set_integ_alg(from._internal_integ_alg());
  }
  if (!from._internal_integ_keysize().empty()) {
    _this->_internal_set_integ_keysize(from._internal_integ_keysize());
  }
  if (!from._internal_prf_alg().empty()) {
    _this->_internal_set_prf_alg(from._internal_prf_alg());
  }
  if (!from._internal_dh_group().empty()) {
    _this->_internal_set_dh_group(from._internal_dh_group());
  }
  if (!from._internal_ppk().empty()) {
    _this->_internal_set_ppk(from._internal_ppk());
  }
  if (!from._internal_established().empty()) {
    _this->_internal_set_established(from._internal_established());
  }
  if (!from._internal_rekey_time().empty()) {
    _this->_internal_set_rekey_time(from._internal_rekey_time());
  }
  if (!from._internal_reauth_time().empty()) {
    _this->_internal_set_reauth_time(from._internal_reauth_time());
  }
  if (from._internal_ikestate() != 0) {
    _this->_internal_set_ikestate(from._internal_ikestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIkeSa::CopyFrom(const ListIkeSa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.ListIkeSa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIkeSa::IsInitialized() const {
  return true;
}

void ListIkeSa::InternalSwap(ListIkeSa* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.local_vips_.InternalSwap(&other->_impl_.local_vips_);
  _impl_.remote_vips_.InternalSwap(&other->_impl_.remote_vips_);
  _impl_.tasks_queued_.InternalSwap(&other->_impl_.tasks_queued_);
  _impl_.tasks_active_.InternalSwap(&other->_impl_.tasks_active_);
  _impl_.tasks_passive_.InternalSwap(&other->_impl_.tasks_passive_);
  _impl_.childsas_.InternalSwap(&other->_impl_.childsas_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uniqueid_, lhs_arena,
      &other->_impl_.uniqueid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_host_, lhs_arena,
      &other->_impl_.local_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_port_, lhs_arena,
      &other->_impl_.local_port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_id_, lhs_arena,
      &other->_impl_.local_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_host_, lhs_arena,
      &other->_impl_.remote_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_port_, lhs_arena,
      &other->_impl_.remote_port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_id_, lhs_arena,
      &other->_impl_.remote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_xauth_id_, lhs_arena,
      &other->_impl_.remote_xauth_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_eap_id_, lhs_arena,
      &other->_impl_.remote_eap_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initiator_, lhs_arena,
      &other->_impl_.initiator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initiator_spi_, lhs_arena,
      &other->_impl_.initiator_spi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responder_spi_, lhs_arena,
      &other->_impl_.responder_spi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nat_local_, lhs_arena,
      &other->_impl_.nat_local_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nat_remote_, lhs_arena,
      &other->_impl_.nat_remote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nat_fake_, lhs_arena,
      &other->_impl_.nat_fake_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nat_any_, lhs_arena,
      &other->_impl_.nat_any_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.if_id_in_, lhs_arena,
      &other->_impl_.if_id_in_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.if_id_out_, lhs_arena,
      &other->_impl_.if_id_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encr_alg_, lhs_arena,
      &other->_impl_.encr_alg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encr_keysize_, lhs_arena,
      &other->_impl_.encr_keysize_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.integ_alg_, lhs_arena,
      &other->_impl_.integ_alg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.integ_keysize_, lhs_arena,
      &other->_impl_.integ_keysize_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prf_alg_, lhs_arena,
      &other->_impl_.prf_alg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dh_group_, lhs_arena,
      &other->_impl_.dh_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ppk_, lhs_arena,
      &other->_impl_.ppk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.established_, lhs_arena,
      &other->_impl_.established_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rekey_time_, lhs_arena,
      &other->_impl_.rekey_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reauth_time_, lhs_arena,
      &other->_impl_.reauth_time_, rhs_arena
  );
  swap(_impl_.ikestate_, other->_impl_.ikestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIkeSa::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[27]);
}

// ===================================================================

class IPsecListSasResp::_Internal {
 public:
};

IPsecListSasResp::IPsecListSasResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecListSasResp)
}
IPsecListSasResp::IPsecListSasResp(const IPsecListSasResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecListSasResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ikesas_){from._impl_.ikesas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecListSasResp)
}

inline void IPsecListSasResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ikesas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IPsecListSasResp::~IPsecListSasResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecListSasResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecListSasResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ikesas_.~RepeatedPtrField();
}

void IPsecListSasResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecListSasResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecListSasResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ikesas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecListSasResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.security.v1.ListIkeSa ikesas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ikesas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecListSasResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecListSasResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.ListIkeSa ikesas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ikesas_size()); i < n; i++) {
    const auto& repfield = this->_internal_ikesas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecListSasResp)
  return target;
}

size_t IPsecListSasResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecListSasResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.ListIkeSa ikesas = 1;
  total_size += 1UL * this->_internal_ikesas_size();
  for (const auto& msg : this->_impl_.ikesas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecListSasResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecListSasResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecListSasResp::GetClassData() const { return &_class_data_; }


void IPsecListSasResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecListSasResp*>(&to_msg);
  auto& from = static_cast<const IPsecListSasResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecListSasResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ikesas_.MergeFrom(from._impl_.ikesas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecListSasResp::CopyFrom(const IPsecListSasResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecListSasResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecListSasResp::IsInitialized() const {
  return true;
}

void IPsecListSasResp::InternalSwap(IPsecListSasResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ikesas_.InternalSwap(&other->_impl_.ikesas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecListSasResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[28]);
}

// ===================================================================

class IPsecListConnsReq::_Internal {
 public:
};

IPsecListConnsReq::IPsecListConnsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecListConnsReq)
}
IPsecListConnsReq::IPsecListConnsReq(const IPsecListConnsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecListConnsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ike_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ike().empty()) {
    _this->_impl_.ike_.Set(from._internal_ike(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecListConnsReq)
}

inline void IPsecListConnsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ike_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ike_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ike_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecListConnsReq::~IPsecListConnsReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecListConnsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecListConnsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ike_.Destroy();
}

void IPsecListConnsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecListConnsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecListConnsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ike_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecListConnsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ike = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ike();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListConnsReq.ike"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecListConnsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecListConnsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ike = 1;
  if (!this->_internal_ike().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ike().data(), static_cast<int>(this->_internal_ike().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListConnsReq.ike");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ike(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecListConnsReq)
  return target;
}

size_t IPsecListConnsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecListConnsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ike = 1;
  if (!this->_internal_ike().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ike());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecListConnsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecListConnsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecListConnsReq::GetClassData() const { return &_class_data_; }


void IPsecListConnsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecListConnsReq*>(&to_msg);
  auto& from = static_cast<const IPsecListConnsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecListConnsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ike().empty()) {
    _this->_internal_set_ike(from._internal_ike());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecListConnsReq::CopyFrom(const IPsecListConnsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecListConnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecListConnsReq::IsInitialized() const {
  return true;
}

void IPsecListConnsReq::InternalSwap(IPsecListConnsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ike_, lhs_arena,
      &other->_impl_.ike_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecListConnsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[29]);
}

// ===================================================================

class ListConnAuth::_Internal {
 public:
  static const ::opi_api::security::v1::Groups& group(const ListConnAuth* msg);
  static const ::opi_api::security::v1::CertPolicy& cert_policy(const ListConnAuth* msg);
  static const ::opi_api::security::v1::Certs& certs(const ListConnAuth* msg);
  static const ::opi_api::security::v1::CaCerts& cacerts(const ListConnAuth* msg);
};

const ::opi_api::security::v1::Groups&
ListConnAuth::_Internal::group(const ListConnAuth* msg) {
  return *msg->_impl_.group_;
}
const ::opi_api::security::v1::CertPolicy&
ListConnAuth::_Internal::cert_policy(const ListConnAuth* msg) {
  return *msg->_impl_.cert_policy_;
}
const ::opi_api::security::v1::Certs&
ListConnAuth::_Internal::certs(const ListConnAuth* msg) {
  return *msg->_impl_.certs_;
}
const ::opi_api::security::v1::CaCerts&
ListConnAuth::_Internal::cacerts(const ListConnAuth* msg) {
  return *msg->_impl_.cacerts_;
}
ListConnAuth::ListConnAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.ListConnAuth)
}
ListConnAuth::ListConnAuth(const ListConnAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConnAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class__){}
    , decltype(_impl_.eaptype_){}
    , decltype(_impl_.eapvendor_){}
    , decltype(_impl_.xauth_){}
    , decltype(_impl_.revocation_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ca_id_){}
    , decltype(_impl_.aaa_id_){}
    , decltype(_impl_.eap_id_){}
    , decltype(_impl_.xauth_id_){}
    , decltype(_impl_.group_){nullptr}
    , decltype(_impl_.cert_policy_){nullptr}
    , decltype(_impl_.certs_){nullptr}
    , decltype(_impl_.cacerts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_().empty()) {
    _this->_impl_.class__.Set(from._internal_class_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eaptype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eaptype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eaptype().empty()) {
    _this->_impl_.eaptype_.Set(from._internal_eaptype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eapvendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eapvendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eapvendor().empty()) {
    _this->_impl_.eapvendor_.Set(from._internal_eapvendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xauth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xauth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xauth().empty()) {
    _this->_impl_.xauth_.Set(from._internal_xauth(), 
      _this->GetArenaForAllocation());
  }
  _impl_.revocation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revocation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_revocation().empty()) {
    _this->_impl_.revocation_.Set(from._internal_revocation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ca_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ca_id().empty()) {
    _this->_impl_.ca_id_.Set(from._internal_ca_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aaa_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aaa_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aaa_id().empty()) {
    _this->_impl_.aaa_id_.Set(from._internal_aaa_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eap_id().empty()) {
    _this->_impl_.eap_id_.Set(from._internal_eap_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.xauth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xauth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xauth_id().empty()) {
    _this->_impl_.xauth_id_.Set(from._internal_xauth_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_group()) {
    _this->_impl_.group_ = new ::opi_api::security::v1::Groups(*from._impl_.group_);
  }
  if (from._internal_has_cert_policy()) {
    _this->_impl_.cert_policy_ = new ::opi_api::security::v1::CertPolicy(*from._impl_.cert_policy_);
  }
  if (from._internal_has_certs()) {
    _this->_impl_.certs_ = new ::opi_api::security::v1::Certs(*from._impl_.certs_);
  }
  if (from._internal_has_cacerts()) {
    _this->_impl_.cacerts_ = new ::opi_api::security::v1::CaCerts(*from._impl_.cacerts_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.ListConnAuth)
}

inline void ListConnAuth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.class__){}
    , decltype(_impl_.eaptype_){}
    , decltype(_impl_.eapvendor_){}
    , decltype(_impl_.xauth_){}
    , decltype(_impl_.revocation_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ca_id_){}
    , decltype(_impl_.aaa_id_){}
    , decltype(_impl_.eap_id_){}
    , decltype(_impl_.xauth_id_){}
    , decltype(_impl_.group_){nullptr}
    , decltype(_impl_.cert_policy_){nullptr}
    , decltype(_impl_.certs_){nullptr}
    , decltype(_impl_.cacerts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eaptype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eaptype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eapvendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eapvendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xauth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xauth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.revocation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revocation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ca_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aaa_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aaa_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eap_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.xauth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xauth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListConnAuth::~ListConnAuth() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.ListConnAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConnAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class__.Destroy();
  _impl_.eaptype_.Destroy();
  _impl_.eapvendor_.Destroy();
  _impl_.xauth_.Destroy();
  _impl_.revocation_.Destroy();
  _impl_.id_.Destroy();
  _impl_.ca_id_.Destroy();
  _impl_.aaa_id_.Destroy();
  _impl_.eap_id_.Destroy();
  _impl_.xauth_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.group_;
  if (this != internal_default_instance()) delete _impl_.cert_policy_;
  if (this != internal_default_instance()) delete _impl_.certs_;
  if (this != internal_default_instance()) delete _impl_.cacerts_;
}

void ListConnAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConnAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.ListConnAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class__.ClearToEmpty();
  _impl_.eaptype_.ClearToEmpty();
  _impl_.eapvendor_.ClearToEmpty();
  _impl_.xauth_.ClearToEmpty();
  _impl_.revocation_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.ca_id_.ClearToEmpty();
  _impl_.aaa_id_.ClearToEmpty();
  _impl_.eap_id_.ClearToEmpty();
  _impl_.xauth_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.group_ != nullptr) {
    delete _impl_.group_;
  }
  _impl_.group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cert_policy_ != nullptr) {
    delete _impl_.cert_policy_;
  }
  _impl_.cert_policy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.certs_ != nullptr) {
    delete _impl_.certs_;
  }
  _impl_.certs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cacerts_ != nullptr) {
    delete _impl_.cacerts_;
  }
  _impl_.cacerts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConnAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.class"));
        } else
          goto handle_unusual;
        continue;
      // string eaptype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_eaptype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.eaptype"));
        } else
          goto handle_unusual;
        continue;
      // string eapvendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_eapvendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.eapvendor"));
        } else
          goto handle_unusual;
        continue;
      // string xauth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_xauth();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.xauth"));
        } else
          goto handle_unusual;
        continue;
      // string revocation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_revocation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.revocation"));
        } else
          goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.id"));
        } else
          goto handle_unusual;
        continue;
      // string ca_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ca_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.ca_id"));
        } else
          goto handle_unusual;
        continue;
      // string aaa_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_aaa_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.aaa_id"));
        } else
          goto handle_unusual;
        continue;
      // string eap_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_eap_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.eap_id"));
        } else
          goto handle_unusual;
        continue;
      // string xauth_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_xauth_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnAuth.xauth_id"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Groups group = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.CertPolicy cert_policy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.Certs certs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_certs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.CaCerts cacerts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cacerts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConnAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.ListConnAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class = 1;
  if (!this->_internal_class_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_().data(), static_cast<int>(this->_internal_class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.class");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_(), target);
  }

  // string eaptype = 2;
  if (!this->_internal_eaptype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eaptype().data(), static_cast<int>(this->_internal_eaptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.eaptype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_eaptype(), target);
  }

  // string eapvendor = 3;
  if (!this->_internal_eapvendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eapvendor().data(), static_cast<int>(this->_internal_eapvendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.eapvendor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_eapvendor(), target);
  }

  // string xauth = 4;
  if (!this->_internal_xauth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xauth().data(), static_cast<int>(this->_internal_xauth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.xauth");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_xauth(), target);
  }

  // string revocation = 5;
  if (!this->_internal_revocation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_revocation().data(), static_cast<int>(this->_internal_revocation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.revocation");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_revocation(), target);
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // string ca_id = 7;
  if (!this->_internal_ca_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ca_id().data(), static_cast<int>(this->_internal_ca_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.ca_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ca_id(), target);
  }

  // string aaa_id = 8;
  if (!this->_internal_aaa_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aaa_id().data(), static_cast<int>(this->_internal_aaa_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.aaa_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_aaa_id(), target);
  }

  // string eap_id = 9;
  if (!this->_internal_eap_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eap_id().data(), static_cast<int>(this->_internal_eap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.eap_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_eap_id(), target);
  }

  // string xauth_id = 10;
  if (!this->_internal_xauth_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xauth_id().data(), static_cast<int>(this->_internal_xauth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnAuth.xauth_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_xauth_id(), target);
  }

  // .opi_api.security.v1.Groups group = 11;
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.CertPolicy cert_policy = 12;
  if (this->_internal_has_cert_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cert_policy(this),
        _Internal::cert_policy(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.Certs certs = 13;
  if (this->_internal_has_certs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::certs(this),
        _Internal::certs(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.CaCerts cacerts = 14;
  if (this->_internal_has_cacerts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::cacerts(this),
        _Internal::cacerts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.ListConnAuth)
  return target;
}

size_t ListConnAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.ListConnAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class = 1;
  if (!this->_internal_class_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_());
  }

  // string eaptype = 2;
  if (!this->_internal_eaptype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eaptype());
  }

  // string eapvendor = 3;
  if (!this->_internal_eapvendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eapvendor());
  }

  // string xauth = 4;
  if (!this->_internal_xauth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xauth());
  }

  // string revocation = 5;
  if (!this->_internal_revocation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_revocation());
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ca_id = 7;
  if (!this->_internal_ca_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ca_id());
  }

  // string aaa_id = 8;
  if (!this->_internal_aaa_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aaa_id());
  }

  // string eap_id = 9;
  if (!this->_internal_eap_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eap_id());
  }

  // string xauth_id = 10;
  if (!this->_internal_xauth_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xauth_id());
  }

  // .opi_api.security.v1.Groups group = 11;
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_);
  }

  // .opi_api.security.v1.CertPolicy cert_policy = 12;
  if (this->_internal_has_cert_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cert_policy_);
  }

  // .opi_api.security.v1.Certs certs = 13;
  if (this->_internal_has_certs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.certs_);
  }

  // .opi_api.security.v1.CaCerts cacerts = 14;
  if (this->_internal_has_cacerts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cacerts_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConnAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConnAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConnAuth::GetClassData() const { return &_class_data_; }


void ListConnAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConnAuth*>(&to_msg);
  auto& from = static_cast<const ListConnAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.ListConnAuth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_().empty()) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (!from._internal_eaptype().empty()) {
    _this->_internal_set_eaptype(from._internal_eaptype());
  }
  if (!from._internal_eapvendor().empty()) {
    _this->_internal_set_eapvendor(from._internal_eapvendor());
  }
  if (!from._internal_xauth().empty()) {
    _this->_internal_set_xauth(from._internal_xauth());
  }
  if (!from._internal_revocation().empty()) {
    _this->_internal_set_revocation(from._internal_revocation());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_ca_id().empty()) {
    _this->_internal_set_ca_id(from._internal_ca_id());
  }
  if (!from._internal_aaa_id().empty()) {
    _this->_internal_set_aaa_id(from._internal_aaa_id());
  }
  if (!from._internal_eap_id().empty()) {
    _this->_internal_set_eap_id(from._internal_eap_id());
  }
  if (!from._internal_xauth_id().empty()) {
    _this->_internal_set_xauth_id(from._internal_xauth_id());
  }
  if (from._internal_has_group()) {
    _this->_internal_mutable_group()->::opi_api::security::v1::Groups::MergeFrom(
        from._internal_group());
  }
  if (from._internal_has_cert_policy()) {
    _this->_internal_mutable_cert_policy()->::opi_api::security::v1::CertPolicy::MergeFrom(
        from._internal_cert_policy());
  }
  if (from._internal_has_certs()) {
    _this->_internal_mutable_certs()->::opi_api::security::v1::Certs::MergeFrom(
        from._internal_certs());
  }
  if (from._internal_has_cacerts()) {
    _this->_internal_mutable_cacerts()->::opi_api::security::v1::CaCerts::MergeFrom(
        from._internal_cacerts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConnAuth::CopyFrom(const ListConnAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.ListConnAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConnAuth::IsInitialized() const {
  return true;
}

void ListConnAuth::InternalSwap(ListConnAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class__, lhs_arena,
      &other->_impl_.class__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eaptype_, lhs_arena,
      &other->_impl_.eaptype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eapvendor_, lhs_arena,
      &other->_impl_.eapvendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xauth_, lhs_arena,
      &other->_impl_.xauth_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.revocation_, lhs_arena,
      &other->_impl_.revocation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ca_id_, lhs_arena,
      &other->_impl_.ca_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aaa_id_, lhs_arena,
      &other->_impl_.aaa_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eap_id_, lhs_arena,
      &other->_impl_.eap_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xauth_id_, lhs_arena,
      &other->_impl_.xauth_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConnAuth, _impl_.cacerts_)
      + sizeof(ListConnAuth::_impl_.cacerts_)
      - PROTOBUF_FIELD_OFFSET(ListConnAuth, _impl_.group_)>(
          reinterpret_cast<char*>(&_impl_.group_),
          reinterpret_cast<char*>(&other->_impl_.group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConnAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[30]);
}

// ===================================================================

class ListChild::_Internal {
 public:
  static const ::opi_api::security::v1::TrafficSelectors& local_ts(const ListChild* msg);
  static const ::opi_api::security::v1::TrafficSelectors& remote_ts(const ListChild* msg);
};

const ::opi_api::security::v1::TrafficSelectors&
ListChild::_Internal::local_ts(const ListChild* msg) {
  return *msg->_impl_.local_ts_;
}
const ::opi_api::security::v1::TrafficSelectors&
ListChild::_Internal::remote_ts(const ListChild* msg) {
  return *msg->_impl_.remote_ts_;
}
ListChild::ListChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.ListChild)
}
ListChild::ListChild(const ListChild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListChild* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.dpd_action_){}
    , decltype(_impl_.close_action_){}
    , decltype(_impl_.interface_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.local_ts_){nullptr}
    , decltype(_impl_.remote_ts_){nullptr}
    , decltype(_impl_.rekey_time_){}
    , decltype(_impl_.rekey_bytes_){}
    , decltype(_impl_.rekey_packets_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dpd_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dpd_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dpd_action().empty()) {
    _this->_impl_.dpd_action_.Set(from._internal_dpd_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.close_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.close_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_close_action().empty()) {
    _this->_impl_.close_action_.Set(from._internal_close_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface().empty()) {
    _this->_impl_.interface_.Set(from._internal_interface(), 
      _this->GetArenaForAllocation());
  }
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priority().empty()) {
    _this->_impl_.priority_.Set(from._internal_priority(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_local_ts()) {
    _this->_impl_.local_ts_ = new ::opi_api::security::v1::TrafficSelectors(*from._impl_.local_ts_);
  }
  if (from._internal_has_remote_ts()) {
    _this->_impl_.remote_ts_ = new ::opi_api::security::v1::TrafficSelectors(*from._impl_.remote_ts_);
  }
  ::memcpy(&_impl_.rekey_time_, &from._impl_.rekey_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rekey_packets_) -
    reinterpret_cast<char*>(&_impl_.rekey_time_)) + sizeof(_impl_.rekey_packets_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.ListChild)
}

inline void ListChild::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.dpd_action_){}
    , decltype(_impl_.close_action_){}
    , decltype(_impl_.interface_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.local_ts_){nullptr}
    , decltype(_impl_.remote_ts_){nullptr}
    , decltype(_impl_.rekey_time_){0u}
    , decltype(_impl_.rekey_bytes_){0u}
    , decltype(_impl_.rekey_packets_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dpd_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dpd_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.close_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.close_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListChild::~ListChild() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.ListChild)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListChild::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.mode_.Destroy();
  _impl_.label_.Destroy();
  _impl_.dpd_action_.Destroy();
  _impl_.close_action_.Destroy();
  _impl_.interface_.Destroy();
  _impl_.priority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.local_ts_;
  if (this != internal_default_instance()) delete _impl_.remote_ts_;
}

void ListChild::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListChild::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.ListChild)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mode_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.dpd_action_.ClearToEmpty();
  _impl_.close_action_.ClearToEmpty();
  _impl_.interface_.ClearToEmpty();
  _impl_.priority_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.local_ts_ != nullptr) {
    delete _impl_.local_ts_;
  }
  _impl_.local_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remote_ts_ != nullptr) {
    delete _impl_.remote_ts_;
  }
  _impl_.remote_ts_ = nullptr;
  ::memset(&_impl_.rekey_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rekey_packets_) -
      reinterpret_cast<char*>(&_impl_.rekey_time_)) + sizeof(_impl_.rekey_packets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChild::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.name"));
        } else
          goto handle_unusual;
        continue;
      // string mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.mode"));
        } else
          goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.label"));
        } else
          goto handle_unusual;
        continue;
      // uint32 rekey_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rekey_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rekey_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rekey_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rekey_packets = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rekey_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dpd_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dpd_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.dpd_action"));
        } else
          goto handle_unusual;
        continue;
      // string close_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_close_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.close_action"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.TrafficSelectors local_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.TrafficSelectors remote_ts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string interface = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_interface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.interface"));
        } else
          goto handle_unusual;
        continue;
      // string priority = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_priority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListChild.priority"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListChild::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.ListChild)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string mode = 2;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.mode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mode(), target);
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // uint32 rekey_time = 4;
  if (this->_internal_rekey_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rekey_time(), target);
  }

  // uint32 rekey_bytes = 5;
  if (this->_internal_rekey_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rekey_bytes(), target);
  }

  // uint32 rekey_packets = 6;
  if (this->_internal_rekey_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rekey_packets(), target);
  }

  // string dpd_action = 7;
  if (!this->_internal_dpd_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dpd_action().data(), static_cast<int>(this->_internal_dpd_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.dpd_action");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dpd_action(), target);
  }

  // string close_action = 8;
  if (!this->_internal_close_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close_action().data(), static_cast<int>(this->_internal_close_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.close_action");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_close_action(), target);
  }

  // .opi_api.security.v1.TrafficSelectors local_ts = 9;
  if (this->_internal_has_local_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::local_ts(this),
        _Internal::local_ts(this).GetCachedSize(), target, stream);
  }

  // .opi_api.security.v1.TrafficSelectors remote_ts = 10;
  if (this->_internal_has_remote_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::remote_ts(this),
        _Internal::remote_ts(this).GetCachedSize(), target, stream);
  }

  // string interface = 11;
  if (!this->_internal_interface().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface().data(), static_cast<int>(this->_internal_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.interface");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_interface(), target);
  }

  // string priority = 12;
  if (!this->_internal_priority().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_priority().data(), static_cast<int>(this->_internal_priority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListChild.priority");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.ListChild)
  return target;
}

size_t ListChild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.ListChild)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mode = 2;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string dpd_action = 7;
  if (!this->_internal_dpd_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dpd_action());
  }

  // string close_action = 8;
  if (!this->_internal_close_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close_action());
  }

  // string interface = 11;
  if (!this->_internal_interface().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface());
  }

  // string priority = 12;
  if (!this->_internal_priority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_priority());
  }

  // .opi_api.security.v1.TrafficSelectors local_ts = 9;
  if (this->_internal_has_local_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_ts_);
  }

  // .opi_api.security.v1.TrafficSelectors remote_ts = 10;
  if (this->_internal_has_remote_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_ts_);
  }

  // uint32 rekey_time = 4;
  if (this->_internal_rekey_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rekey_time());
  }

  // uint32 rekey_bytes = 5;
  if (this->_internal_rekey_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rekey_bytes());
  }

  // uint32 rekey_packets = 6;
  if (this->_internal_rekey_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rekey_packets());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChild::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListChild::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChild::GetClassData() const { return &_class_data_; }


void ListChild::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListChild*>(&to_msg);
  auto& from = static_cast<const ListChild&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.ListChild)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_dpd_action().empty()) {
    _this->_internal_set_dpd_action(from._internal_dpd_action());
  }
  if (!from._internal_close_action().empty()) {
    _this->_internal_set_close_action(from._internal_close_action());
  }
  if (!from._internal_interface().empty()) {
    _this->_internal_set_interface(from._internal_interface());
  }
  if (!from._internal_priority().empty()) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_has_local_ts()) {
    _this->_internal_mutable_local_ts()->::opi_api::security::v1::TrafficSelectors::MergeFrom(
        from._internal_local_ts());
  }
  if (from._internal_has_remote_ts()) {
    _this->_internal_mutable_remote_ts()->::opi_api::security::v1::TrafficSelectors::MergeFrom(
        from._internal_remote_ts());
  }
  if (from._internal_rekey_time() != 0) {
    _this->_internal_set_rekey_time(from._internal_rekey_time());
  }
  if (from._internal_rekey_bytes() != 0) {
    _this->_internal_set_rekey_bytes(from._internal_rekey_bytes());
  }
  if (from._internal_rekey_packets() != 0) {
    _this->_internal_set_rekey_packets(from._internal_rekey_packets());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListChild::CopyFrom(const ListChild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.ListChild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChild::IsInitialized() const {
  return true;
}

void ListChild::InternalSwap(ListChild* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dpd_action_, lhs_arena,
      &other->_impl_.dpd_action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.close_action_, lhs_arena,
      &other->_impl_.close_action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_, lhs_arena,
      &other->_impl_.interface_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.priority_, lhs_arena,
      &other->_impl_.priority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListChild, _impl_.rekey_packets_)
      + sizeof(ListChild::_impl_.rekey_packets_)
      - PROTOBUF_FIELD_OFFSET(ListChild, _impl_.local_ts_)>(
          reinterpret_cast<char*>(&_impl_.local_ts_),
          reinterpret_cast<char*>(&other->_impl_.local_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChild::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[31]);
}

// ===================================================================

class ListConnResp::_Internal {
 public:
};

ListConnResp::ListConnResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.ListConnResp)
}
ListConnResp::ListConnResp(const ListConnResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConnResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_addrs_){from._impl_.local_addrs_}
    , decltype(_impl_.remote_addrs_){from._impl_.remote_addrs_}
    , decltype(_impl_.local_auth_){from._impl_.local_auth_}
    , decltype(_impl_.remote_auth_){from._impl_.remote_auth_}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.unique_){}
    , decltype(_impl_.ppk_){}
    , decltype(_impl_.ppk_required_){}
    , decltype(_impl_.reauth_time_){}
    , decltype(_impl_.rekey_time_){}
    , decltype(_impl_.dpd_delay_){}
    , decltype(_impl_.dpd_timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unique_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unique_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique().empty()) {
    _this->_impl_.unique_.Set(from._internal_unique(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ppk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ppk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ppk().empty()) {
    _this->_impl_.ppk_.Set(from._internal_ppk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ppk_required_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ppk_required_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ppk_required().empty()) {
    _this->_impl_.ppk_required_.Set(from._internal_ppk_required(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reauth_time_, &from._impl_.reauth_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dpd_timeout_) -
    reinterpret_cast<char*>(&_impl_.reauth_time_)) + sizeof(_impl_.dpd_timeout_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.ListConnResp)
}

inline void ListConnResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_addrs_){arena}
    , decltype(_impl_.remote_addrs_){arena}
    , decltype(_impl_.local_auth_){arena}
    , decltype(_impl_.remote_auth_){arena}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.unique_){}
    , decltype(_impl_.ppk_){}
    , decltype(_impl_.ppk_required_){}
    , decltype(_impl_.reauth_time_){0u}
    , decltype(_impl_.rekey_time_){0u}
    , decltype(_impl_.dpd_delay_){0u}
    , decltype(_impl_.dpd_timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unique_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unique_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ppk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ppk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ppk_required_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ppk_required_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListConnResp::~ListConnResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.ListConnResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConnResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_addrs_.~RepeatedPtrField();
  _impl_.remote_addrs_.~RepeatedPtrField();
  _impl_.local_auth_.~RepeatedPtrField();
  _impl_.remote_auth_.~RepeatedPtrField();
  _impl_.children_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.unique_.Destroy();
  _impl_.ppk_.Destroy();
  _impl_.ppk_required_.Destroy();
}

void ListConnResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConnResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.ListConnResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_addrs_.Clear();
  _impl_.remote_addrs_.Clear();
  _impl_.local_auth_.Clear();
  _impl_.remote_auth_.Clear();
  _impl_.children_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.unique_.ClearToEmpty();
  _impl_.ppk_.ClearToEmpty();
  _impl_.ppk_required_.ClearToEmpty();
  ::memset(&_impl_.reauth_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dpd_timeout_) -
      reinterpret_cast<char*>(&_impl_.reauth_time_)) + sizeof(_impl_.dpd_timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConnResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnResp.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.Addrs local_addrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.Addrs remote_addrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnResp.version"));
        } else
          goto handle_unusual;
        continue;
      // uint32 reauth_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reauth_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rekey_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rekey_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string unique = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_unique();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnResp.unique"));
        } else
          goto handle_unusual;
        continue;
      // uint32 dpd_delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dpd_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dpd_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.dpd_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ppk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ppk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnResp.ppk"));
        } else
          goto handle_unusual;
        continue;
      // string ppk_required = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_ppk_required();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListConnResp.ppk_required"));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.ListConnAuth local_auth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_auth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.ListConnAuth remote_auth = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_auth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.v1.ListChild children = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConnResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.ListConnResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnResp.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .opi_api.security.v1.Addrs local_addrs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opi_api.security.v1.Addrs remote_addrs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnResp.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // uint32 reauth_time = 5;
  if (this->_internal_reauth_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reauth_time(), target);
  }

  // uint32 rekey_time = 6;
  if (this->_internal_rekey_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rekey_time(), target);
  }

  // string unique = 7;
  if (!this->_internal_unique().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unique().data(), static_cast<int>(this->_internal_unique().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnResp.unique");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_unique(), target);
  }

  // uint32 dpd_delay = 8;
  if (this->_internal_dpd_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dpd_delay(), target);
  }

  // uint32 dpd_timeout = 9;
  if (this->_internal_dpd_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_dpd_timeout(), target);
  }

  // string ppk = 10;
  if (!this->_internal_ppk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ppk().data(), static_cast<int>(this->_internal_ppk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnResp.ppk");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ppk(), target);
  }

  // string ppk_required = 11;
  if (!this->_internal_ppk_required().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ppk_required().data(), static_cast<int>(this->_internal_ppk_required().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListConnResp.ppk_required");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ppk_required(), target);
  }

  // repeated .opi_api.security.v1.ListConnAuth local_auth = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_auth_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_auth(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opi_api.security.v1.ListConnAuth remote_auth = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_auth_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_auth(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opi_api.security.v1.ListChild children = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.ListConnResp)
  return target;
}

size_t ListConnResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.ListConnResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.Addrs local_addrs = 2;
  total_size += 1UL * this->_internal_local_addrs_size();
  for (const auto& msg : this->_impl_.local_addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.security.v1.Addrs remote_addrs = 3;
  total_size += 1UL * this->_internal_remote_addrs_size();
  for (const auto& msg : this->_impl_.remote_addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.security.v1.ListConnAuth local_auth = 12;
  total_size += 1UL * this->_internal_local_auth_size();
  for (const auto& msg : this->_impl_.local_auth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.security.v1.ListConnAuth remote_auth = 13;
  total_size += 1UL * this->_internal_remote_auth_size();
  for (const auto& msg : this->_impl_.remote_auth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.security.v1.ListChild children = 14;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string unique = 7;
  if (!this->_internal_unique().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique());
  }

  // string ppk = 10;
  if (!this->_internal_ppk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ppk());
  }

  // string ppk_required = 11;
  if (!this->_internal_ppk_required().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ppk_required());
  }

  // uint32 reauth_time = 5;
  if (this->_internal_reauth_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reauth_time());
  }

  // uint32 rekey_time = 6;
  if (this->_internal_rekey_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rekey_time());
  }

  // uint32 dpd_delay = 8;
  if (this->_internal_dpd_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dpd_delay());
  }

  // uint32 dpd_timeout = 9;
  if (this->_internal_dpd_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dpd_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConnResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConnResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConnResp::GetClassData() const { return &_class_data_; }


void ListConnResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConnResp*>(&to_msg);
  auto& from = static_cast<const ListConnResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.ListConnResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_addrs_.MergeFrom(from._impl_.local_addrs_);
  _this->_impl_.remote_addrs_.MergeFrom(from._impl_.remote_addrs_);
  _this->_impl_.local_auth_.MergeFrom(from._impl_.local_auth_);
  _this->_impl_.remote_auth_.MergeFrom(from._impl_.remote_auth_);
  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_unique().empty()) {
    _this->_internal_set_unique(from._internal_unique());
  }
  if (!from._internal_ppk().empty()) {
    _this->_internal_set_ppk(from._internal_ppk());
  }
  if (!from._internal_ppk_required().empty()) {
    _this->_internal_set_ppk_required(from._internal_ppk_required());
  }
  if (from._internal_reauth_time() != 0) {
    _this->_internal_set_reauth_time(from._internal_reauth_time());
  }
  if (from._internal_rekey_time() != 0) {
    _this->_internal_set_rekey_time(from._internal_rekey_time());
  }
  if (from._internal_dpd_delay() != 0) {
    _this->_internal_set_dpd_delay(from._internal_dpd_delay());
  }
  if (from._internal_dpd_timeout() != 0) {
    _this->_internal_set_dpd_timeout(from._internal_dpd_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConnResp::CopyFrom(const ListConnResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.ListConnResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConnResp::IsInitialized() const {
  return true;
}

void ListConnResp::InternalSwap(ListConnResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.local_addrs_.InternalSwap(&other->_impl_.local_addrs_);
  _impl_.remote_addrs_.InternalSwap(&other->_impl_.remote_addrs_);
  _impl_.local_auth_.InternalSwap(&other->_impl_.local_auth_);
  _impl_.remote_auth_.InternalSwap(&other->_impl_.remote_auth_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unique_, lhs_arena,
      &other->_impl_.unique_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ppk_, lhs_arena,
      &other->_impl_.ppk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ppk_required_, lhs_arena,
      &other->_impl_.ppk_required_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConnResp, _impl_.dpd_timeout_)
      + sizeof(ListConnResp::_impl_.dpd_timeout_)
      - PROTOBUF_FIELD_OFFSET(ListConnResp, _impl_.reauth_time_)>(
          reinterpret_cast<char*>(&_impl_.reauth_time_),
          reinterpret_cast<char*>(&other->_impl_.reauth_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConnResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[32]);
}

// ===================================================================

class IPsecListConnsResp::_Internal {
 public:
};

IPsecListConnsResp::IPsecListConnsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecListConnsResp)
}
IPsecListConnsResp::IPsecListConnsResp(const IPsecListConnsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecListConnsResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_){from._impl_.connection_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecListConnsResp)
}

inline void IPsecListConnsResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IPsecListConnsResp::~IPsecListConnsResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecListConnsResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecListConnsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_.~RepeatedPtrField();
}

void IPsecListConnsResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecListConnsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecListConnsResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecListConnsResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.security.v1.ListConnResp connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecListConnsResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecListConnsResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.ListConnResp connection = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connection_size()); i < n; i++) {
    const auto& repfield = this->_internal_connection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecListConnsResp)
  return target;
}

size_t IPsecListConnsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecListConnsResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.ListConnResp connection = 1;
  total_size += 1UL * this->_internal_connection_size();
  for (const auto& msg : this->_impl_.connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecListConnsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecListConnsResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecListConnsResp::GetClassData() const { return &_class_data_; }


void IPsecListConnsResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecListConnsResp*>(&to_msg);
  auto& from = static_cast<const IPsecListConnsResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecListConnsResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connection_.MergeFrom(from._impl_.connection_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecListConnsResp::CopyFrom(const IPsecListConnsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecListConnsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecListConnsResp::IsInitialized() const {
  return true;
}

void IPsecListConnsResp::InternalSwap(IPsecListConnsResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connection_.InternalSwap(&other->_impl_.connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecListConnsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[33]);
}

// ===================================================================

class IPsecListCertsReq::_Internal {
 public:
};

IPsecListCertsReq::IPsecListCertsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecListCertsReq)
}
IPsecListCertsReq::IPsecListCertsReq(const IPsecListCertsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecListCertsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag().empty()) {
    _this->_impl_.flag_.Set(from._internal_flag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecListCertsReq)
}

inline void IPsecListCertsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecListCertsReq::~IPsecListCertsReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecListCertsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecListCertsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.flag_.Destroy();
  _impl_.subject_.Destroy();
}

void IPsecListCertsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecListCertsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecListCertsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.flag_.ClearToEmpty();
  _impl_.subject_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecListCertsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListCertsReq.type"));
        } else
          goto handle_unusual;
        continue;
      // string flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListCertsReq.flag"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecListCertsReq.subject"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecListCertsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecListCertsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListCertsReq.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string flag = 2;
  if (!this->_internal_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListCertsReq.flag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flag(), target);
  }

  // string subject = 3;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecListCertsReq.subject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subject(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecListCertsReq)
  return target;
}

size_t IPsecListCertsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecListCertsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string flag = 2;
  if (!this->_internal_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // string subject = 3;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecListCertsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecListCertsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecListCertsReq::GetClassData() const { return &_class_data_; }


void IPsecListCertsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecListCertsReq*>(&to_msg);
  auto& from = static_cast<const IPsecListCertsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecListCertsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_flag().empty()) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecListCertsReq::CopyFrom(const IPsecListCertsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecListCertsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecListCertsReq::IsInitialized() const {
  return true;
}

void IPsecListCertsReq::InternalSwap(IPsecListCertsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_, lhs_arena,
      &other->_impl_.flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecListCertsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[34]);
}

// ===================================================================

class ListCert::_Internal {
 public:
};

ListCert::ListCert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.ListCert)
}
ListCert::ListCert(const ListCert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hasprivkey_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.notbefore_){}
    , decltype(_impl_.notafter_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hasprivkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hasprivkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hasprivkey().empty()) {
    _this->_impl_.hasprivkey_.Set(from._internal_hasprivkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notbefore_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notbefore_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notbefore().empty()) {
    _this->_impl_.notbefore_.Set(from._internal_notbefore(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notafter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notafter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notafter().empty()) {
    _this->_impl_.notafter_.Set(from._internal_notafter(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.ListCert)
}

inline void ListCert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hasprivkey_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.notbefore_){}
    , decltype(_impl_.notafter_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.flag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hasprivkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hasprivkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notbefore_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notbefore_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notafter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notafter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListCert::~ListCert() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.ListCert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hasprivkey_.Destroy();
  _impl_.data_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.notbefore_.Destroy();
  _impl_.notafter_.Destroy();
}

void ListCert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCert::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.ListCert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hasprivkey_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.subject_.ClearToEmpty();
  _impl_.notbefore_.ClearToEmpty();
  _impl_.notafter_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.security.v1.CertificateType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::security::v1::CertificateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.v1.X509CertificateFlag flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::opi_api::security::v1::X509CertificateFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // string hasprivkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hasprivkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListCert.hasprivkey"));
        } else
          goto handle_unusual;
        continue;
      // string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListCert.data"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListCert.subject"));
        } else
          goto handle_unusual;
        continue;
      // string notbefore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_notbefore();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListCert.notbefore"));
        } else
          goto handle_unusual;
        continue;
      // string notafter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_notafter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.ListCert.notafter"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.ListCert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.security.v1.CertificateType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .opi_api.security.v1.X509CertificateFlag flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_flag(), target);
  }

  // string hasprivkey = 3;
  if (!this->_internal_hasprivkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hasprivkey().data(), static_cast<int>(this->_internal_hasprivkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListCert.hasprivkey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hasprivkey(), target);
  }

  // string data = 4;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListCert.data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data(), target);
  }

  // string subject = 5;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListCert.subject");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subject(), target);
  }

  // string notbefore = 6;
  if (!this->_internal_notbefore().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notbefore().data(), static_cast<int>(this->_internal_notbefore().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListCert.notbefore");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_notbefore(), target);
  }

  // string notafter = 7;
  if (!this->_internal_notafter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notafter().data(), static_cast<int>(this->_internal_notafter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.ListCert.notafter");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_notafter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.ListCert)
  return target;
}

size_t ListCert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.ListCert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hasprivkey = 3;
  if (!this->_internal_hasprivkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hasprivkey());
  }

  // string data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string subject = 5;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string notbefore = 6;
  if (!this->_internal_notbefore().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notbefore());
  }

  // string notafter = 7;
  if (!this->_internal_notafter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notafter());
  }

  // .opi_api.security.v1.CertificateType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .opi_api.security.v1.X509CertificateFlag flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCert::GetClassData() const { return &_class_data_; }


void ListCert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCert*>(&to_msg);
  auto& from = static_cast<const ListCert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.ListCert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hasprivkey().empty()) {
    _this->_internal_set_hasprivkey(from._internal_hasprivkey());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_notbefore().empty()) {
    _this->_internal_set_notbefore(from._internal_notbefore());
  }
  if (!from._internal_notafter().empty()) {
    _this->_internal_set_notafter(from._internal_notafter());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCert::CopyFrom(const ListCert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.ListCert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCert::IsInitialized() const {
  return true;
}

void ListCert::InternalSwap(ListCert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hasprivkey_, lhs_arena,
      &other->_impl_.hasprivkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notbefore_, lhs_arena,
      &other->_impl_.notbefore_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notafter_, lhs_arena,
      &other->_impl_.notafter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCert, _impl_.flag_)
      + sizeof(ListCert::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(ListCert, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[35]);
}

// ===================================================================

class IPsecListCertsResp::_Internal {
 public:
};

IPsecListCertsResp::IPsecListCertsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecListCertsResp)
}
IPsecListCertsResp::IPsecListCertsResp(const IPsecListCertsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecListCertsResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.certs_){from._impl_.certs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecListCertsResp)
}

inline void IPsecListCertsResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.certs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IPsecListCertsResp::~IPsecListCertsResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecListCertsResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecListCertsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.certs_.~RepeatedPtrField();
}

void IPsecListCertsResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecListCertsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecListCertsResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.certs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecListCertsResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.security.v1.ListCert certs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_certs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecListCertsResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecListCertsResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.ListCert certs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_certs_size()); i < n; i++) {
    const auto& repfield = this->_internal_certs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecListCertsResp)
  return target;
}

size_t IPsecListCertsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecListCertsResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.v1.ListCert certs = 1;
  total_size += 1UL * this->_internal_certs_size();
  for (const auto& msg : this->_impl_.certs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecListCertsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecListCertsResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecListCertsResp::GetClassData() const { return &_class_data_; }


void IPsecListCertsResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecListCertsResp*>(&to_msg);
  auto& from = static_cast<const IPsecListCertsResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecListCertsResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.certs_.MergeFrom(from._impl_.certs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecListCertsResp::CopyFrom(const IPsecListCertsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecListCertsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecListCertsResp::IsInitialized() const {
  return true;
}

void IPsecListCertsResp::InternalSwap(IPsecListCertsResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.certs_.InternalSwap(&other->_impl_.certs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecListCertsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[36]);
}

// ===================================================================

class IPsecLoadConnReq::_Internal {
 public:
  static const ::opi_api::security::v1::Connection& connection(const IPsecLoadConnReq* msg);
};

const ::opi_api::security::v1::Connection&
IPsecLoadConnReq::_Internal::connection(const IPsecLoadConnReq* msg) {
  return *msg->_impl_.connection_;
}
IPsecLoadConnReq::IPsecLoadConnReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecLoadConnReq)
}
IPsecLoadConnReq::IPsecLoadConnReq(const IPsecLoadConnReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecLoadConnReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::opi_api::security::v1::Connection(*from._impl_.connection_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecLoadConnReq)
}

inline void IPsecLoadConnReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IPsecLoadConnReq::~IPsecLoadConnReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecLoadConnReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecLoadConnReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void IPsecLoadConnReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecLoadConnReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecLoadConnReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connection_ != nullptr) {
    delete _impl_.connection_;
  }
  _impl_.connection_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecLoadConnReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.security.v1.Connection connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecLoadConnReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecLoadConnReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.security.v1.Connection connection = 1;
  if (this->_internal_has_connection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection(this),
        _Internal::connection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecLoadConnReq)
  return target;
}

size_t IPsecLoadConnReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecLoadConnReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.security.v1.Connection connection = 1;
  if (this->_internal_has_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecLoadConnReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecLoadConnReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecLoadConnReq::GetClassData() const { return &_class_data_; }


void IPsecLoadConnReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecLoadConnReq*>(&to_msg);
  auto& from = static_cast<const IPsecLoadConnReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecLoadConnReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection()) {
    _this->_internal_mutable_connection()->::opi_api::security::v1::Connection::MergeFrom(
        from._internal_connection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecLoadConnReq::CopyFrom(const IPsecLoadConnReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecLoadConnReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecLoadConnReq::IsInitialized() const {
  return true;
}

void IPsecLoadConnReq::InternalSwap(IPsecLoadConnReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.connection_, other->_impl_.connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecLoadConnReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[37]);
}

// ===================================================================

class IPsecLoadConnResp::_Internal {
 public:
};

IPsecLoadConnResp::IPsecLoadConnResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecLoadConnResp)
}
IPsecLoadConnResp::IPsecLoadConnResp(const IPsecLoadConnResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecLoadConnResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_success().empty()) {
    _this->_impl_.success_.Set(from._internal_success(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecLoadConnResp)
}

inline void IPsecLoadConnResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecLoadConnResp::~IPsecLoadConnResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecLoadConnResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecLoadConnResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.Destroy();
}

void IPsecLoadConnResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecLoadConnResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecLoadConnResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecLoadConnResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_success();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecLoadConnResp.success"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecLoadConnResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecLoadConnResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecLoadConnResp.success");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecLoadConnResp)
  return target;
}

size_t IPsecLoadConnResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecLoadConnResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecLoadConnResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecLoadConnResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecLoadConnResp::GetClassData() const { return &_class_data_; }


void IPsecLoadConnResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecLoadConnResp*>(&to_msg);
  auto& from = static_cast<const IPsecLoadConnResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecLoadConnResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_success().empty()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecLoadConnResp::CopyFrom(const IPsecLoadConnResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecLoadConnResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecLoadConnResp::IsInitialized() const {
  return true;
}

void IPsecLoadConnResp::InternalSwap(IPsecLoadConnResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.success_, lhs_arena,
      &other->_impl_.success_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecLoadConnResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[38]);
}

// ===================================================================

class IPsecUnloadConnReq::_Internal {
 public:
};

IPsecUnloadConnReq::IPsecUnloadConnReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecUnloadConnReq)
}
IPsecUnloadConnReq::IPsecUnloadConnReq(const IPsecUnloadConnReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecUnloadConnReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecUnloadConnReq)
}

inline void IPsecUnloadConnReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecUnloadConnReq::~IPsecUnloadConnReq() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecUnloadConnReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecUnloadConnReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void IPsecUnloadConnReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecUnloadConnReq::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecUnloadConnReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecUnloadConnReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecUnloadConnReq.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecUnloadConnReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecUnloadConnReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecUnloadConnReq.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecUnloadConnReq)
  return target;
}

size_t IPsecUnloadConnReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecUnloadConnReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecUnloadConnReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecUnloadConnReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecUnloadConnReq::GetClassData() const { return &_class_data_; }


void IPsecUnloadConnReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecUnloadConnReq*>(&to_msg);
  auto& from = static_cast<const IPsecUnloadConnReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecUnloadConnReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecUnloadConnReq::CopyFrom(const IPsecUnloadConnReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecUnloadConnReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecUnloadConnReq::IsInitialized() const {
  return true;
}

void IPsecUnloadConnReq::InternalSwap(IPsecUnloadConnReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecUnloadConnReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[39]);
}

// ===================================================================

class IPsecUnloadConnResp::_Internal {
 public:
};

IPsecUnloadConnResp::IPsecUnloadConnResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.security.v1.IPsecUnloadConnResp)
}
IPsecUnloadConnResp::IPsecUnloadConnResp(const IPsecUnloadConnResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPsecUnloadConnResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_success().empty()) {
    _this->_impl_.success_.Set(from._internal_success(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.security.v1.IPsecUnloadConnResp)
}

inline void IPsecUnloadConnResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPsecUnloadConnResp::~IPsecUnloadConnResp() {
  // @@protoc_insertion_point(destructor:opi_api.security.v1.IPsecUnloadConnResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPsecUnloadConnResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.Destroy();
}

void IPsecUnloadConnResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPsecUnloadConnResp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.v1.IPsecUnloadConnResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPsecUnloadConnResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_success();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.security.v1.IPsecUnloadConnResp.success"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPsecUnloadConnResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.v1.IPsecUnloadConnResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.security.v1.IPsecUnloadConnResp.success");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.v1.IPsecUnloadConnResp)
  return target;
}

size_t IPsecUnloadConnResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.v1.IPsecUnloadConnResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string success = 1;
  if (!this->_internal_success().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPsecUnloadConnResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPsecUnloadConnResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPsecUnloadConnResp::GetClassData() const { return &_class_data_; }


void IPsecUnloadConnResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPsecUnloadConnResp*>(&to_msg);
  auto& from = static_cast<const IPsecUnloadConnResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.v1.IPsecUnloadConnResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_success().empty()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPsecUnloadConnResp::CopyFrom(const IPsecUnloadConnResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.v1.IPsecUnloadConnResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPsecUnloadConnResp::IsInitialized() const {
  return true;
}

void IPsecUnloadConnResp::InternalSwap(IPsecUnloadConnResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.success_, lhs_arena,
      &other->_impl_.success_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPsecUnloadConnResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ipsec_2eproto_getter, &descriptor_table_ipsec_2eproto_once,
      file_level_metadata_ipsec_2eproto[40]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace security
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Proposals*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Proposals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Proposals >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Vips*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Vips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Vips >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Pools*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Pools >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Pools >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Certs*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Certs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Certs >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::PubKeys*
Arena::CreateMaybeMessage< ::opi_api::security::v1::PubKeys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::PubKeys >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Groups*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Groups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Groups >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::CertPolicy*
Arena::CreateMaybeMessage< ::opi_api::security::v1::CertPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::CertPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::CaCerts*
Arena::CreateMaybeMessage< ::opi_api::security::v1::CaCerts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::CaCerts >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::LocalAuth*
Arena::CreateMaybeMessage< ::opi_api::security::v1::LocalAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::LocalAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::RemoteAuth*
Arena::CreateMaybeMessage< ::opi_api::security::v1::RemoteAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::RemoteAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::TrafficSelectors_TrafficSelector*
Arena::CreateMaybeMessage< ::opi_api::security::v1::TrafficSelectors_TrafficSelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::TrafficSelectors_TrafficSelector >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::TrafficSelectors*
Arena::CreateMaybeMessage< ::opi_api::security::v1::TrafficSelectors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::TrafficSelectors >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Addrs*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Addrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Addrs >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Child*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Child >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Child >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::Connection*
Arena::CreateMaybeMessage< ::opi_api::security::v1::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecVersionReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecVersionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecVersionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecVersionResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecVersionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecVersionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecStatsReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecStatsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecStatsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecStatsResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecStatsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecStatsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecInitiateReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecInitiateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecInitiateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecInitiateResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecInitiateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecInitiateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecTerminateReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecTerminateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecTerminateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecTerminateResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecTerminateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecTerminateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecRekeyReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecRekeyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecRekeyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecRekeyResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecRekeyResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecRekeyResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecListSasReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecListSasReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecListSasReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::ListChildSa*
Arena::CreateMaybeMessage< ::opi_api::security::v1::ListChildSa >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::ListChildSa >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::ListIkeSa*
Arena::CreateMaybeMessage< ::opi_api::security::v1::ListIkeSa >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::ListIkeSa >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecListSasResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecListSasResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecListSasResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecListConnsReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecListConnsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecListConnsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::ListConnAuth*
Arena::CreateMaybeMessage< ::opi_api::security::v1::ListConnAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::ListConnAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::ListChild*
Arena::CreateMaybeMessage< ::opi_api::security::v1::ListChild >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::ListChild >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::ListConnResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::ListConnResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::ListConnResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecListConnsResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecListConnsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecListConnsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecListCertsReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecListCertsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecListCertsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::ListCert*
Arena::CreateMaybeMessage< ::opi_api::security::v1::ListCert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::ListCert >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecListCertsResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecListCertsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecListCertsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecLoadConnReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecLoadConnReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecLoadConnReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecLoadConnResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecLoadConnResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecLoadConnResp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecUnloadConnReq*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecUnloadConnReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecUnloadConnReq >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::v1::IPsecUnloadConnResp*
Arena::CreateMaybeMessage< ::opi_api::security::v1::IPsecUnloadConnResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::v1::IPsecUnloadConnResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
