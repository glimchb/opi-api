// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_interfaces.proto

#include "openconfig_interfaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.mtu_)*/0u
  , /*decltype(_impl_.loopback_mode_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_CONSTEXPR Counters::Counters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rx_octets_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_unicast_pkts_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_broadcast_pkts_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_multicast_pkts_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_discards_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_errors_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_unknown_protos_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_fcs_errors_)*/uint64_t{0u}
  , /*decltype(_impl_.out_octets_)*/uint64_t{0u}
  , /*decltype(_impl_.out_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.out_unicast_pkts_)*/uint64_t{0u}
  , /*decltype(_impl_.out_broadcast_pkts_)*/uint64_t{0u}
  , /*decltype(_impl_.out_multicast_pkts_)*/uint64_t{0u}
  , /*decltype(_impl_.out_discards_)*/uint64_t{0u}
  , /*decltype(_impl_.out_errors_)*/uint64_t{0u}
  , /*decltype(_impl_.carrier_transitions_)*/uint64_t{0u}
  , /*decltype(_impl_.last_clear_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CountersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountersDefaultTypeInternal() {}
  union {
    Counters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountersDefaultTypeInternal _Counters_default_instance_;
PROTOBUF_CONSTEXPR State::State(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.counters_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.mtu_)*/0u
  , /*decltype(_impl_.ifindex_)*/0u
  , /*decltype(_impl_.admin_state_)*/0
  , /*decltype(_impl_.loopback_mode_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.logical_)*/false
  , /*decltype(_impl_.management_)*/false
  , /*decltype(_impl_.oper_state_)*/0
  , /*decltype(_impl_.last_change_)*/uint64_t{0u}
  , /*decltype(_impl_.cpu_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateDefaultTypeInternal _State_default_instance_;
PROTOBUF_CONSTEXPR NetInterface_HoldTime_HoldConfig::NetInterface_HoldTime_HoldConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.up_)*/0u
  , /*decltype(_impl_.down_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterface_HoldTime_HoldConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterface_HoldTime_HoldConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterface_HoldTime_HoldConfigDefaultTypeInternal() {}
  union {
    NetInterface_HoldTime_HoldConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterface_HoldTime_HoldConfigDefaultTypeInternal _NetInterface_HoldTime_HoldConfig_default_instance_;
PROTOBUF_CONSTEXPR NetInterface_HoldTime_HoldState::NetInterface_HoldTime_HoldState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.up_)*/0u
  , /*decltype(_impl_.down_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterface_HoldTime_HoldStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterface_HoldTime_HoldStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterface_HoldTime_HoldStateDefaultTypeInternal() {}
  union {
    NetInterface_HoldTime_HoldState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterface_HoldTime_HoldStateDefaultTypeInternal _NetInterface_HoldTime_HoldState_default_instance_;
PROTOBUF_CONSTEXPR NetInterface_HoldTime::NetInterface_HoldTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hold_config_)*/nullptr
  , /*decltype(_impl_.hold_state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterface_HoldTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterface_HoldTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterface_HoldTimeDefaultTypeInternal() {}
  union {
    NetInterface_HoldTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterface_HoldTimeDefaultTypeInternal _NetInterface_HoldTime_default_instance_;
PROTOBUF_CONSTEXPR NetInterface_Subinterfaces_Subinterface_SubifConfig::NetInterface_Subinterfaces_Subinterface_SubifConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal() {}
  union {
    NetInterface_Subinterfaces_Subinterface_SubifConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal _NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_;
PROTOBUF_CONSTEXPR NetInterface_Subinterfaces_Subinterface::NetInterface_Subinterfaces_Subinterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subif_config_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal() {}
  union {
    NetInterface_Subinterfaces_Subinterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal _NetInterface_Subinterfaces_Subinterface_default_instance_;
PROTOBUF_CONSTEXPR NetInterface_Subinterfaces::NetInterface_Subinterfaces(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subinterface_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterface_SubinterfacesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterface_SubinterfacesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterface_SubinterfacesDefaultTypeInternal() {}
  union {
    NetInterface_Subinterfaces _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterface_SubinterfacesDefaultTypeInternal _NetInterface_Subinterfaces_default_instance_;
PROTOBUF_CONSTEXPR NetInterface::NetInterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.holdtime_)*/nullptr
  , /*decltype(_impl_.subinterfaces_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterfaceDefaultTypeInternal() {}
  union {
    NetInterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterfaceDefaultTypeInternal _NetInterface_default_instance_;
PROTOBUF_CONSTEXPR GetNetInterfaceRequest::GetNetInterfaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNetInterfaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNetInterfaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNetInterfaceRequestDefaultTypeInternal() {}
  union {
    GetNetInterfaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNetInterfaceRequestDefaultTypeInternal _GetNetInterfaceRequest_default_instance_;
PROTOBUF_CONSTEXPR ListNetInterfacesRequest::ListNetInterfacesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListNetInterfacesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListNetInterfacesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListNetInterfacesRequestDefaultTypeInternal() {}
  union {
    ListNetInterfacesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListNetInterfacesRequestDefaultTypeInternal _ListNetInterfacesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListNetInterfacesResponse::ListNetInterfacesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.net_interfaces_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListNetInterfacesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListNetInterfacesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListNetInterfacesResponseDefaultTypeInternal() {}
  union {
    ListNetInterfacesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListNetInterfacesResponseDefaultTypeInternal _ListNetInterfacesResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateNetInterfaceRequest::UpdateNetInterfaceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.net_interface_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateNetInterfaceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateNetInterfaceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateNetInterfaceRequestDefaultTypeInternal() {}
  union {
    UpdateNetInterfaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateNetInterfaceRequestDefaultTypeInternal _UpdateNetInterfaceRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_openconfig_5finterfaces_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_openconfig_5finterfaces_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_openconfig_5finterfaces_2eproto = nullptr;

const uint32_t TableStruct_openconfig_5finterfaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _impl_.mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _impl_.loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _impl_.enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_unknown_protos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.rx_fcs_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.out_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.carrier_transitions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _impl_.last_clear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.ifindex_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.admin_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.oper_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.last_change_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.logical_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.management_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.cpu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _impl_.counters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig, _impl_.up_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig, _impl_.down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState, _impl_.up_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState, _impl_.down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime, _impl_.hold_config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime, _impl_.hold_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, _impl_.enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, _impl_.subif_config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces, _impl_.subinterface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _impl_.holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _impl_.subinterfaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::GetNetInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::GetNetInterfaceRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesResponse, _impl_.net_interfaces_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesResponse, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, _impl_.net_interface_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, _impl_.update_mask_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::v1alpha1::Config)},
  { 12, -1, -1, sizeof(::opi_api::network::v1alpha1::Counters)},
  { 36, -1, -1, sizeof(::opi_api::network::v1alpha1::State)},
  { 56, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig)},
  { 64, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState)},
  { 72, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_HoldTime)},
  { 80, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig)},
  { 89, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface)},
  { 98, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_Subinterfaces)},
  { 105, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface)},
  { 116, -1, -1, sizeof(::opi_api::network::v1alpha1::GetNetInterfaceRequest)},
  { 123, -1, -1, sizeof(::opi_api::network::v1alpha1::ListNetInterfacesRequest)},
  { 132, -1, -1, sizeof(::opi_api::network::v1alpha1::ListNetInterfacesResponse)},
  { 140, -1, -1, sizeof(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::v1alpha1::_Config_default_instance_._instance,
  &::opi_api::network::v1alpha1::_Counters_default_instance_._instance,
  &::opi_api::network::v1alpha1::_State_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_HoldTime_HoldConfig_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_HoldTime_HoldState_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_HoldTime_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_Subinterface_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_default_instance_._instance,
  &::opi_api::network::v1alpha1::_NetInterface_default_instance_._instance,
  &::opi_api::network::v1alpha1::_GetNetInterfaceRequest_default_instance_._instance,
  &::opi_api::network::v1alpha1::_ListNetInterfacesRequest_default_instance_._instance,
  &::opi_api::network::v1alpha1::_ListNetInterfacesResponse_default_instance_._instance,
  &::opi_api::network::v1alpha1::_UpdateNetInterfaceRequest_default_instance_._instance,
};

const char descriptor_table_protodef_openconfig_5finterfaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033openconfig_interfaces.proto\022\030opi_api.n"
  "etwork.v1alpha1\032\022networktypes.proto\032\027goo"
  "gle/api/client.proto\032\031google/api/resourc"
  "e.proto\032\034google/api/annotations.proto\032\037g"
  "oogle/api/field_behavior.proto\032 google/p"
  "rotobuf/field_mask.proto\"\227\001\n\006Config\022\014\n\004n"
  "ame\030\001 \001(\t\0225\n\004type\030\002 \001(\0162\'.opi_api.networ"
  "k.v1alpha1.InterfaceType\022\013\n\003mtu\030\003 \001(\r\022\025\n"
  "\rloopback_mode\030\004 \001(\010\022\023\n\013description\030\005 \001("
  "\t\022\017\n\007enabled\030\006 \001(\010\"\260\003\n\010Counters\022\021\n\trx_oc"
  "tets\030\001 \001(\004\022\022\n\nrx_packets\030\002 \001(\004\022\027\n\017rx_uni"
  "cast_pkts\030\003 \001(\004\022\031\n\021rx_broadcast_pkts\030\004 \001"
  "(\004\022\031\n\021rx_multicast_pkts\030\005 \001(\004\022\023\n\013rx_disc"
  "ards\030\006 \001(\004\022\021\n\trx_errors\030\007 \001(\004\022\031\n\021rx_unkn"
  "own_protos\030\010 \001(\004\022\025\n\rrx_fcs_errors\030\t \001(\004\022"
  "\022\n\nout_octets\030\n \001(\004\022\023\n\013out_packets\030\013 \001(\004"
  "\022\030\n\020out_unicast_pkts\030\014 \001(\004\022\032\n\022out_broadc"
  "ast_pkts\030\r \001(\004\022\032\n\022out_multicast_pkts\030\016 \001"
  "(\004\022\024\n\014out_discards\030\017 \001(\004\022\022\n\nout_errors\030\020"
  " \001(\004\022\033\n\023carrier_transitions\030\021 \001(\004\022\022\n\nlas"
  "t_clear\030\022 \001(\004\"\245\003\n\005State\022\014\n\004name\030\001 \001(\t\0225\n"
  "\004type\030\002 \001(\0162\'.opi_api.network.v1alpha1.I"
  "nterfaceType\022\013\n\003mtu\030\003 \001(\r\022\025\n\rloopback_mo"
  "de\030\004 \001(\010\022\023\n\013description\030\005 \001(\t\022\017\n\007enabled"
  "\030\006 \001(\010\022\017\n\007ifindex\030\007 \001(\r\022F\n\013admin_state\030\010"
  " \001(\01621.opi_api.network.opinetcommon.v1al"
  "pha1.AdminState\0227\n\noper_state\030\t \001(\0162#.op"
  "i_api.network.v1alpha1.OperState\022\023\n\013last"
  "_change\030\n \001(\004\022\017\n\007logical\030\013 \001(\010\022\022\n\nmanage"
  "ment\030\014 \001(\010\022\013\n\003cpu\030\r \001(\010\0224\n\010counters\030\016 \001("
  "\0132\".opi_api.network.v1alpha1.Counters\"\356\006"
  "\n\014NetInterface\022\014\n\004name\030\001 \001(\t\0220\n\006config\030\002"
  " \001(\0132 .opi_api.network.v1alpha1.Config\022."
  "\n\005state\030\003 \001(\0132\037.opi_api.network.v1alpha1"
  ".State\022A\n\010holdtime\030\004 \001(\0132/.opi_api.netwo"
  "rk.v1alpha1.NetInterface.HoldTime\022K\n\rsub"
  "interfaces\030\005 \001(\01324.opi_api.network.v1alp"
  "ha1.NetInterface.Subinterfaces\032\371\001\n\010HoldT"
  "ime\022O\n\013hold_config\030\001 \001(\0132:.opi_api.netwo"
  "rk.v1alpha1.NetInterface.HoldTime.HoldCo"
  "nfig\022M\n\nhold_state\030\002 \001(\01329.opi_api.netwo"
  "rk.v1alpha1.NetInterface.HoldTime.HoldSt"
  "ate\032&\n\nHoldConfig\022\n\n\002up\030\001 \001(\r\022\014\n\004down\030\002 "
  "\001(\r\032%\n\tHoldState\022\n\n\002up\030\001 \001(\r\022\014\n\004down\030\002 \001"
  "(\r\032\341\002\n\rSubinterfaces\022W\n\014subinterface\030\002 \003"
  "(\0132A.opi_api.network.v1alpha1.NetInterfa"
  "ce.Subinterfaces.Subinterface\032\366\001\n\014Subint"
  "erface\022\r\n\005index\030\001 \001(\003\022c\n\014subif_config\030\002 "
  "\001(\0132M.opi_api.network.v1alpha1.NetInterf"
  "ace.Subinterfaces.Subinterface.SubifConf"
  "ig\022.\n\005state\030\003 \001(\0132\037.opi_api.network.v1al"
  "pha1.State\032B\n\013SubifConfig\022\r\n\005index\030\001 \001(\004"
  "\022\023\n\013description\030\002 \001(\t\022\017\n\007enabled\030\003 \001(\010\"M"
  "\n\026GetNetInterfaceRequest\0223\n\004name\030\001 \001(\tB%"
  "\340A\002\372A\037\n\035opi_api.network.v1/Interfaces\"x\n"
  "\030ListNetInterfacesRequest\0225\n\006parent\030\001 \001("
  "\tB%\340A\002\372A\037\n\035opi_api.network.v1/Interfaces"
  "\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\""
  "t\n\031ListNetInterfacesResponse\022>\n\016net_inte"
  "rfaces\030\001 \003(\0132&.opi_api.network.v1alpha1."
  "NetInterface\022\027\n\017next_page_token\030\002 \001(\t\"\213\001"
  "\n\031UpdateNetInterfaceRequest\022=\n\rnet_inter"
  "face\030\001 \001(\0132&.opi_api.network.v1alpha1.Ne"
  "tInterface\022/\n\013update_mask\030\002 \001(\0132\032.google"
  ".protobuf.FieldMask*K\n\rInterfaceType\022\036\n\032"
  "INTERFACE_TYPE_UNSPECIFIED\020\000\022\014\n\010ETHERNET"
  "\020\001\022\014\n\010LOOPBACK\020\002*\324\001\n\tOperState\022\032\n\026OPER_S"
  "TATE_UNSPECIFIED\020\000\022\021\n\rOPER_STATE_UP\020\002\022\023\n"
  "\017OPER_STATE_DOWN\020\003\022\026\n\022OPER_STATE_TESTING"
  "\020\004\022\026\n\022OPER_STATE_UNKNOWN\020\005\022\026\n\022OPER_STATE"
  "_DORMANT\020\006\022\032\n\026OPER_STATE_NOT_PRESENT\020\007\022\037"
  "\n\033OPER_STATE_LOWER_LAYER_DOWN\020\0102\272\004\n\023NetI"
  "nterfaceService\022\237\001\n\017GetNetInterface\0220.op"
  "i_api.network.v1alpha1.GetNetInterfaceRe"
  "quest\032&.opi_api.network.v1alpha1.NetInte"
  "rface\"2\202\323\344\223\002%\022#/v1/{name=interfaces/*/in"
  "terface/*}\332A\004name\022\246\001\n\021ListNetInterfaces\022"
  "2.opi_api.network.v1alpha1.ListNetInterf"
  "acesRequest\0323.opi_api.network.v1alpha1.L"
  "istNetInterfacesResponse\"(\202\323\344\223\002\031\022\027/v1/{p"
  "arent=interfaces}\332A\006parent\022\327\001\n\022UpdateNet"
  "Interface\0223.opi_api.network.v1alpha1.Upd"
  "ateNetInterfaceRequest\032&.opi_api.network"
  ".v1alpha1.NetInterface\"d\202\323\344\223\002B21/v1/{net"
  "_interface.name=interfaces/*/interface/*"
  "}:\rnet_interface\332A\031net_interface,update_"
  "maskB{\n\030opi_api.network.v1alpha1B\031Openco"
  "nfigInterfacesProtoP\001ZBgithub.com/opipro"
  "ject/opi-api/network/opinetcommon/v1alph"
  "a1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_openconfig_5finterfaces_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_openconfig_5finterfaces_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_openconfig_5finterfaces_2eproto = {
    false, false, 3577, descriptor_table_protodef_openconfig_5finterfaces_2eproto,
    "openconfig_interfaces.proto",
    &descriptor_table_openconfig_5finterfaces_2eproto_once, descriptor_table_openconfig_5finterfaces_2eproto_deps, 6, 14,
    schemas, file_default_instances, TableStruct_openconfig_5finterfaces_2eproto::offsets,
    file_level_metadata_openconfig_5finterfaces_2eproto, file_level_enum_descriptors_openconfig_5finterfaces_2eproto,
    file_level_service_descriptors_openconfig_5finterfaces_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_openconfig_5finterfaces_2eproto_getter() {
  return &descriptor_table_openconfig_5finterfaces_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_openconfig_5finterfaces_2eproto(&descriptor_table_openconfig_5finterfaces_2eproto);
namespace opi_api {
namespace network {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openconfig_5finterfaces_2eproto);
  return file_level_enum_descriptors_openconfig_5finterfaces_2eproto[0];
}
bool InterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openconfig_5finterfaces_2eproto);
  return file_level_enum_descriptors_openconfig_5finterfaces_2eproto[1];
}
bool OperState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.mtu_){}
    , decltype(_impl_.loopback_mode_){}
    , decltype(_impl_.enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.mtu_){0u}
    , decltype(_impl_.loopback_mode_){false}
    , decltype(_impl_.enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enabled_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.Config.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.InterfaceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::v1alpha1::InterfaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool loopback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.loopback_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.Config.description"));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.Config.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mtu(), target);
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_loopback_mode(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.Config.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.Config)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_mtu() != 0) {
    _this->_internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_loopback_mode() != 0) {
    _this->_internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.enabled_)
      + sizeof(Config::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[0]);
}

// ===================================================================

class Counters::_Internal {
 public:
};

Counters::Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.Counters)
}
Counters::Counters(const Counters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Counters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rx_octets_){}
    , decltype(_impl_.rx_packets_){}
    , decltype(_impl_.rx_unicast_pkts_){}
    , decltype(_impl_.rx_broadcast_pkts_){}
    , decltype(_impl_.rx_multicast_pkts_){}
    , decltype(_impl_.rx_discards_){}
    , decltype(_impl_.rx_errors_){}
    , decltype(_impl_.rx_unknown_protos_){}
    , decltype(_impl_.rx_fcs_errors_){}
    , decltype(_impl_.out_octets_){}
    , decltype(_impl_.out_packets_){}
    , decltype(_impl_.out_unicast_pkts_){}
    , decltype(_impl_.out_broadcast_pkts_){}
    , decltype(_impl_.out_multicast_pkts_){}
    , decltype(_impl_.out_discards_){}
    , decltype(_impl_.out_errors_){}
    , decltype(_impl_.carrier_transitions_){}
    , decltype(_impl_.last_clear_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rx_octets_, &from._impl_.rx_octets_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_clear_) -
    reinterpret_cast<char*>(&_impl_.rx_octets_)) + sizeof(_impl_.last_clear_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.Counters)
}

inline void Counters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rx_octets_){uint64_t{0u}}
    , decltype(_impl_.rx_packets_){uint64_t{0u}}
    , decltype(_impl_.rx_unicast_pkts_){uint64_t{0u}}
    , decltype(_impl_.rx_broadcast_pkts_){uint64_t{0u}}
    , decltype(_impl_.rx_multicast_pkts_){uint64_t{0u}}
    , decltype(_impl_.rx_discards_){uint64_t{0u}}
    , decltype(_impl_.rx_errors_){uint64_t{0u}}
    , decltype(_impl_.rx_unknown_protos_){uint64_t{0u}}
    , decltype(_impl_.rx_fcs_errors_){uint64_t{0u}}
    , decltype(_impl_.out_octets_){uint64_t{0u}}
    , decltype(_impl_.out_packets_){uint64_t{0u}}
    , decltype(_impl_.out_unicast_pkts_){uint64_t{0u}}
    , decltype(_impl_.out_broadcast_pkts_){uint64_t{0u}}
    , decltype(_impl_.out_multicast_pkts_){uint64_t{0u}}
    , decltype(_impl_.out_discards_){uint64_t{0u}}
    , decltype(_impl_.out_errors_){uint64_t{0u}}
    , decltype(_impl_.carrier_transitions_){uint64_t{0u}}
    , decltype(_impl_.last_clear_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Counters::~Counters() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.Counters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Counters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Counters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.Counters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rx_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_clear_) -
      reinterpret_cast<char*>(&_impl_.rx_octets_)) + sizeof(_impl_.last_clear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Counters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rx_octets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rx_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rx_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_unicast_pkts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rx_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_broadcast_pkts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rx_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_multicast_pkts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rx_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_discards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rx_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.rx_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_unknown_protos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.rx_unknown_protos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_fcs_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.rx_fcs_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_octets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.out_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_packets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.out_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_unicast_pkts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.out_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_broadcast_pkts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.out_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_multicast_pkts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.out_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_discards = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.out_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_errors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.out_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 carrier_transitions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.carrier_transitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_clear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.last_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Counters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.Counters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rx_octets = 1;
  if (this->_internal_rx_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rx_octets(), target);
  }

  // uint64 rx_packets = 2;
  if (this->_internal_rx_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rx_packets(), target);
  }

  // uint64 rx_unicast_pkts = 3;
  if (this->_internal_rx_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rx_unicast_pkts(), target);
  }

  // uint64 rx_broadcast_pkts = 4;
  if (this->_internal_rx_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rx_broadcast_pkts(), target);
  }

  // uint64 rx_multicast_pkts = 5;
  if (this->_internal_rx_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rx_multicast_pkts(), target);
  }

  // uint64 rx_discards = 6;
  if (this->_internal_rx_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rx_discards(), target);
  }

  // uint64 rx_errors = 7;
  if (this->_internal_rx_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rx_errors(), target);
  }

  // uint64 rx_unknown_protos = 8;
  if (this->_internal_rx_unknown_protos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_rx_unknown_protos(), target);
  }

  // uint64 rx_fcs_errors = 9;
  if (this->_internal_rx_fcs_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_rx_fcs_errors(), target);
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_out_octets(), target);
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_out_packets(), target);
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_out_unicast_pkts(), target);
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_out_broadcast_pkts(), target);
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_out_multicast_pkts(), target);
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_out_discards(), target);
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_out_errors(), target);
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_carrier_transitions(), target);
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_last_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.Counters)
  return target;
}

size_t Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.Counters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rx_octets = 1;
  if (this->_internal_rx_octets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_octets());
  }

  // uint64 rx_packets = 2;
  if (this->_internal_rx_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_packets());
  }

  // uint64 rx_unicast_pkts = 3;
  if (this->_internal_rx_unicast_pkts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_unicast_pkts());
  }

  // uint64 rx_broadcast_pkts = 4;
  if (this->_internal_rx_broadcast_pkts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_broadcast_pkts());
  }

  // uint64 rx_multicast_pkts = 5;
  if (this->_internal_rx_multicast_pkts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_multicast_pkts());
  }

  // uint64 rx_discards = 6;
  if (this->_internal_rx_discards() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_discards());
  }

  // uint64 rx_errors = 7;
  if (this->_internal_rx_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_errors());
  }

  // uint64 rx_unknown_protos = 8;
  if (this->_internal_rx_unknown_protos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_unknown_protos());
  }

  // uint64 rx_fcs_errors = 9;
  if (this->_internal_rx_fcs_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_fcs_errors());
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_octets());
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_packets());
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_unicast_pkts());
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_broadcast_pkts());
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_multicast_pkts());
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_discards());
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_out_errors());
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_carrier_transitions());
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_last_clear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Counters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Counters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Counters::GetClassData() const { return &_class_data_; }


void Counters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Counters*>(&to_msg);
  auto& from = static_cast<const Counters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.Counters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rx_octets() != 0) {
    _this->_internal_set_rx_octets(from._internal_rx_octets());
  }
  if (from._internal_rx_packets() != 0) {
    _this->_internal_set_rx_packets(from._internal_rx_packets());
  }
  if (from._internal_rx_unicast_pkts() != 0) {
    _this->_internal_set_rx_unicast_pkts(from._internal_rx_unicast_pkts());
  }
  if (from._internal_rx_broadcast_pkts() != 0) {
    _this->_internal_set_rx_broadcast_pkts(from._internal_rx_broadcast_pkts());
  }
  if (from._internal_rx_multicast_pkts() != 0) {
    _this->_internal_set_rx_multicast_pkts(from._internal_rx_multicast_pkts());
  }
  if (from._internal_rx_discards() != 0) {
    _this->_internal_set_rx_discards(from._internal_rx_discards());
  }
  if (from._internal_rx_errors() != 0) {
    _this->_internal_set_rx_errors(from._internal_rx_errors());
  }
  if (from._internal_rx_unknown_protos() != 0) {
    _this->_internal_set_rx_unknown_protos(from._internal_rx_unknown_protos());
  }
  if (from._internal_rx_fcs_errors() != 0) {
    _this->_internal_set_rx_fcs_errors(from._internal_rx_fcs_errors());
  }
  if (from._internal_out_octets() != 0) {
    _this->_internal_set_out_octets(from._internal_out_octets());
  }
  if (from._internal_out_packets() != 0) {
    _this->_internal_set_out_packets(from._internal_out_packets());
  }
  if (from._internal_out_unicast_pkts() != 0) {
    _this->_internal_set_out_unicast_pkts(from._internal_out_unicast_pkts());
  }
  if (from._internal_out_broadcast_pkts() != 0) {
    _this->_internal_set_out_broadcast_pkts(from._internal_out_broadcast_pkts());
  }
  if (from._internal_out_multicast_pkts() != 0) {
    _this->_internal_set_out_multicast_pkts(from._internal_out_multicast_pkts());
  }
  if (from._internal_out_discards() != 0) {
    _this->_internal_set_out_discards(from._internal_out_discards());
  }
  if (from._internal_out_errors() != 0) {
    _this->_internal_set_out_errors(from._internal_out_errors());
  }
  if (from._internal_carrier_transitions() != 0) {
    _this->_internal_set_carrier_transitions(from._internal_carrier_transitions());
  }
  if (from._internal_last_clear() != 0) {
    _this->_internal_set_last_clear(from._internal_last_clear());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Counters::CopyFrom(const Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counters::IsInitialized() const {
  return true;
}

void Counters::InternalSwap(Counters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Counters, _impl_.last_clear_)
      + sizeof(Counters::_impl_.last_clear_)
      - PROTOBUF_FIELD_OFFSET(Counters, _impl_.rx_octets_)>(
          reinterpret_cast<char*>(&_impl_.rx_octets_),
          reinterpret_cast<char*>(&other->_impl_.rx_octets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Counters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[1]);
}

// ===================================================================

class State::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::Counters& counters(const State* msg);
};

const ::opi_api::network::v1alpha1::Counters&
State::_Internal::counters(const State* msg) {
  return *msg->_impl_.counters_;
}
State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  State* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.counters_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.mtu_){}
    , decltype(_impl_.ifindex_){}
    , decltype(_impl_.admin_state_){}
    , decltype(_impl_.loopback_mode_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.logical_){}
    , decltype(_impl_.management_){}
    , decltype(_impl_.oper_state_){}
    , decltype(_impl_.last_change_){}
    , decltype(_impl_.cpu_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_counters()) {
    _this->_impl_.counters_ = new ::opi_api::network::v1alpha1::Counters(*from._impl_.counters_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpu_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.cpu_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.State)
}

inline void State::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.counters_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.mtu_){0u}
    , decltype(_impl_.ifindex_){0u}
    , decltype(_impl_.admin_state_){0}
    , decltype(_impl_.loopback_mode_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.logical_){false}
    , decltype(_impl_.management_){false}
    , decltype(_impl_.oper_state_){0}
    , decltype(_impl_.last_change_){uint64_t{0u}}
    , decltype(_impl_.cpu_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

State::~State() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.State)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.counters_;
}

void State::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.counters_ != nullptr) {
    delete _impl_.counters_;
  }
  _impl_.counters_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cpu_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.cpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.State.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.InterfaceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::v1alpha1::InterfaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool loopback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.loopback_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.State.description"));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ifindex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ifindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_state(static_cast<::opi_api::network::opinetcommon::v1alpha1::AdminState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.OperState oper_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_state(static_cast<::opi_api::network::v1alpha1::OperState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 last_change = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.last_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool logical = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.logical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool management = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.management_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cpu = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.Counters counters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_counters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.State.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mtu(), target);
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_loopback_mode(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.State.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // uint32 ifindex = 7;
  if (this->_internal_ifindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ifindex(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
  if (this->_internal_admin_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_admin_state(), target);
  }

  // .opi_api.network.v1alpha1.OperState oper_state = 9;
  if (this->_internal_oper_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_oper_state(), target);
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_last_change(), target);
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_logical(), target);
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_management(), target);
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_cpu(), target);
  }

  // .opi_api.network.v1alpha1.Counters counters = 14;
  if (this->_internal_has_counters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::counters(this),
        _Internal::counters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opi_api.network.v1alpha1.Counters counters = 14;
  if (this->_internal_has_counters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.counters_);
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // uint32 ifindex = 7;
  if (this->_internal_ifindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ifindex());
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
  if (this->_internal_admin_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_admin_state());
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    total_size += 1 + 1;
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.v1alpha1.OperState oper_state = 9;
  if (this->_internal_oper_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_oper_state());
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_change());
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }


void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<State*>(&to_msg);
  auto& from = static_cast<const State&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.State)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_counters()) {
    _this->_internal_mutable_counters()->::opi_api::network::v1alpha1::Counters::MergeFrom(
        from._internal_counters());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_mtu() != 0) {
    _this->_internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_ifindex() != 0) {
    _this->_internal_set_ifindex(from._internal_ifindex());
  }
  if (from._internal_admin_state() != 0) {
    _this->_internal_set_admin_state(from._internal_admin_state());
  }
  if (from._internal_loopback_mode() != 0) {
    _this->_internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_logical() != 0) {
    _this->_internal_set_logical(from._internal_logical());
  }
  if (from._internal_management() != 0) {
    _this->_internal_set_management(from._internal_management());
  }
  if (from._internal_oper_state() != 0) {
    _this->_internal_set_oper_state(from._internal_oper_state());
  }
  if (from._internal_last_change() != 0) {
    _this->_internal_set_last_change(from._internal_last_change());
  }
  if (from._internal_cpu() != 0) {
    _this->_internal_set_cpu(from._internal_cpu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, _impl_.cpu_)
      + sizeof(State::_impl_.cpu_)
      - PROTOBUF_FIELD_OFFSET(State, _impl_.counters_)>(
          reinterpret_cast<char*>(&_impl_.counters_),
          reinterpret_cast<char*>(&other->_impl_.counters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[2]);
}

// ===================================================================

class NetInterface_HoldTime_HoldConfig::_Internal {
 public:
};

NetInterface_HoldTime_HoldConfig::NetInterface_HoldTime_HoldConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
}
NetInterface_HoldTime_HoldConfig::NetInterface_HoldTime_HoldConfig(const NetInterface_HoldTime_HoldConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface_HoldTime_HoldConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.up_){}
    , decltype(_impl_.down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.up_, &from._impl_.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.down_) -
    reinterpret_cast<char*>(&_impl_.up_)) + sizeof(_impl_.down_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
}

inline void NetInterface_HoldTime_HoldConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.up_){0u}
    , decltype(_impl_.down_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetInterface_HoldTime_HoldConfig::~NetInterface_HoldTime_HoldConfig() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface_HoldTime_HoldConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterface_HoldTime_HoldConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface_HoldTime_HoldConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.down_) -
      reinterpret_cast<char*>(&_impl_.up_)) + sizeof(_impl_.down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_HoldTime_HoldConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_HoldTime_HoldConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_up(), target);
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  return target;
}

size_t NetInterface_HoldTime_HoldConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_up());
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_HoldTime_HoldConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface_HoldTime_HoldConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_HoldTime_HoldConfig::GetClassData() const { return &_class_data_; }


void NetInterface_HoldTime_HoldConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface_HoldTime_HoldConfig*>(&to_msg);
  auto& from = static_cast<const NetInterface_HoldTime_HoldConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_up() != 0) {
    _this->_internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _this->_internal_set_down(from._internal_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_HoldTime_HoldConfig::CopyFrom(const NetInterface_HoldTime_HoldConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_HoldTime_HoldConfig::IsInitialized() const {
  return true;
}

void NetInterface_HoldTime_HoldConfig::InternalSwap(NetInterface_HoldTime_HoldConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldConfig, _impl_.down_)
      + sizeof(NetInterface_HoldTime_HoldConfig::_impl_.down_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldConfig, _impl_.up_)>(
          reinterpret_cast<char*>(&_impl_.up_),
          reinterpret_cast<char*>(&other->_impl_.up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_HoldTime_HoldConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[3]);
}

// ===================================================================

class NetInterface_HoldTime_HoldState::_Internal {
 public:
};

NetInterface_HoldTime_HoldState::NetInterface_HoldTime_HoldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
}
NetInterface_HoldTime_HoldState::NetInterface_HoldTime_HoldState(const NetInterface_HoldTime_HoldState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface_HoldTime_HoldState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.up_){}
    , decltype(_impl_.down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.up_, &from._impl_.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.down_) -
    reinterpret_cast<char*>(&_impl_.up_)) + sizeof(_impl_.down_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
}

inline void NetInterface_HoldTime_HoldState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.up_){0u}
    , decltype(_impl_.down_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetInterface_HoldTime_HoldState::~NetInterface_HoldTime_HoldState() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface_HoldTime_HoldState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterface_HoldTime_HoldState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface_HoldTime_HoldState::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.down_) -
      reinterpret_cast<char*>(&_impl_.up_)) + sizeof(_impl_.down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_HoldTime_HoldState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_HoldTime_HoldState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_up(), target);
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  return target;
}

size_t NetInterface_HoldTime_HoldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_up());
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_HoldTime_HoldState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface_HoldTime_HoldState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_HoldTime_HoldState::GetClassData() const { return &_class_data_; }


void NetInterface_HoldTime_HoldState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface_HoldTime_HoldState*>(&to_msg);
  auto& from = static_cast<const NetInterface_HoldTime_HoldState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_up() != 0) {
    _this->_internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _this->_internal_set_down(from._internal_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_HoldTime_HoldState::CopyFrom(const NetInterface_HoldTime_HoldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_HoldTime_HoldState::IsInitialized() const {
  return true;
}

void NetInterface_HoldTime_HoldState::InternalSwap(NetInterface_HoldTime_HoldState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldState, _impl_.down_)
      + sizeof(NetInterface_HoldTime_HoldState::_impl_.down_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldState, _impl_.up_)>(
          reinterpret_cast<char*>(&_impl_.up_),
          reinterpret_cast<char*>(&other->_impl_.up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_HoldTime_HoldState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[4]);
}

// ===================================================================

class NetInterface_HoldTime::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig& hold_config(const NetInterface_HoldTime* msg);
  static const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState& hold_state(const NetInterface_HoldTime* msg);
};

const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig&
NetInterface_HoldTime::_Internal::hold_config(const NetInterface_HoldTime* msg) {
  return *msg->_impl_.hold_config_;
}
const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState&
NetInterface_HoldTime::_Internal::hold_state(const NetInterface_HoldTime* msg) {
  return *msg->_impl_.hold_state_;
}
NetInterface_HoldTime::NetInterface_HoldTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime)
}
NetInterface_HoldTime::NetInterface_HoldTime(const NetInterface_HoldTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface_HoldTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hold_config_){nullptr}
    , decltype(_impl_.hold_state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hold_config()) {
    _this->_impl_.hold_config_ = new ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig(*from._impl_.hold_config_);
  }
  if (from._internal_has_hold_state()) {
    _this->_impl_.hold_state_ = new ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState(*from._impl_.hold_state_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime)
}

inline void NetInterface_HoldTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hold_config_){nullptr}
    , decltype(_impl_.hold_state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetInterface_HoldTime::~NetInterface_HoldTime() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.HoldTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface_HoldTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hold_config_;
  if (this != internal_default_instance()) delete _impl_.hold_state_;
}

void NetInterface_HoldTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface_HoldTime::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hold_config_ != nullptr) {
    delete _impl_.hold_config_;
  }
  _impl_.hold_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hold_state_ != nullptr) {
    delete _impl_.hold_state_;
  }
  _impl_.hold_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_HoldTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hold_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hold_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_HoldTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
  if (this->_internal_has_hold_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hold_config(this),
        _Internal::hold_config(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
  if (this->_internal_has_hold_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hold_state(this),
        _Internal::hold_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.HoldTime)
  return target;
}

size_t NetInterface_HoldTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
  if (this->_internal_has_hold_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hold_config_);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
  if (this->_internal_has_hold_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hold_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_HoldTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface_HoldTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_HoldTime::GetClassData() const { return &_class_data_; }


void NetInterface_HoldTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface_HoldTime*>(&to_msg);
  auto& from = static_cast<const NetInterface_HoldTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hold_config()) {
    _this->_internal_mutable_hold_config()->::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig::MergeFrom(
        from._internal_hold_config());
  }
  if (from._internal_has_hold_state()) {
    _this->_internal_mutable_hold_state()->::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState::MergeFrom(
        from._internal_hold_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_HoldTime::CopyFrom(const NetInterface_HoldTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_HoldTime::IsInitialized() const {
  return true;
}

void NetInterface_HoldTime::InternalSwap(NetInterface_HoldTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime, _impl_.hold_state_)
      + sizeof(NetInterface_HoldTime::_impl_.hold_state_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime, _impl_.hold_config_)>(
          reinterpret_cast<char*>(&_impl_.hold_config_),
          reinterpret_cast<char*>(&other->_impl_.hold_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_HoldTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[5]);
}

// ===================================================================

class NetInterface_Subinterfaces_Subinterface_SubifConfig::_Internal {
 public:
};

NetInterface_Subinterfaces_Subinterface_SubifConfig::NetInterface_Subinterfaces_Subinterface_SubifConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
}
NetInterface_Subinterfaces_Subinterface_SubifConfig::NetInterface_Subinterfaces_Subinterface_SubifConfig(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface_Subinterfaces_Subinterface_SubifConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
}

inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetInterface_Subinterfaces_Subinterface_SubifConfig::~NetInterface_Subinterfaces_Subinterface_SubifConfig() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enabled_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_Subinterfaces_Subinterface_SubifConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description"));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_Subinterfaces_Subinterface_SubifConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  return target;
}

size_t NetInterface_Subinterfaces_Subinterface_SubifConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_Subinterfaces_Subinterface_SubifConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_Subinterfaces_Subinterface_SubifConfig::GetClassData() const { return &_class_data_; }


void NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface_Subinterfaces_Subinterface_SubifConfig*>(&to_msg);
  auto& from = static_cast<const NetInterface_Subinterfaces_Subinterface_SubifConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::CopyFrom(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_Subinterfaces_Subinterface_SubifConfig::IsInitialized() const {
  return true;
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::InternalSwap(NetInterface_Subinterfaces_Subinterface_SubifConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface_SubifConfig, _impl_.enabled_)
      + sizeof(NetInterface_Subinterfaces_Subinterface_SubifConfig::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface_SubifConfig, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_Subinterfaces_Subinterface_SubifConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[6]);
}

// ===================================================================

class NetInterface_Subinterfaces_Subinterface::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig& subif_config(const NetInterface_Subinterfaces_Subinterface* msg);
  static const ::opi_api::network::v1alpha1::State& state(const NetInterface_Subinterfaces_Subinterface* msg);
};

const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig&
NetInterface_Subinterfaces_Subinterface::_Internal::subif_config(const NetInterface_Subinterfaces_Subinterface* msg) {
  return *msg->_impl_.subif_config_;
}
const ::opi_api::network::v1alpha1::State&
NetInterface_Subinterfaces_Subinterface::_Internal::state(const NetInterface_Subinterfaces_Subinterface* msg) {
  return *msg->_impl_.state_;
}
NetInterface_Subinterfaces_Subinterface::NetInterface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
}
NetInterface_Subinterfaces_Subinterface::NetInterface_Subinterfaces_Subinterface(const NetInterface_Subinterfaces_Subinterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface_Subinterfaces_Subinterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subif_config_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subif_config()) {
    _this->_impl_.subif_config_ = new ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig(*from._impl_.subif_config_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::opi_api::network::v1alpha1::State(*from._impl_.state_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
}

inline void NetInterface_Subinterfaces_Subinterface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subif_config_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetInterface_Subinterfaces_Subinterface::~NetInterface_Subinterfaces_Subinterface() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface_Subinterfaces_Subinterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subif_config_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void NetInterface_Subinterfaces_Subinterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface_Subinterfaces_Subinterface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.subif_config_ != nullptr) {
    delete _impl_.subif_config_;
  }
  _impl_.subif_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _impl_.index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_Subinterfaces_Subinterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subif_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_Subinterfaces_Subinterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
  if (this->_internal_has_subif_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subif_config(this),
        _Internal::subif_config(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  return target;
}

size_t NetInterface_Subinterfaces_Subinterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
  if (this->_internal_has_subif_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subif_config_);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_Subinterfaces_Subinterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface_Subinterfaces_Subinterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_Subinterfaces_Subinterface::GetClassData() const { return &_class_data_; }


void NetInterface_Subinterfaces_Subinterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface_Subinterfaces_Subinterface*>(&to_msg);
  auto& from = static_cast<const NetInterface_Subinterfaces_Subinterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subif_config()) {
    _this->_internal_mutable_subif_config()->::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeFrom(
        from._internal_subif_config());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::opi_api::network::v1alpha1::State::MergeFrom(
        from._internal_state());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_Subinterfaces_Subinterface::CopyFrom(const NetInterface_Subinterfaces_Subinterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_Subinterfaces_Subinterface::IsInitialized() const {
  return true;
}

void NetInterface_Subinterfaces_Subinterface::InternalSwap(NetInterface_Subinterfaces_Subinterface* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface, _impl_.index_)
      + sizeof(NetInterface_Subinterfaces_Subinterface::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface, _impl_.subif_config_)>(
          reinterpret_cast<char*>(&_impl_.subif_config_),
          reinterpret_cast<char*>(&other->_impl_.subif_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_Subinterfaces_Subinterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[7]);
}

// ===================================================================

class NetInterface_Subinterfaces::_Internal {
 public:
};

NetInterface_Subinterfaces::NetInterface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
}
NetInterface_Subinterfaces::NetInterface_Subinterfaces(const NetInterface_Subinterfaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface_Subinterfaces* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subinterface_){from._impl_.subinterface_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
}

inline void NetInterface_Subinterfaces::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subinterface_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetInterface_Subinterfaces::~NetInterface_Subinterfaces() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface_Subinterfaces::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subinterface_.~RepeatedPtrField();
}

void NetInterface_Subinterfaces::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface_Subinterfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subinterface_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_Subinterfaces::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subinterface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_Subinterfaces::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subinterface_size()); i < n; i++) {
    const auto& repfield = this->_internal_subinterface(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  return target;
}

size_t NetInterface_Subinterfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
  total_size += 1UL * this->_internal_subinterface_size();
  for (const auto& msg : this->_impl_.subinterface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_Subinterfaces::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface_Subinterfaces::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_Subinterfaces::GetClassData() const { return &_class_data_; }


void NetInterface_Subinterfaces::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface_Subinterfaces*>(&to_msg);
  auto& from = static_cast<const NetInterface_Subinterfaces&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subinterface_.MergeFrom(from._impl_.subinterface_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_Subinterfaces::CopyFrom(const NetInterface_Subinterfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_Subinterfaces::IsInitialized() const {
  return true;
}

void NetInterface_Subinterfaces::InternalSwap(NetInterface_Subinterfaces* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subinterface_.InternalSwap(&other->_impl_.subinterface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_Subinterfaces::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[8]);
}

// ===================================================================

class NetInterface::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::Config& config(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::State& state(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::NetInterface_HoldTime& holdtime(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces& subinterfaces(const NetInterface* msg);
};

const ::opi_api::network::v1alpha1::Config&
NetInterface::_Internal::config(const NetInterface* msg) {
  return *msg->_impl_.config_;
}
const ::opi_api::network::v1alpha1::State&
NetInterface::_Internal::state(const NetInterface* msg) {
  return *msg->_impl_.state_;
}
const ::opi_api::network::v1alpha1::NetInterface_HoldTime&
NetInterface::_Internal::holdtime(const NetInterface* msg) {
  return *msg->_impl_.holdtime_;
}
const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces&
NetInterface::_Internal::subinterfaces(const NetInterface* msg) {
  return *msg->_impl_.subinterfaces_;
}
NetInterface::NetInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface)
}
NetInterface::NetInterface(const NetInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.holdtime_){nullptr}
    , decltype(_impl_.subinterfaces_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::opi_api::network::v1alpha1::Config(*from._impl_.config_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::opi_api::network::v1alpha1::State(*from._impl_.state_);
  }
  if (from._internal_has_holdtime()) {
    _this->_impl_.holdtime_ = new ::opi_api::network::v1alpha1::NetInterface_HoldTime(*from._impl_.holdtime_);
  }
  if (from._internal_has_subinterfaces()) {
    _this->_impl_.subinterfaces_ = new ::opi_api::network::v1alpha1::NetInterface_Subinterfaces(*from._impl_.subinterfaces_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface)
}

inline void NetInterface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.holdtime_){nullptr}
    , decltype(_impl_.subinterfaces_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetInterface::~NetInterface() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.config_;
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.holdtime_;
  if (this != internal_default_instance()) delete _impl_.subinterfaces_;
}

void NetInterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.holdtime_ != nullptr) {
    delete _impl_.holdtime_;
  }
  _impl_.holdtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subinterfaces_ != nullptr) {
    delete _impl_.subinterfaces_;
  }
  _impl_.subinterfaces_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.NetInterface.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_holdtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subinterfaces(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.NetInterface.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1alpha1.Config config = 2;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
  if (this->_internal_has_holdtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::holdtime(this),
        _Internal::holdtime(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
  if (this->_internal_has_subinterfaces()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subinterfaces(this),
        _Internal::subinterfaces(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface)
  return target;
}

size_t NetInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.v1alpha1.Config config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
  if (this->_internal_has_holdtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.holdtime_);
  }

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
  if (this->_internal_has_subinterfaces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subinterfaces_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface::GetClassData() const { return &_class_data_; }


void NetInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface*>(&to_msg);
  auto& from = static_cast<const NetInterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::opi_api::network::v1alpha1::Config::MergeFrom(
        from._internal_config());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::opi_api::network::v1alpha1::State::MergeFrom(
        from._internal_state());
  }
  if (from._internal_has_holdtime()) {
    _this->_internal_mutable_holdtime()->::opi_api::network::v1alpha1::NetInterface_HoldTime::MergeFrom(
        from._internal_holdtime());
  }
  if (from._internal_has_subinterfaces()) {
    _this->_internal_mutable_subinterfaces()->::opi_api::network::v1alpha1::NetInterface_Subinterfaces::MergeFrom(
        from._internal_subinterfaces());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface::CopyFrom(const NetInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface::IsInitialized() const {
  return true;
}

void NetInterface::InternalSwap(NetInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface, _impl_.subinterfaces_)
      + sizeof(NetInterface::_impl_.subinterfaces_)
      - PROTOBUF_FIELD_OFFSET(NetInterface, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[9]);
}

// ===================================================================

class GetNetInterfaceRequest::_Internal {
 public:
};

GetNetInterfaceRequest::GetNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.GetNetInterfaceRequest)
}
GetNetInterfaceRequest::GetNetInterfaceRequest(const GetNetInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNetInterfaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.GetNetInterfaceRequest)
}

inline void GetNetInterfaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNetInterfaceRequest::~GetNetInterfaceRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNetInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetNetInterfaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNetInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetInterfaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.GetNetInterfaceRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNetInterfaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.GetNetInterfaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  return target;
}

size_t GetNetInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNetInterfaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNetInterfaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNetInterfaceRequest::GetClassData() const { return &_class_data_; }


void GetNetInterfaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNetInterfaceRequest*>(&to_msg);
  auto& from = static_cast<const GetNetInterfaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNetInterfaceRequest::CopyFrom(const GetNetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetInterfaceRequest::IsInitialized() const {
  return true;
}

void GetNetInterfaceRequest::InternalSwap(GetNetInterfaceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetInterfaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[10]);
}

// ===================================================================

class ListNetInterfacesRequest::_Internal {
 public:
};

ListNetInterfacesRequest::ListNetInterfacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.ListNetInterfacesRequest)
}
ListNetInterfacesRequest::ListNetInterfacesRequest(const ListNetInterfacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListNetInterfacesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    _this->_impl_.parent_.Set(from._internal_parent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.ListNetInterfacesRequest)
}

inline void ListNetInterfacesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListNetInterfacesRequest::~ListNetInterfacesRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListNetInterfacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_.Destroy();
  _impl_.page_token_.Destroy();
}

void ListNetInterfacesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListNetInterfacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetInterfacesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.ListNetInterfacesRequest.parent"));
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNetInterfacesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.ListNetInterfacesRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  return target;
}

size_t ListNetInterfacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNetInterfacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListNetInterfacesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNetInterfacesRequest::GetClassData() const { return &_class_data_; }


void ListNetInterfacesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListNetInterfacesRequest*>(&to_msg);
  auto& from = static_cast<const ListNetInterfacesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _this->_internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNetInterfacesRequest::CopyFrom(const ListNetInterfacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetInterfacesRequest::IsInitialized() const {
  return true;
}

void ListNetInterfacesRequest::InternalSwap(ListNetInterfacesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_, lhs_arena,
      &other->_impl_.parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  swap(_impl_.page_size_, other->_impl_.page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetInterfacesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[11]);
}

// ===================================================================

class ListNetInterfacesResponse::_Internal {
 public:
};

ListNetInterfacesResponse::ListNetInterfacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.ListNetInterfacesResponse)
}
ListNetInterfacesResponse::ListNetInterfacesResponse(const ListNetInterfacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListNetInterfacesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.net_interfaces_){from._impl_.net_interfaces_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.ListNetInterfacesResponse)
}

inline void ListNetInterfacesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.net_interfaces_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListNetInterfacesResponse::~ListNetInterfacesResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListNetInterfacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.net_interfaces_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListNetInterfacesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListNetInterfacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.net_interfaces_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetInterfacesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_net_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNetInterfacesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_net_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_net_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  return target;
}

size_t ListNetInterfacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
  total_size += 1UL * this->_internal_net_interfaces_size();
  for (const auto& msg : this->_impl_.net_interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNetInterfacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListNetInterfacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNetInterfacesResponse::GetClassData() const { return &_class_data_; }


void ListNetInterfacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListNetInterfacesResponse*>(&to_msg);
  auto& from = static_cast<const ListNetInterfacesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.net_interfaces_.MergeFrom(from._impl_.net_interfaces_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNetInterfacesResponse::CopyFrom(const ListNetInterfacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetInterfacesResponse::IsInitialized() const {
  return true;
}

void ListNetInterfacesResponse::InternalSwap(ListNetInterfacesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.net_interfaces_.InternalSwap(&other->_impl_.net_interfaces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetInterfacesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[12]);
}

// ===================================================================

class UpdateNetInterfaceRequest::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::NetInterface& net_interface(const UpdateNetInterfaceRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateNetInterfaceRequest* msg);
};

const ::opi_api::network::v1alpha1::NetInterface&
UpdateNetInterfaceRequest::_Internal::net_interface(const UpdateNetInterfaceRequest* msg) {
  return *msg->_impl_.net_interface_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateNetInterfaceRequest::_Internal::update_mask(const UpdateNetInterfaceRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdateNetInterfaceRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
}
UpdateNetInterfaceRequest::UpdateNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
}
UpdateNetInterfaceRequest::UpdateNetInterfaceRequest(const UpdateNetInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateNetInterfaceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.net_interface_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_net_interface()) {
    _this->_impl_.net_interface_ = new ::opi_api::network::v1alpha1::NetInterface(*from._impl_.net_interface_);
  }
  if (from._internal_has_update_mask()) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
}

inline void UpdateNetInterfaceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.net_interface_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateNetInterfaceRequest::~UpdateNetInterfaceRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateNetInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.net_interface_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdateNetInterfaceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateNetInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.net_interface_ != nullptr) {
    delete _impl_.net_interface_;
  }
  _impl_.net_interface_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetInterfaceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateNetInterfaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
  if (this->_internal_has_net_interface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::net_interface(this),
        _Internal::net_interface(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  return target;
}

size_t UpdateNetInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
  if (this->_internal_has_net_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.net_interface_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateNetInterfaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateNetInterfaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateNetInterfaceRequest::GetClassData() const { return &_class_data_; }


void UpdateNetInterfaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateNetInterfaceRequest*>(&to_msg);
  auto& from = static_cast<const UpdateNetInterfaceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_net_interface()) {
    _this->_internal_mutable_net_interface()->::opi_api::network::v1alpha1::NetInterface::MergeFrom(
        from._internal_net_interface());
  }
  if (from._internal_has_update_mask()) {
    _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_update_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateNetInterfaceRequest::CopyFrom(const UpdateNetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetInterfaceRequest::IsInitialized() const {
  return true;
}

void UpdateNetInterfaceRequest::InternalSwap(UpdateNetInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateNetInterfaceRequest, _impl_.update_mask_)
      + sizeof(UpdateNetInterfaceRequest::_impl_.update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateNetInterfaceRequest, _impl_.net_interface_)>(
          reinterpret_cast<char*>(&_impl_.net_interface_),
          reinterpret_cast<char*>(&other->_impl_.net_interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetInterfaceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::Config*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::Counters*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::Counters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::Counters >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::State*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::State >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_HoldTime*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_HoldTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_HoldTime >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_Subinterfaces*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::GetNetInterfaceRequest*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::GetNetInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::GetNetInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::ListNetInterfacesRequest*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::ListNetInterfacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::ListNetInterfacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::ListNetInterfacesResponse*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::ListNetInterfacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::ListNetInterfacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest*
Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
