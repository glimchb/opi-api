// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_interfaces.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openconfig_5finterfaces_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openconfig_5finterfaces_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networktypes.pb.h"
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openconfig_5finterfaces_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openconfig_5finterfaces_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openconfig_5finterfaces_2eproto;
namespace opi_api {
namespace network {
namespace v1alpha1 {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Counters;
struct CountersDefaultTypeInternal;
extern CountersDefaultTypeInternal _Counters_default_instance_;
class GetNetInterfaceRequest;
struct GetNetInterfaceRequestDefaultTypeInternal;
extern GetNetInterfaceRequestDefaultTypeInternal _GetNetInterfaceRequest_default_instance_;
class ListNetInterfacesRequest;
struct ListNetInterfacesRequestDefaultTypeInternal;
extern ListNetInterfacesRequestDefaultTypeInternal _ListNetInterfacesRequest_default_instance_;
class ListNetInterfacesResponse;
struct ListNetInterfacesResponseDefaultTypeInternal;
extern ListNetInterfacesResponseDefaultTypeInternal _ListNetInterfacesResponse_default_instance_;
class NetInterface;
struct NetInterfaceDefaultTypeInternal;
extern NetInterfaceDefaultTypeInternal _NetInterface_default_instance_;
class NetInterface_HoldTime;
struct NetInterface_HoldTimeDefaultTypeInternal;
extern NetInterface_HoldTimeDefaultTypeInternal _NetInterface_HoldTime_default_instance_;
class NetInterface_HoldTime_HoldConfig;
struct NetInterface_HoldTime_HoldConfigDefaultTypeInternal;
extern NetInterface_HoldTime_HoldConfigDefaultTypeInternal _NetInterface_HoldTime_HoldConfig_default_instance_;
class NetInterface_HoldTime_HoldState;
struct NetInterface_HoldTime_HoldStateDefaultTypeInternal;
extern NetInterface_HoldTime_HoldStateDefaultTypeInternal _NetInterface_HoldTime_HoldState_default_instance_;
class NetInterface_Subinterfaces;
struct NetInterface_SubinterfacesDefaultTypeInternal;
extern NetInterface_SubinterfacesDefaultTypeInternal _NetInterface_Subinterfaces_default_instance_;
class NetInterface_Subinterfaces_Subinterface;
struct NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal;
extern NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal _NetInterface_Subinterfaces_Subinterface_default_instance_;
class NetInterface_Subinterfaces_Subinterface_SubifConfig;
struct NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal;
extern NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal _NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class UpdateNetInterfaceRequest;
struct UpdateNetInterfaceRequestDefaultTypeInternal;
extern UpdateNetInterfaceRequestDefaultTypeInternal _UpdateNetInterfaceRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::v1alpha1::Config* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::Config>(Arena*);
template<> ::opi_api::network::v1alpha1::Counters* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::Counters>(Arena*);
template<> ::opi_api::network::v1alpha1::GetNetInterfaceRequest* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::GetNetInterfaceRequest>(Arena*);
template<> ::opi_api::network::v1alpha1::ListNetInterfacesRequest* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::ListNetInterfacesRequest>(Arena*);
template<> ::opi_api::network::v1alpha1::ListNetInterfacesResponse* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::ListNetInterfacesResponse>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface_HoldTime* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_HoldTime>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_Subinterfaces>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface>(Arena*);
template<> ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig>(Arena*);
template<> ::opi_api::network::v1alpha1::State* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::State>(Arena*);
template<> ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::UpdateNetInterfaceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace v1alpha1 {

enum InterfaceType : int {
  INTERFACE_TYPE_UNSPECIFIED = 0,
  ETHERNET = 1,
  LOOPBACK = 2,
  InterfaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InterfaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InterfaceType_IsValid(int value);
constexpr InterfaceType InterfaceType_MIN = INTERFACE_TYPE_UNSPECIFIED;
constexpr InterfaceType InterfaceType_MAX = LOOPBACK;
constexpr int InterfaceType_ARRAYSIZE = InterfaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor();
template<typename T>
inline const std::string& InterfaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceType_descriptor(), enum_t_value);
}
inline bool InterfaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InterfaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceType>(
    InterfaceType_descriptor(), name, value);
}
enum OperState : int {
  OPER_STATE_UNSPECIFIED = 0,
  OPER_STATE_UP = 2,
  OPER_STATE_DOWN = 3,
  OPER_STATE_TESTING = 4,
  OPER_STATE_UNKNOWN = 5,
  OPER_STATE_DORMANT = 6,
  OPER_STATE_NOT_PRESENT = 7,
  OPER_STATE_LOWER_LAYER_DOWN = 8,
  OperState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperState_IsValid(int value);
constexpr OperState OperState_MIN = OPER_STATE_UNSPECIFIED;
constexpr OperState OperState_MAX = OPER_STATE_LOWER_LAYER_DOWN;
constexpr int OperState_ARRAYSIZE = OperState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperState_descriptor();
template<typename T>
inline const std::string& OperState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperState_descriptor(), enum_t_value);
}
inline bool OperState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperState>(
    OperState_descriptor(), name, value);
}
// ===================================================================

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 5,
    kTypeFieldNumber = 2,
    kMtuFieldNumber = 3,
    kLoopbackModeFieldNumber = 4,
    kEnabledFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  void clear_type();
  ::opi_api::network::v1alpha1::InterfaceType type() const;
  void set_type(::opi_api::network::v1alpha1::InterfaceType value);
  private:
  ::opi_api::network::v1alpha1::InterfaceType _internal_type() const;
  void _internal_set_type(::opi_api::network::v1alpha1::InterfaceType value);
  public:

  // uint32 mtu = 3;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // bool loopback_mode = 4;
  void clear_loopback_mode();
  bool loopback_mode() const;
  void set_loopback_mode(bool value);
  private:
  bool _internal_loopback_mode() const;
  void _internal_set_loopback_mode(bool value);
  public:

  // bool enabled = 6;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    int type_;
    uint32_t mtu_;
    bool loopback_mode_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Counters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.Counters) */ {
 public:
  inline Counters() : Counters(nullptr) {}
  ~Counters() override;
  explicit PROTOBUF_CONSTEXPR Counters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Counters(const Counters& from);
  Counters(Counters&& from) noexcept
    : Counters() {
    *this = ::std::move(from);
  }

  inline Counters& operator=(const Counters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Counters& operator=(Counters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Counters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Counters* internal_default_instance() {
    return reinterpret_cast<const Counters*>(
               &_Counters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Counters& a, Counters& b) {
    a.Swap(&b);
  }
  inline void Swap(Counters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Counters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Counters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Counters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Counters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Counters& from) {
    Counters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Counters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.Counters";
  }
  protected:
  explicit Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRxOctetsFieldNumber = 1,
    kRxPacketsFieldNumber = 2,
    kRxUnicastPktsFieldNumber = 3,
    kRxBroadcastPktsFieldNumber = 4,
    kRxMulticastPktsFieldNumber = 5,
    kRxDiscardsFieldNumber = 6,
    kRxErrorsFieldNumber = 7,
    kRxUnknownProtosFieldNumber = 8,
    kRxFcsErrorsFieldNumber = 9,
    kOutOctetsFieldNumber = 10,
    kOutPacketsFieldNumber = 11,
    kOutUnicastPktsFieldNumber = 12,
    kOutBroadcastPktsFieldNumber = 13,
    kOutMulticastPktsFieldNumber = 14,
    kOutDiscardsFieldNumber = 15,
    kOutErrorsFieldNumber = 16,
    kCarrierTransitionsFieldNumber = 17,
    kLastClearFieldNumber = 18,
  };
  // uint64 rx_octets = 1;
  void clear_rx_octets();
  uint64_t rx_octets() const;
  void set_rx_octets(uint64_t value);
  private:
  uint64_t _internal_rx_octets() const;
  void _internal_set_rx_octets(uint64_t value);
  public:

  // uint64 rx_packets = 2;
  void clear_rx_packets();
  uint64_t rx_packets() const;
  void set_rx_packets(uint64_t value);
  private:
  uint64_t _internal_rx_packets() const;
  void _internal_set_rx_packets(uint64_t value);
  public:

  // uint64 rx_unicast_pkts = 3;
  void clear_rx_unicast_pkts();
  uint64_t rx_unicast_pkts() const;
  void set_rx_unicast_pkts(uint64_t value);
  private:
  uint64_t _internal_rx_unicast_pkts() const;
  void _internal_set_rx_unicast_pkts(uint64_t value);
  public:

  // uint64 rx_broadcast_pkts = 4;
  void clear_rx_broadcast_pkts();
  uint64_t rx_broadcast_pkts() const;
  void set_rx_broadcast_pkts(uint64_t value);
  private:
  uint64_t _internal_rx_broadcast_pkts() const;
  void _internal_set_rx_broadcast_pkts(uint64_t value);
  public:

  // uint64 rx_multicast_pkts = 5;
  void clear_rx_multicast_pkts();
  uint64_t rx_multicast_pkts() const;
  void set_rx_multicast_pkts(uint64_t value);
  private:
  uint64_t _internal_rx_multicast_pkts() const;
  void _internal_set_rx_multicast_pkts(uint64_t value);
  public:

  // uint64 rx_discards = 6;
  void clear_rx_discards();
  uint64_t rx_discards() const;
  void set_rx_discards(uint64_t value);
  private:
  uint64_t _internal_rx_discards() const;
  void _internal_set_rx_discards(uint64_t value);
  public:

  // uint64 rx_errors = 7;
  void clear_rx_errors();
  uint64_t rx_errors() const;
  void set_rx_errors(uint64_t value);
  private:
  uint64_t _internal_rx_errors() const;
  void _internal_set_rx_errors(uint64_t value);
  public:

  // uint64 rx_unknown_protos = 8;
  void clear_rx_unknown_protos();
  uint64_t rx_unknown_protos() const;
  void set_rx_unknown_protos(uint64_t value);
  private:
  uint64_t _internal_rx_unknown_protos() const;
  void _internal_set_rx_unknown_protos(uint64_t value);
  public:

  // uint64 rx_fcs_errors = 9;
  void clear_rx_fcs_errors();
  uint64_t rx_fcs_errors() const;
  void set_rx_fcs_errors(uint64_t value);
  private:
  uint64_t _internal_rx_fcs_errors() const;
  void _internal_set_rx_fcs_errors(uint64_t value);
  public:

  // uint64 out_octets = 10;
  void clear_out_octets();
  uint64_t out_octets() const;
  void set_out_octets(uint64_t value);
  private:
  uint64_t _internal_out_octets() const;
  void _internal_set_out_octets(uint64_t value);
  public:

  // uint64 out_packets = 11;
  void clear_out_packets();
  uint64_t out_packets() const;
  void set_out_packets(uint64_t value);
  private:
  uint64_t _internal_out_packets() const;
  void _internal_set_out_packets(uint64_t value);
  public:

  // uint64 out_unicast_pkts = 12;
  void clear_out_unicast_pkts();
  uint64_t out_unicast_pkts() const;
  void set_out_unicast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_unicast_pkts() const;
  void _internal_set_out_unicast_pkts(uint64_t value);
  public:

  // uint64 out_broadcast_pkts = 13;
  void clear_out_broadcast_pkts();
  uint64_t out_broadcast_pkts() const;
  void set_out_broadcast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_broadcast_pkts() const;
  void _internal_set_out_broadcast_pkts(uint64_t value);
  public:

  // uint64 out_multicast_pkts = 14;
  void clear_out_multicast_pkts();
  uint64_t out_multicast_pkts() const;
  void set_out_multicast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_multicast_pkts() const;
  void _internal_set_out_multicast_pkts(uint64_t value);
  public:

  // uint64 out_discards = 15;
  void clear_out_discards();
  uint64_t out_discards() const;
  void set_out_discards(uint64_t value);
  private:
  uint64_t _internal_out_discards() const;
  void _internal_set_out_discards(uint64_t value);
  public:

  // uint64 out_errors = 16;
  void clear_out_errors();
  uint64_t out_errors() const;
  void set_out_errors(uint64_t value);
  private:
  uint64_t _internal_out_errors() const;
  void _internal_set_out_errors(uint64_t value);
  public:

  // uint64 carrier_transitions = 17;
  void clear_carrier_transitions();
  uint64_t carrier_transitions() const;
  void set_carrier_transitions(uint64_t value);
  private:
  uint64_t _internal_carrier_transitions() const;
  void _internal_set_carrier_transitions(uint64_t value);
  public:

  // uint64 last_clear = 18;
  void clear_last_clear();
  uint64_t last_clear() const;
  void set_last_clear(uint64_t value);
  private:
  uint64_t _internal_last_clear() const;
  void _internal_set_last_clear(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.Counters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t rx_octets_;
    uint64_t rx_packets_;
    uint64_t rx_unicast_pkts_;
    uint64_t rx_broadcast_pkts_;
    uint64_t rx_multicast_pkts_;
    uint64_t rx_discards_;
    uint64_t rx_errors_;
    uint64_t rx_unknown_protos_;
    uint64_t rx_fcs_errors_;
    uint64_t out_octets_;
    uint64_t out_packets_;
    uint64_t out_unicast_pkts_;
    uint64_t out_broadcast_pkts_;
    uint64_t out_multicast_pkts_;
    uint64_t out_discards_;
    uint64_t out_errors_;
    uint64_t carrier_transitions_;
    uint64_t last_clear_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit PROTOBUF_CONSTEXPR State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 5,
    kCountersFieldNumber = 14,
    kTypeFieldNumber = 2,
    kMtuFieldNumber = 3,
    kIfindexFieldNumber = 7,
    kAdminStateFieldNumber = 8,
    kLoopbackModeFieldNumber = 4,
    kEnabledFieldNumber = 6,
    kLogicalFieldNumber = 11,
    kManagementFieldNumber = 12,
    kOperStateFieldNumber = 9,
    kLastChangeFieldNumber = 10,
    kCpuFieldNumber = 13,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .opi_api.network.v1alpha1.Counters counters = 14;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::opi_api::network::v1alpha1::Counters& counters() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::Counters* release_counters();
  ::opi_api::network::v1alpha1::Counters* mutable_counters();
  void set_allocated_counters(::opi_api::network::v1alpha1::Counters* counters);
  private:
  const ::opi_api::network::v1alpha1::Counters& _internal_counters() const;
  ::opi_api::network::v1alpha1::Counters* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::opi_api::network::v1alpha1::Counters* counters);
  ::opi_api::network::v1alpha1::Counters* unsafe_arena_release_counters();

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  void clear_type();
  ::opi_api::network::v1alpha1::InterfaceType type() const;
  void set_type(::opi_api::network::v1alpha1::InterfaceType value);
  private:
  ::opi_api::network::v1alpha1::InterfaceType _internal_type() const;
  void _internal_set_type(::opi_api::network::v1alpha1::InterfaceType value);
  public:

  // uint32 mtu = 3;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // uint32 ifindex = 7;
  void clear_ifindex();
  uint32_t ifindex() const;
  void set_ifindex(uint32_t value);
  private:
  uint32_t _internal_ifindex() const;
  void _internal_set_ifindex(uint32_t value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
  void clear_admin_state();
  ::opi_api::network::opinetcommon::v1alpha1::AdminState admin_state() const;
  void set_admin_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::AdminState _internal_admin_state() const;
  void _internal_set_admin_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value);
  public:

  // bool loopback_mode = 4;
  void clear_loopback_mode();
  bool loopback_mode() const;
  void set_loopback_mode(bool value);
  private:
  bool _internal_loopback_mode() const;
  void _internal_set_loopback_mode(bool value);
  public:

  // bool enabled = 6;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool logical = 11;
  void clear_logical();
  bool logical() const;
  void set_logical(bool value);
  private:
  bool _internal_logical() const;
  void _internal_set_logical(bool value);
  public:

  // bool management = 12;
  void clear_management();
  bool management() const;
  void set_management(bool value);
  private:
  bool _internal_management() const;
  void _internal_set_management(bool value);
  public:

  // .opi_api.network.v1alpha1.OperState oper_state = 9;
  void clear_oper_state();
  ::opi_api::network::v1alpha1::OperState oper_state() const;
  void set_oper_state(::opi_api::network::v1alpha1::OperState value);
  private:
  ::opi_api::network::v1alpha1::OperState _internal_oper_state() const;
  void _internal_set_oper_state(::opi_api::network::v1alpha1::OperState value);
  public:

  // uint64 last_change = 10;
  void clear_last_change();
  uint64_t last_change() const;
  void set_last_change(uint64_t value);
  private:
  uint64_t _internal_last_change() const;
  void _internal_set_last_change(uint64_t value);
  public:

  // bool cpu = 13;
  void clear_cpu();
  bool cpu() const;
  void set_cpu(bool value);
  private:
  bool _internal_cpu() const;
  void _internal_set_cpu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::opi_api::network::v1alpha1::Counters* counters_;
    int type_;
    uint32_t mtu_;
    uint32_t ifindex_;
    int admin_state_;
    bool loopback_mode_;
    bool enabled_;
    bool logical_;
    bool management_;
    int oper_state_;
    uint64_t last_change_;
    bool cpu_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface_HoldTime_HoldConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig) */ {
 public:
  inline NetInterface_HoldTime_HoldConfig() : NetInterface_HoldTime_HoldConfig(nullptr) {}
  ~NetInterface_HoldTime_HoldConfig() override;
  explicit PROTOBUF_CONSTEXPR NetInterface_HoldTime_HoldConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface_HoldTime_HoldConfig(const NetInterface_HoldTime_HoldConfig& from);
  NetInterface_HoldTime_HoldConfig(NetInterface_HoldTime_HoldConfig&& from) noexcept
    : NetInterface_HoldTime_HoldConfig() {
    *this = ::std::move(from);
  }

  inline NetInterface_HoldTime_HoldConfig& operator=(const NetInterface_HoldTime_HoldConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface_HoldTime_HoldConfig& operator=(NetInterface_HoldTime_HoldConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface_HoldTime_HoldConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface_HoldTime_HoldConfig* internal_default_instance() {
    return reinterpret_cast<const NetInterface_HoldTime_HoldConfig*>(
               &_NetInterface_HoldTime_HoldConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetInterface_HoldTime_HoldConfig& a, NetInterface_HoldTime_HoldConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface_HoldTime_HoldConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface_HoldTime_HoldConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface_HoldTime_HoldConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface_HoldTime_HoldConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface_HoldTime_HoldConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface_HoldTime_HoldConfig& from) {
    NetInterface_HoldTime_HoldConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface_HoldTime_HoldConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig";
  }
  protected:
  explicit NetInterface_HoldTime_HoldConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
  };
  // uint32 up = 1;
  void clear_up();
  uint32_t up() const;
  void set_up(uint32_t value);
  private:
  uint32_t _internal_up() const;
  void _internal_set_up(uint32_t value);
  public:

  // uint32 down = 2;
  void clear_down();
  uint32_t down() const;
  void set_down(uint32_t value);
  private:
  uint32_t _internal_down() const;
  void _internal_set_down(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t up_;
    uint32_t down_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface_HoldTime_HoldState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState) */ {
 public:
  inline NetInterface_HoldTime_HoldState() : NetInterface_HoldTime_HoldState(nullptr) {}
  ~NetInterface_HoldTime_HoldState() override;
  explicit PROTOBUF_CONSTEXPR NetInterface_HoldTime_HoldState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface_HoldTime_HoldState(const NetInterface_HoldTime_HoldState& from);
  NetInterface_HoldTime_HoldState(NetInterface_HoldTime_HoldState&& from) noexcept
    : NetInterface_HoldTime_HoldState() {
    *this = ::std::move(from);
  }

  inline NetInterface_HoldTime_HoldState& operator=(const NetInterface_HoldTime_HoldState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface_HoldTime_HoldState& operator=(NetInterface_HoldTime_HoldState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface_HoldTime_HoldState& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface_HoldTime_HoldState* internal_default_instance() {
    return reinterpret_cast<const NetInterface_HoldTime_HoldState*>(
               &_NetInterface_HoldTime_HoldState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetInterface_HoldTime_HoldState& a, NetInterface_HoldTime_HoldState& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface_HoldTime_HoldState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface_HoldTime_HoldState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface_HoldTime_HoldState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface_HoldTime_HoldState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface_HoldTime_HoldState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface_HoldTime_HoldState& from) {
    NetInterface_HoldTime_HoldState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface_HoldTime_HoldState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState";
  }
  protected:
  explicit NetInterface_HoldTime_HoldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
  };
  // uint32 up = 1;
  void clear_up();
  uint32_t up() const;
  void set_up(uint32_t value);
  private:
  uint32_t _internal_up() const;
  void _internal_set_up(uint32_t value);
  public:

  // uint32 down = 2;
  void clear_down();
  uint32_t down() const;
  void set_down(uint32_t value);
  private:
  uint32_t _internal_down() const;
  void _internal_set_down(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t up_;
    uint32_t down_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface_HoldTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface.HoldTime) */ {
 public:
  inline NetInterface_HoldTime() : NetInterface_HoldTime(nullptr) {}
  ~NetInterface_HoldTime() override;
  explicit PROTOBUF_CONSTEXPR NetInterface_HoldTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface_HoldTime(const NetInterface_HoldTime& from);
  NetInterface_HoldTime(NetInterface_HoldTime&& from) noexcept
    : NetInterface_HoldTime() {
    *this = ::std::move(from);
  }

  inline NetInterface_HoldTime& operator=(const NetInterface_HoldTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface_HoldTime& operator=(NetInterface_HoldTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface_HoldTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface_HoldTime* internal_default_instance() {
    return reinterpret_cast<const NetInterface_HoldTime*>(
               &_NetInterface_HoldTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetInterface_HoldTime& a, NetInterface_HoldTime& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface_HoldTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface_HoldTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface_HoldTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface_HoldTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface_HoldTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface_HoldTime& from) {
    NetInterface_HoldTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface_HoldTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface.HoldTime";
  }
  protected:
  explicit NetInterface_HoldTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInterface_HoldTime_HoldConfig HoldConfig;
  typedef NetInterface_HoldTime_HoldState HoldState;

  // accessors -------------------------------------------------------

  enum : int {
    kHoldConfigFieldNumber = 1,
    kHoldStateFieldNumber = 2,
  };
  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
  bool has_hold_config() const;
  private:
  bool _internal_has_hold_config() const;
  public:
  void clear_hold_config();
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig& hold_config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* release_hold_config();
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* mutable_hold_config();
  void set_allocated_hold_config(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* hold_config);
  private:
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig& _internal_hold_config() const;
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* _internal_mutable_hold_config();
  public:
  void unsafe_arena_set_allocated_hold_config(
      ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* hold_config);
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* unsafe_arena_release_hold_config();

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
  bool has_hold_state() const;
  private:
  bool _internal_has_hold_state() const;
  public:
  void clear_hold_state();
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState& hold_state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* release_hold_state();
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* mutable_hold_state();
  void set_allocated_hold_state(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* hold_state);
  private:
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState& _internal_hold_state() const;
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* _internal_mutable_hold_state();
  public:
  void unsafe_arena_set_allocated_hold_state(
      ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* hold_state);
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* unsafe_arena_release_hold_state();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface.HoldTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* hold_config_;
    ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* hold_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface_Subinterfaces_Subinterface_SubifConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig) */ {
 public:
  inline NetInterface_Subinterfaces_Subinterface_SubifConfig() : NetInterface_Subinterfaces_Subinterface_SubifConfig(nullptr) {}
  ~NetInterface_Subinterfaces_Subinterface_SubifConfig() override;
  explicit PROTOBUF_CONSTEXPR NetInterface_Subinterfaces_Subinterface_SubifConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface_Subinterfaces_Subinterface_SubifConfig(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from);
  NetInterface_Subinterfaces_Subinterface_SubifConfig(NetInterface_Subinterfaces_Subinterface_SubifConfig&& from) noexcept
    : NetInterface_Subinterfaces_Subinterface_SubifConfig() {
    *this = ::std::move(from);
  }

  inline NetInterface_Subinterfaces_Subinterface_SubifConfig& operator=(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface_Subinterfaces_Subinterface_SubifConfig& operator=(NetInterface_Subinterfaces_Subinterface_SubifConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface_Subinterfaces_Subinterface_SubifConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface_Subinterfaces_Subinterface_SubifConfig* internal_default_instance() {
    return reinterpret_cast<const NetInterface_Subinterfaces_Subinterface_SubifConfig*>(
               &_NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetInterface_Subinterfaces_Subinterface_SubifConfig& a, NetInterface_Subinterfaces_Subinterface_SubifConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface_Subinterfaces_Subinterface_SubifConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface_Subinterfaces_Subinterface_SubifConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface_Subinterfaces_Subinterface_SubifConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface_Subinterfaces_Subinterface_SubifConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface_Subinterfaces_Subinterface_SubifConfig& from) {
    NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface_Subinterfaces_Subinterface_SubifConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig";
  }
  protected:
  explicit NetInterface_Subinterfaces_Subinterface_SubifConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kIndexFieldNumber = 1,
    kEnabledFieldNumber = 3,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 index = 1;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint64_t index_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface_Subinterfaces_Subinterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface) */ {
 public:
  inline NetInterface_Subinterfaces_Subinterface() : NetInterface_Subinterfaces_Subinterface(nullptr) {}
  ~NetInterface_Subinterfaces_Subinterface() override;
  explicit PROTOBUF_CONSTEXPR NetInterface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface_Subinterfaces_Subinterface(const NetInterface_Subinterfaces_Subinterface& from);
  NetInterface_Subinterfaces_Subinterface(NetInterface_Subinterfaces_Subinterface&& from) noexcept
    : NetInterface_Subinterfaces_Subinterface() {
    *this = ::std::move(from);
  }

  inline NetInterface_Subinterfaces_Subinterface& operator=(const NetInterface_Subinterfaces_Subinterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface_Subinterfaces_Subinterface& operator=(NetInterface_Subinterfaces_Subinterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface_Subinterfaces_Subinterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface_Subinterfaces_Subinterface* internal_default_instance() {
    return reinterpret_cast<const NetInterface_Subinterfaces_Subinterface*>(
               &_NetInterface_Subinterfaces_Subinterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetInterface_Subinterfaces_Subinterface& a, NetInterface_Subinterfaces_Subinterface& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface_Subinterfaces_Subinterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface_Subinterfaces_Subinterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface_Subinterfaces_Subinterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface_Subinterfaces_Subinterface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface_Subinterfaces_Subinterface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface_Subinterfaces_Subinterface& from) {
    NetInterface_Subinterfaces_Subinterface::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface_Subinterfaces_Subinterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface";
  }
  protected:
  explicit NetInterface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInterface_Subinterfaces_Subinterface_SubifConfig SubifConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kSubifConfigFieldNumber = 2,
    kStateFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
  bool has_subif_config() const;
  private:
  bool _internal_has_subif_config() const;
  public:
  void clear_subif_config();
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig& subif_config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* release_subif_config();
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* mutable_subif_config();
  void set_allocated_subif_config(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* subif_config);
  private:
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig& _internal_subif_config() const;
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* _internal_mutable_subif_config();
  public:
  void unsafe_arena_set_allocated_subif_config(
      ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* subif_config);
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* unsafe_arena_release_subif_config();

  // .opi_api.network.v1alpha1.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::v1alpha1::State& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::State* release_state();
  ::opi_api::network::v1alpha1::State* mutable_state();
  void set_allocated_state(::opi_api::network::v1alpha1::State* state);
  private:
  const ::opi_api::network::v1alpha1::State& _internal_state() const;
  ::opi_api::network::v1alpha1::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::v1alpha1::State* state);
  ::opi_api::network::v1alpha1::State* unsafe_arena_release_state();

  // int64 index = 1;
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* subif_config_;
    ::opi_api::network::v1alpha1::State* state_;
    int64_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface_Subinterfaces final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface.Subinterfaces) */ {
 public:
  inline NetInterface_Subinterfaces() : NetInterface_Subinterfaces(nullptr) {}
  ~NetInterface_Subinterfaces() override;
  explicit PROTOBUF_CONSTEXPR NetInterface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface_Subinterfaces(const NetInterface_Subinterfaces& from);
  NetInterface_Subinterfaces(NetInterface_Subinterfaces&& from) noexcept
    : NetInterface_Subinterfaces() {
    *this = ::std::move(from);
  }

  inline NetInterface_Subinterfaces& operator=(const NetInterface_Subinterfaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface_Subinterfaces& operator=(NetInterface_Subinterfaces&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface_Subinterfaces& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface_Subinterfaces* internal_default_instance() {
    return reinterpret_cast<const NetInterface_Subinterfaces*>(
               &_NetInterface_Subinterfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetInterface_Subinterfaces& a, NetInterface_Subinterfaces& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface_Subinterfaces* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface_Subinterfaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface_Subinterfaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface_Subinterfaces>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface_Subinterfaces& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface_Subinterfaces& from) {
    NetInterface_Subinterfaces::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface_Subinterfaces* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface.Subinterfaces";
  }
  protected:
  explicit NetInterface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInterface_Subinterfaces_Subinterface Subinterface;

  // accessors -------------------------------------------------------

  enum : int {
    kSubinterfaceFieldNumber = 2,
  };
  // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
  int subinterface_size() const;
  private:
  int _internal_subinterface_size() const;
  public:
  void clear_subinterface();
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* mutable_subinterface(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >*
      mutable_subinterface();
  private:
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface& _internal_subinterface(int index) const;
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* _internal_add_subinterface();
  public:
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface& subinterface(int index) const;
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* add_subinterface();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >&
      subinterface() const;

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface > subinterface_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.NetInterface) */ {
 public:
  inline NetInterface() : NetInterface(nullptr) {}
  ~NetInterface() override;
  explicit PROTOBUF_CONSTEXPR NetInterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterface(const NetInterface& from);
  NetInterface(NetInterface&& from) noexcept
    : NetInterface() {
    *this = ::std::move(from);
  }

  inline NetInterface& operator=(const NetInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterface& operator=(NetInterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterface* internal_default_instance() {
    return reinterpret_cast<const NetInterface*>(
               &_NetInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetInterface& a, NetInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInterface& from) {
    NetInterface::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.NetInterface";
  }
  protected:
  explicit NetInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInterface_HoldTime HoldTime;
  typedef NetInterface_Subinterfaces Subinterfaces;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
    kHoldtimeFieldNumber = 4,
    kSubinterfacesFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.network.v1alpha1.Config config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::opi_api::network::v1alpha1::Config& config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::Config* release_config();
  ::opi_api::network::v1alpha1::Config* mutable_config();
  void set_allocated_config(::opi_api::network::v1alpha1::Config* config);
  private:
  const ::opi_api::network::v1alpha1::Config& _internal_config() const;
  ::opi_api::network::v1alpha1::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::opi_api::network::v1alpha1::Config* config);
  ::opi_api::network::v1alpha1::Config* unsafe_arena_release_config();

  // .opi_api.network.v1alpha1.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::v1alpha1::State& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::State* release_state();
  ::opi_api::network::v1alpha1::State* mutable_state();
  void set_allocated_state(::opi_api::network::v1alpha1::State* state);
  private:
  const ::opi_api::network::v1alpha1::State& _internal_state() const;
  ::opi_api::network::v1alpha1::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::v1alpha1::State* state);
  ::opi_api::network::v1alpha1::State* unsafe_arena_release_state();

  // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
  bool has_holdtime() const;
  private:
  bool _internal_has_holdtime() const;
  public:
  void clear_holdtime();
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime& holdtime() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::NetInterface_HoldTime* release_holdtime();
  ::opi_api::network::v1alpha1::NetInterface_HoldTime* mutable_holdtime();
  void set_allocated_holdtime(::opi_api::network::v1alpha1::NetInterface_HoldTime* holdtime);
  private:
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime& _internal_holdtime() const;
  ::opi_api::network::v1alpha1::NetInterface_HoldTime* _internal_mutable_holdtime();
  public:
  void unsafe_arena_set_allocated_holdtime(
      ::opi_api::network::v1alpha1::NetInterface_HoldTime* holdtime);
  ::opi_api::network::v1alpha1::NetInterface_HoldTime* unsafe_arena_release_holdtime();

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
  bool has_subinterfaces() const;
  private:
  bool _internal_has_subinterfaces() const;
  public:
  void clear_subinterfaces();
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces& subinterfaces() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* release_subinterfaces();
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* mutable_subinterfaces();
  void set_allocated_subinterfaces(::opi_api::network::v1alpha1::NetInterface_Subinterfaces* subinterfaces);
  private:
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces& _internal_subinterfaces() const;
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* _internal_mutable_subinterfaces();
  public:
  void unsafe_arena_set_allocated_subinterfaces(
      ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* subinterfaces);
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* unsafe_arena_release_subinterfaces();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.NetInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::opi_api::network::v1alpha1::Config* config_;
    ::opi_api::network::v1alpha1::State* state_;
    ::opi_api::network::v1alpha1::NetInterface_HoldTime* holdtime_;
    ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* subinterfaces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class GetNetInterfaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.GetNetInterfaceRequest) */ {
 public:
  inline GetNetInterfaceRequest() : GetNetInterfaceRequest(nullptr) {}
  ~GetNetInterfaceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNetInterfaceRequest(const GetNetInterfaceRequest& from);
  GetNetInterfaceRequest(GetNetInterfaceRequest&& from) noexcept
    : GetNetInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline GetNetInterfaceRequest& operator=(const GetNetInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetInterfaceRequest& operator=(GetNetInterfaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNetInterfaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNetInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetInterfaceRequest*>(
               &_GetNetInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetNetInterfaceRequest& a, GetNetInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetInterfaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNetInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNetInterfaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNetInterfaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNetInterfaceRequest& from) {
    GetNetInterfaceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetInterfaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.GetNetInterfaceRequest";
  }
  protected:
  explicit GetNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.GetNetInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class ListNetInterfacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.ListNetInterfacesRequest) */ {
 public:
  inline ListNetInterfacesRequest() : ListNetInterfacesRequest(nullptr) {}
  ~ListNetInterfacesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListNetInterfacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNetInterfacesRequest(const ListNetInterfacesRequest& from);
  ListNetInterfacesRequest(ListNetInterfacesRequest&& from) noexcept
    : ListNetInterfacesRequest() {
    *this = ::std::move(from);
  }

  inline ListNetInterfacesRequest& operator=(const ListNetInterfacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNetInterfacesRequest& operator=(ListNetInterfacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNetInterfacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNetInterfacesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNetInterfacesRequest*>(
               &_ListNetInterfacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListNetInterfacesRequest& a, ListNetInterfacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNetInterfacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNetInterfacesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNetInterfacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNetInterfacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNetInterfacesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNetInterfacesRequest& from) {
    ListNetInterfacesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNetInterfacesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.ListNetInterfacesRequest";
  }
  protected:
  explicit ListNetInterfacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.ListNetInterfacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class ListNetInterfacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.ListNetInterfacesResponse) */ {
 public:
  inline ListNetInterfacesResponse() : ListNetInterfacesResponse(nullptr) {}
  ~ListNetInterfacesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListNetInterfacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNetInterfacesResponse(const ListNetInterfacesResponse& from);
  ListNetInterfacesResponse(ListNetInterfacesResponse&& from) noexcept
    : ListNetInterfacesResponse() {
    *this = ::std::move(from);
  }

  inline ListNetInterfacesResponse& operator=(const ListNetInterfacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNetInterfacesResponse& operator=(ListNetInterfacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNetInterfacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNetInterfacesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNetInterfacesResponse*>(
               &_ListNetInterfacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListNetInterfacesResponse& a, ListNetInterfacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNetInterfacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNetInterfacesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNetInterfacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNetInterfacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNetInterfacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNetInterfacesResponse& from) {
    ListNetInterfacesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNetInterfacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.ListNetInterfacesResponse";
  }
  protected:
  explicit ListNetInterfacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetInterfacesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
  int net_interfaces_size() const;
  private:
  int _internal_net_interfaces_size() const;
  public:
  void clear_net_interfaces();
  ::opi_api::network::v1alpha1::NetInterface* mutable_net_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface >*
      mutable_net_interfaces();
  private:
  const ::opi_api::network::v1alpha1::NetInterface& _internal_net_interfaces(int index) const;
  ::opi_api::network::v1alpha1::NetInterface* _internal_add_net_interfaces();
  public:
  const ::opi_api::network::v1alpha1::NetInterface& net_interfaces(int index) const;
  ::opi_api::network::v1alpha1::NetInterface* add_net_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface >&
      net_interfaces() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.ListNetInterfacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface > net_interfaces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class UpdateNetInterfaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.UpdateNetInterfaceRequest) */ {
 public:
  inline UpdateNetInterfaceRequest() : UpdateNetInterfaceRequest(nullptr) {}
  ~UpdateNetInterfaceRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNetInterfaceRequest(const UpdateNetInterfaceRequest& from);
  UpdateNetInterfaceRequest(UpdateNetInterfaceRequest&& from) noexcept
    : UpdateNetInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNetInterfaceRequest& operator=(const UpdateNetInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNetInterfaceRequest& operator=(UpdateNetInterfaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNetInterfaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNetInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNetInterfaceRequest*>(
               &_UpdateNetInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateNetInterfaceRequest& a, UpdateNetInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNetInterfaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNetInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNetInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNetInterfaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNetInterfaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateNetInterfaceRequest& from) {
    UpdateNetInterfaceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNetInterfaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.UpdateNetInterfaceRequest";
  }
  protected:
  explicit UpdateNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetInterfaceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
  bool has_net_interface() const;
  private:
  bool _internal_has_net_interface() const;
  public:
  void clear_net_interface();
  const ::opi_api::network::v1alpha1::NetInterface& net_interface() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::NetInterface* release_net_interface();
  ::opi_api::network::v1alpha1::NetInterface* mutable_net_interface();
  void set_allocated_net_interface(::opi_api::network::v1alpha1::NetInterface* net_interface);
  private:
  const ::opi_api::network::v1alpha1::NetInterface& _internal_net_interface() const;
  ::opi_api::network::v1alpha1::NetInterface* _internal_mutable_net_interface();
  public:
  void unsafe_arena_set_allocated_net_interface(
      ::opi_api::network::v1alpha1::NetInterface* net_interface);
  ::opi_api::network::v1alpha1::NetInterface* unsafe_arena_release_net_interface();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::network::v1alpha1::NetInterface* net_interface_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// string name = 1;
inline void Config::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Config::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Config.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Config.name)
}
inline std::string* Config::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.Config.name)
  return _s;
}
inline const std::string& Config::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Config::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.Config.name)
  return _impl_.name_.Release();
}
inline void Config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.Config.name)
}

// .opi_api.network.v1alpha1.InterfaceType type = 2;
inline void Config::clear_type() {
  _impl_.type_ = 0;
}
inline ::opi_api::network::v1alpha1::InterfaceType Config::_internal_type() const {
  return static_cast< ::opi_api::network::v1alpha1::InterfaceType >(_impl_.type_);
}
inline ::opi_api::network::v1alpha1::InterfaceType Config::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Config.type)
  return _internal_type();
}
inline void Config::_internal_set_type(::opi_api::network::v1alpha1::InterfaceType value) {
  
  _impl_.type_ = value;
}
inline void Config::set_type(::opi_api::network::v1alpha1::InterfaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Config.type)
}

// uint32 mtu = 3;
inline void Config::clear_mtu() {
  _impl_.mtu_ = 0u;
}
inline uint32_t Config::_internal_mtu() const {
  return _impl_.mtu_;
}
inline uint32_t Config::mtu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Config.mtu)
  return _internal_mtu();
}
inline void Config::_internal_set_mtu(uint32_t value) {
  
  _impl_.mtu_ = value;
}
inline void Config::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Config.mtu)
}

// bool loopback_mode = 4;
inline void Config::clear_loopback_mode() {
  _impl_.loopback_mode_ = false;
}
inline bool Config::_internal_loopback_mode() const {
  return _impl_.loopback_mode_;
}
inline bool Config::loopback_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Config.loopback_mode)
  return _internal_loopback_mode();
}
inline void Config::_internal_set_loopback_mode(bool value) {
  
  _impl_.loopback_mode_ = value;
}
inline void Config::set_loopback_mode(bool value) {
  _internal_set_loopback_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Config.loopback_mode)
}

// string description = 5;
inline void Config::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Config::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Config.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Config.description)
}
inline std::string* Config::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.Config.description)
  return _s;
}
inline const std::string& Config::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Config::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.Config.description)
  return _impl_.description_.Release();
}
inline void Config::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.Config.description)
}

// bool enabled = 6;
inline void Config::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool Config::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool Config::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Config.enabled)
  return _internal_enabled();
}
inline void Config::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void Config::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Config.enabled)
}

// -------------------------------------------------------------------

// Counters

// uint64 rx_octets = 1;
inline void Counters::clear_rx_octets() {
  _impl_.rx_octets_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_octets() const {
  return _impl_.rx_octets_;
}
inline uint64_t Counters::rx_octets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_octets)
  return _internal_rx_octets();
}
inline void Counters::_internal_set_rx_octets(uint64_t value) {
  
  _impl_.rx_octets_ = value;
}
inline void Counters::set_rx_octets(uint64_t value) {
  _internal_set_rx_octets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_octets)
}

// uint64 rx_packets = 2;
inline void Counters::clear_rx_packets() {
  _impl_.rx_packets_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_packets() const {
  return _impl_.rx_packets_;
}
inline uint64_t Counters::rx_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_packets)
  return _internal_rx_packets();
}
inline void Counters::_internal_set_rx_packets(uint64_t value) {
  
  _impl_.rx_packets_ = value;
}
inline void Counters::set_rx_packets(uint64_t value) {
  _internal_set_rx_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_packets)
}

// uint64 rx_unicast_pkts = 3;
inline void Counters::clear_rx_unicast_pkts() {
  _impl_.rx_unicast_pkts_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_unicast_pkts() const {
  return _impl_.rx_unicast_pkts_;
}
inline uint64_t Counters::rx_unicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_unicast_pkts)
  return _internal_rx_unicast_pkts();
}
inline void Counters::_internal_set_rx_unicast_pkts(uint64_t value) {
  
  _impl_.rx_unicast_pkts_ = value;
}
inline void Counters::set_rx_unicast_pkts(uint64_t value) {
  _internal_set_rx_unicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_unicast_pkts)
}

// uint64 rx_broadcast_pkts = 4;
inline void Counters::clear_rx_broadcast_pkts() {
  _impl_.rx_broadcast_pkts_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_broadcast_pkts() const {
  return _impl_.rx_broadcast_pkts_;
}
inline uint64_t Counters::rx_broadcast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_broadcast_pkts)
  return _internal_rx_broadcast_pkts();
}
inline void Counters::_internal_set_rx_broadcast_pkts(uint64_t value) {
  
  _impl_.rx_broadcast_pkts_ = value;
}
inline void Counters::set_rx_broadcast_pkts(uint64_t value) {
  _internal_set_rx_broadcast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_broadcast_pkts)
}

// uint64 rx_multicast_pkts = 5;
inline void Counters::clear_rx_multicast_pkts() {
  _impl_.rx_multicast_pkts_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_multicast_pkts() const {
  return _impl_.rx_multicast_pkts_;
}
inline uint64_t Counters::rx_multicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_multicast_pkts)
  return _internal_rx_multicast_pkts();
}
inline void Counters::_internal_set_rx_multicast_pkts(uint64_t value) {
  
  _impl_.rx_multicast_pkts_ = value;
}
inline void Counters::set_rx_multicast_pkts(uint64_t value) {
  _internal_set_rx_multicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_multicast_pkts)
}

// uint64 rx_discards = 6;
inline void Counters::clear_rx_discards() {
  _impl_.rx_discards_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_discards() const {
  return _impl_.rx_discards_;
}
inline uint64_t Counters::rx_discards() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_discards)
  return _internal_rx_discards();
}
inline void Counters::_internal_set_rx_discards(uint64_t value) {
  
  _impl_.rx_discards_ = value;
}
inline void Counters::set_rx_discards(uint64_t value) {
  _internal_set_rx_discards(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_discards)
}

// uint64 rx_errors = 7;
inline void Counters::clear_rx_errors() {
  _impl_.rx_errors_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_errors() const {
  return _impl_.rx_errors_;
}
inline uint64_t Counters::rx_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_errors)
  return _internal_rx_errors();
}
inline void Counters::_internal_set_rx_errors(uint64_t value) {
  
  _impl_.rx_errors_ = value;
}
inline void Counters::set_rx_errors(uint64_t value) {
  _internal_set_rx_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_errors)
}

// uint64 rx_unknown_protos = 8;
inline void Counters::clear_rx_unknown_protos() {
  _impl_.rx_unknown_protos_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_unknown_protos() const {
  return _impl_.rx_unknown_protos_;
}
inline uint64_t Counters::rx_unknown_protos() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_unknown_protos)
  return _internal_rx_unknown_protos();
}
inline void Counters::_internal_set_rx_unknown_protos(uint64_t value) {
  
  _impl_.rx_unknown_protos_ = value;
}
inline void Counters::set_rx_unknown_protos(uint64_t value) {
  _internal_set_rx_unknown_protos(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_unknown_protos)
}

// uint64 rx_fcs_errors = 9;
inline void Counters::clear_rx_fcs_errors() {
  _impl_.rx_fcs_errors_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_rx_fcs_errors() const {
  return _impl_.rx_fcs_errors_;
}
inline uint64_t Counters::rx_fcs_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.rx_fcs_errors)
  return _internal_rx_fcs_errors();
}
inline void Counters::_internal_set_rx_fcs_errors(uint64_t value) {
  
  _impl_.rx_fcs_errors_ = value;
}
inline void Counters::set_rx_fcs_errors(uint64_t value) {
  _internal_set_rx_fcs_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.rx_fcs_errors)
}

// uint64 out_octets = 10;
inline void Counters::clear_out_octets() {
  _impl_.out_octets_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_octets() const {
  return _impl_.out_octets_;
}
inline uint64_t Counters::out_octets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_octets)
  return _internal_out_octets();
}
inline void Counters::_internal_set_out_octets(uint64_t value) {
  
  _impl_.out_octets_ = value;
}
inline void Counters::set_out_octets(uint64_t value) {
  _internal_set_out_octets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_octets)
}

// uint64 out_packets = 11;
inline void Counters::clear_out_packets() {
  _impl_.out_packets_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_packets() const {
  return _impl_.out_packets_;
}
inline uint64_t Counters::out_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_packets)
  return _internal_out_packets();
}
inline void Counters::_internal_set_out_packets(uint64_t value) {
  
  _impl_.out_packets_ = value;
}
inline void Counters::set_out_packets(uint64_t value) {
  _internal_set_out_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_packets)
}

// uint64 out_unicast_pkts = 12;
inline void Counters::clear_out_unicast_pkts() {
  _impl_.out_unicast_pkts_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_unicast_pkts() const {
  return _impl_.out_unicast_pkts_;
}
inline uint64_t Counters::out_unicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_unicast_pkts)
  return _internal_out_unicast_pkts();
}
inline void Counters::_internal_set_out_unicast_pkts(uint64_t value) {
  
  _impl_.out_unicast_pkts_ = value;
}
inline void Counters::set_out_unicast_pkts(uint64_t value) {
  _internal_set_out_unicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_unicast_pkts)
}

// uint64 out_broadcast_pkts = 13;
inline void Counters::clear_out_broadcast_pkts() {
  _impl_.out_broadcast_pkts_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_broadcast_pkts() const {
  return _impl_.out_broadcast_pkts_;
}
inline uint64_t Counters::out_broadcast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_broadcast_pkts)
  return _internal_out_broadcast_pkts();
}
inline void Counters::_internal_set_out_broadcast_pkts(uint64_t value) {
  
  _impl_.out_broadcast_pkts_ = value;
}
inline void Counters::set_out_broadcast_pkts(uint64_t value) {
  _internal_set_out_broadcast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_broadcast_pkts)
}

// uint64 out_multicast_pkts = 14;
inline void Counters::clear_out_multicast_pkts() {
  _impl_.out_multicast_pkts_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_multicast_pkts() const {
  return _impl_.out_multicast_pkts_;
}
inline uint64_t Counters::out_multicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_multicast_pkts)
  return _internal_out_multicast_pkts();
}
inline void Counters::_internal_set_out_multicast_pkts(uint64_t value) {
  
  _impl_.out_multicast_pkts_ = value;
}
inline void Counters::set_out_multicast_pkts(uint64_t value) {
  _internal_set_out_multicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_multicast_pkts)
}

// uint64 out_discards = 15;
inline void Counters::clear_out_discards() {
  _impl_.out_discards_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_discards() const {
  return _impl_.out_discards_;
}
inline uint64_t Counters::out_discards() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_discards)
  return _internal_out_discards();
}
inline void Counters::_internal_set_out_discards(uint64_t value) {
  
  _impl_.out_discards_ = value;
}
inline void Counters::set_out_discards(uint64_t value) {
  _internal_set_out_discards(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_discards)
}

// uint64 out_errors = 16;
inline void Counters::clear_out_errors() {
  _impl_.out_errors_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_out_errors() const {
  return _impl_.out_errors_;
}
inline uint64_t Counters::out_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.out_errors)
  return _internal_out_errors();
}
inline void Counters::_internal_set_out_errors(uint64_t value) {
  
  _impl_.out_errors_ = value;
}
inline void Counters::set_out_errors(uint64_t value) {
  _internal_set_out_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.out_errors)
}

// uint64 carrier_transitions = 17;
inline void Counters::clear_carrier_transitions() {
  _impl_.carrier_transitions_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_carrier_transitions() const {
  return _impl_.carrier_transitions_;
}
inline uint64_t Counters::carrier_transitions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.carrier_transitions)
  return _internal_carrier_transitions();
}
inline void Counters::_internal_set_carrier_transitions(uint64_t value) {
  
  _impl_.carrier_transitions_ = value;
}
inline void Counters::set_carrier_transitions(uint64_t value) {
  _internal_set_carrier_transitions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.carrier_transitions)
}

// uint64 last_clear = 18;
inline void Counters::clear_last_clear() {
  _impl_.last_clear_ = uint64_t{0u};
}
inline uint64_t Counters::_internal_last_clear() const {
  return _impl_.last_clear_;
}
inline uint64_t Counters::last_clear() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.Counters.last_clear)
  return _internal_last_clear();
}
inline void Counters::_internal_set_last_clear(uint64_t value) {
  
  _impl_.last_clear_ = value;
}
inline void Counters::set_last_clear(uint64_t value) {
  _internal_set_last_clear(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.Counters.last_clear)
}

// -------------------------------------------------------------------

// State

// string name = 1;
inline void State::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& State::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.name)
}
inline std::string* State::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.State.name)
  return _s;
}
inline const std::string& State::_internal_name() const {
  return _impl_.name_.Get();
}
inline void State::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* State::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.State.name)
  return _impl_.name_.Release();
}
inline void State::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.State.name)
}

// .opi_api.network.v1alpha1.InterfaceType type = 2;
inline void State::clear_type() {
  _impl_.type_ = 0;
}
inline ::opi_api::network::v1alpha1::InterfaceType State::_internal_type() const {
  return static_cast< ::opi_api::network::v1alpha1::InterfaceType >(_impl_.type_);
}
inline ::opi_api::network::v1alpha1::InterfaceType State::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.type)
  return _internal_type();
}
inline void State::_internal_set_type(::opi_api::network::v1alpha1::InterfaceType value) {
  
  _impl_.type_ = value;
}
inline void State::set_type(::opi_api::network::v1alpha1::InterfaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.type)
}

// uint32 mtu = 3;
inline void State::clear_mtu() {
  _impl_.mtu_ = 0u;
}
inline uint32_t State::_internal_mtu() const {
  return _impl_.mtu_;
}
inline uint32_t State::mtu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.mtu)
  return _internal_mtu();
}
inline void State::_internal_set_mtu(uint32_t value) {
  
  _impl_.mtu_ = value;
}
inline void State::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.mtu)
}

// bool loopback_mode = 4;
inline void State::clear_loopback_mode() {
  _impl_.loopback_mode_ = false;
}
inline bool State::_internal_loopback_mode() const {
  return _impl_.loopback_mode_;
}
inline bool State::loopback_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.loopback_mode)
  return _internal_loopback_mode();
}
inline void State::_internal_set_loopback_mode(bool value) {
  
  _impl_.loopback_mode_ = value;
}
inline void State::set_loopback_mode(bool value) {
  _internal_set_loopback_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.loopback_mode)
}

// string description = 5;
inline void State::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& State::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.description)
}
inline std::string* State::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.State.description)
  return _s;
}
inline const std::string& State::_internal_description() const {
  return _impl_.description_.Get();
}
inline void State::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* State::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.State.description)
  return _impl_.description_.Release();
}
inline void State::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.State.description)
}

// bool enabled = 6;
inline void State::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool State::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool State::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.enabled)
  return _internal_enabled();
}
inline void State::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void State::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.enabled)
}

// uint32 ifindex = 7;
inline void State::clear_ifindex() {
  _impl_.ifindex_ = 0u;
}
inline uint32_t State::_internal_ifindex() const {
  return _impl_.ifindex_;
}
inline uint32_t State::ifindex() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.ifindex)
  return _internal_ifindex();
}
inline void State::_internal_set_ifindex(uint32_t value) {
  
  _impl_.ifindex_ = value;
}
inline void State::set_ifindex(uint32_t value) {
  _internal_set_ifindex(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.ifindex)
}

// .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
inline void State::clear_admin_state() {
  _impl_.admin_state_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::AdminState State::_internal_admin_state() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::AdminState >(_impl_.admin_state_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::AdminState State::admin_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.admin_state)
  return _internal_admin_state();
}
inline void State::_internal_set_admin_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value) {
  
  _impl_.admin_state_ = value;
}
inline void State::set_admin_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value) {
  _internal_set_admin_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.admin_state)
}

// .opi_api.network.v1alpha1.OperState oper_state = 9;
inline void State::clear_oper_state() {
  _impl_.oper_state_ = 0;
}
inline ::opi_api::network::v1alpha1::OperState State::_internal_oper_state() const {
  return static_cast< ::opi_api::network::v1alpha1::OperState >(_impl_.oper_state_);
}
inline ::opi_api::network::v1alpha1::OperState State::oper_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.oper_state)
  return _internal_oper_state();
}
inline void State::_internal_set_oper_state(::opi_api::network::v1alpha1::OperState value) {
  
  _impl_.oper_state_ = value;
}
inline void State::set_oper_state(::opi_api::network::v1alpha1::OperState value) {
  _internal_set_oper_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.oper_state)
}

// uint64 last_change = 10;
inline void State::clear_last_change() {
  _impl_.last_change_ = uint64_t{0u};
}
inline uint64_t State::_internal_last_change() const {
  return _impl_.last_change_;
}
inline uint64_t State::last_change() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.last_change)
  return _internal_last_change();
}
inline void State::_internal_set_last_change(uint64_t value) {
  
  _impl_.last_change_ = value;
}
inline void State::set_last_change(uint64_t value) {
  _internal_set_last_change(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.last_change)
}

// bool logical = 11;
inline void State::clear_logical() {
  _impl_.logical_ = false;
}
inline bool State::_internal_logical() const {
  return _impl_.logical_;
}
inline bool State::logical() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.logical)
  return _internal_logical();
}
inline void State::_internal_set_logical(bool value) {
  
  _impl_.logical_ = value;
}
inline void State::set_logical(bool value) {
  _internal_set_logical(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.logical)
}

// bool management = 12;
inline void State::clear_management() {
  _impl_.management_ = false;
}
inline bool State::_internal_management() const {
  return _impl_.management_;
}
inline bool State::management() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.management)
  return _internal_management();
}
inline void State::_internal_set_management(bool value) {
  
  _impl_.management_ = value;
}
inline void State::set_management(bool value) {
  _internal_set_management(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.management)
}

// bool cpu = 13;
inline void State::clear_cpu() {
  _impl_.cpu_ = false;
}
inline bool State::_internal_cpu() const {
  return _impl_.cpu_;
}
inline bool State::cpu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.cpu)
  return _internal_cpu();
}
inline void State::_internal_set_cpu(bool value) {
  
  _impl_.cpu_ = value;
}
inline void State::set_cpu(bool value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.State.cpu)
}

// .opi_api.network.v1alpha1.Counters counters = 14;
inline bool State::_internal_has_counters() const {
  return this != internal_default_instance() && _impl_.counters_ != nullptr;
}
inline bool State::has_counters() const {
  return _internal_has_counters();
}
inline void State::clear_counters() {
  if (GetArenaForAllocation() == nullptr && _impl_.counters_ != nullptr) {
    delete _impl_.counters_;
  }
  _impl_.counters_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::Counters& State::_internal_counters() const {
  const ::opi_api::network::v1alpha1::Counters* p = _impl_.counters_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::Counters&>(
      ::opi_api::network::v1alpha1::_Counters_default_instance_);
}
inline const ::opi_api::network::v1alpha1::Counters& State::counters() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.State.counters)
  return _internal_counters();
}
inline void State::unsafe_arena_set_allocated_counters(
    ::opi_api::network::v1alpha1::Counters* counters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counters_);
  }
  _impl_.counters_ = counters;
  if (counters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.State.counters)
}
inline ::opi_api::network::v1alpha1::Counters* State::release_counters() {
  
  ::opi_api::network::v1alpha1::Counters* temp = _impl_.counters_;
  _impl_.counters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::Counters* State::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.State.counters)
  
  ::opi_api::network::v1alpha1::Counters* temp = _impl_.counters_;
  _impl_.counters_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::Counters* State::_internal_mutable_counters() {
  
  if (_impl_.counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::Counters>(GetArenaForAllocation());
    _impl_.counters_ = p;
  }
  return _impl_.counters_;
}
inline ::opi_api::network::v1alpha1::Counters* State::mutable_counters() {
  ::opi_api::network::v1alpha1::Counters* _msg = _internal_mutable_counters();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.State.counters)
  return _msg;
}
inline void State::set_allocated_counters(::opi_api::network::v1alpha1::Counters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.State.counters)
}

// -------------------------------------------------------------------

// NetInterface_HoldTime_HoldConfig

// uint32 up = 1;
inline void NetInterface_HoldTime_HoldConfig::clear_up() {
  _impl_.up_ = 0u;
}
inline uint32_t NetInterface_HoldTime_HoldConfig::_internal_up() const {
  return _impl_.up_;
}
inline uint32_t NetInterface_HoldTime_HoldConfig::up() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig.up)
  return _internal_up();
}
inline void NetInterface_HoldTime_HoldConfig::_internal_set_up(uint32_t value) {
  
  _impl_.up_ = value;
}
inline void NetInterface_HoldTime_HoldConfig::set_up(uint32_t value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig.up)
}

// uint32 down = 2;
inline void NetInterface_HoldTime_HoldConfig::clear_down() {
  _impl_.down_ = 0u;
}
inline uint32_t NetInterface_HoldTime_HoldConfig::_internal_down() const {
  return _impl_.down_;
}
inline uint32_t NetInterface_HoldTime_HoldConfig::down() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig.down)
  return _internal_down();
}
inline void NetInterface_HoldTime_HoldConfig::_internal_set_down(uint32_t value) {
  
  _impl_.down_ = value;
}
inline void NetInterface_HoldTime_HoldConfig::set_down(uint32_t value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig.down)
}

// -------------------------------------------------------------------

// NetInterface_HoldTime_HoldState

// uint32 up = 1;
inline void NetInterface_HoldTime_HoldState::clear_up() {
  _impl_.up_ = 0u;
}
inline uint32_t NetInterface_HoldTime_HoldState::_internal_up() const {
  return _impl_.up_;
}
inline uint32_t NetInterface_HoldTime_HoldState::up() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState.up)
  return _internal_up();
}
inline void NetInterface_HoldTime_HoldState::_internal_set_up(uint32_t value) {
  
  _impl_.up_ = value;
}
inline void NetInterface_HoldTime_HoldState::set_up(uint32_t value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState.up)
}

// uint32 down = 2;
inline void NetInterface_HoldTime_HoldState::clear_down() {
  _impl_.down_ = 0u;
}
inline uint32_t NetInterface_HoldTime_HoldState::_internal_down() const {
  return _impl_.down_;
}
inline uint32_t NetInterface_HoldTime_HoldState::down() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState.down)
  return _internal_down();
}
inline void NetInterface_HoldTime_HoldState::_internal_set_down(uint32_t value) {
  
  _impl_.down_ = value;
}
inline void NetInterface_HoldTime_HoldState::set_down(uint32_t value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState.down)
}

// -------------------------------------------------------------------

// NetInterface_HoldTime

// .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
inline bool NetInterface_HoldTime::_internal_has_hold_config() const {
  return this != internal_default_instance() && _impl_.hold_config_ != nullptr;
}
inline bool NetInterface_HoldTime::has_hold_config() const {
  return _internal_has_hold_config();
}
inline void NetInterface_HoldTime::clear_hold_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.hold_config_ != nullptr) {
    delete _impl_.hold_config_;
  }
  _impl_.hold_config_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig& NetInterface_HoldTime::_internal_hold_config() const {
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* p = _impl_.hold_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig&>(
      ::opi_api::network::v1alpha1::_NetInterface_HoldTime_HoldConfig_default_instance_);
}
inline const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig& NetInterface_HoldTime::hold_config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_config)
  return _internal_hold_config();
}
inline void NetInterface_HoldTime::unsafe_arena_set_allocated_hold_config(
    ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* hold_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hold_config_);
  }
  _impl_.hold_config_ = hold_config;
  if (hold_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_config)
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* NetInterface_HoldTime::release_hold_config() {
  
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* temp = _impl_.hold_config_;
  _impl_.hold_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* NetInterface_HoldTime::unsafe_arena_release_hold_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_config)
  
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* temp = _impl_.hold_config_;
  _impl_.hold_config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* NetInterface_HoldTime::_internal_mutable_hold_config() {
  
  if (_impl_.hold_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig>(GetArenaForAllocation());
    _impl_.hold_config_ = p;
  }
  return _impl_.hold_config_;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* NetInterface_HoldTime::mutable_hold_config() {
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* _msg = _internal_mutable_hold_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_config)
  return _msg;
}
inline void NetInterface_HoldTime::set_allocated_hold_config(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* hold_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hold_config_;
  }
  if (hold_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hold_config);
    if (message_arena != submessage_arena) {
      hold_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hold_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hold_config_ = hold_config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_config)
}

// .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
inline bool NetInterface_HoldTime::_internal_has_hold_state() const {
  return this != internal_default_instance() && _impl_.hold_state_ != nullptr;
}
inline bool NetInterface_HoldTime::has_hold_state() const {
  return _internal_has_hold_state();
}
inline void NetInterface_HoldTime::clear_hold_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.hold_state_ != nullptr) {
    delete _impl_.hold_state_;
  }
  _impl_.hold_state_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState& NetInterface_HoldTime::_internal_hold_state() const {
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* p = _impl_.hold_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState&>(
      ::opi_api::network::v1alpha1::_NetInterface_HoldTime_HoldState_default_instance_);
}
inline const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState& NetInterface_HoldTime::hold_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_state)
  return _internal_hold_state();
}
inline void NetInterface_HoldTime::unsafe_arena_set_allocated_hold_state(
    ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* hold_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hold_state_);
  }
  _impl_.hold_state_ = hold_state;
  if (hold_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_state)
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* NetInterface_HoldTime::release_hold_state() {
  
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* temp = _impl_.hold_state_;
  _impl_.hold_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* NetInterface_HoldTime::unsafe_arena_release_hold_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_state)
  
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* temp = _impl_.hold_state_;
  _impl_.hold_state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* NetInterface_HoldTime::_internal_mutable_hold_state() {
  
  if (_impl_.hold_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState>(GetArenaForAllocation());
    _impl_.hold_state_ = p;
  }
  return _impl_.hold_state_;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* NetInterface_HoldTime::mutable_hold_state() {
  ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* _msg = _internal_mutable_hold_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_state)
  return _msg;
}
inline void NetInterface_HoldTime::set_allocated_hold_state(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* hold_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hold_state_;
  }
  if (hold_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hold_state);
    if (message_arena != submessage_arena) {
      hold_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hold_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hold_state_ = hold_state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.HoldTime.hold_state)
}

// -------------------------------------------------------------------

// NetInterface_Subinterfaces_Subinterface_SubifConfig

// uint64 index = 1;
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t NetInterface_Subinterfaces_Subinterface_SubifConfig::index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.index)
  return _internal_index();
}
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.index)
}

// string description = 2;
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& NetInterface_Subinterfaces_Subinterface_SubifConfig::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInterface_Subinterfaces_Subinterface_SubifConfig::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description)
}
inline std::string* NetInterface_Subinterfaces_Subinterface_SubifConfig::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description)
  return _s;
}
inline const std::string& NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_description() const {
  return _impl_.description_.Get();
}
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInterface_Subinterfaces_Subinterface_SubifConfig::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description)
  return _impl_.description_.Release();
}
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description)
}

// bool enabled = 3;
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool NetInterface_Subinterfaces_Subinterface_SubifConfig::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.enabled)
  return _internal_enabled();
}
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.enabled)
}

// -------------------------------------------------------------------

// NetInterface_Subinterfaces_Subinterface

// int64 index = 1;
inline void NetInterface_Subinterfaces_Subinterface::clear_index() {
  _impl_.index_ = int64_t{0};
}
inline int64_t NetInterface_Subinterfaces_Subinterface::_internal_index() const {
  return _impl_.index_;
}
inline int64_t NetInterface_Subinterfaces_Subinterface::index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.index)
  return _internal_index();
}
inline void NetInterface_Subinterfaces_Subinterface::_internal_set_index(int64_t value) {
  
  _impl_.index_ = value;
}
inline void NetInterface_Subinterfaces_Subinterface::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.index)
}

// .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
inline bool NetInterface_Subinterfaces_Subinterface::_internal_has_subif_config() const {
  return this != internal_default_instance() && _impl_.subif_config_ != nullptr;
}
inline bool NetInterface_Subinterfaces_Subinterface::has_subif_config() const {
  return _internal_has_subif_config();
}
inline void NetInterface_Subinterfaces_Subinterface::clear_subif_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.subif_config_ != nullptr) {
    delete _impl_.subif_config_;
  }
  _impl_.subif_config_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig& NetInterface_Subinterfaces_Subinterface::_internal_subif_config() const {
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* p = _impl_.subif_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig&>(
      ::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_);
}
inline const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig& NetInterface_Subinterfaces_Subinterface::subif_config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.subif_config)
  return _internal_subif_config();
}
inline void NetInterface_Subinterfaces_Subinterface::unsafe_arena_set_allocated_subif_config(
    ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* subif_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subif_config_);
  }
  _impl_.subif_config_ = subif_config;
  if (subif_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.subif_config)
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* NetInterface_Subinterfaces_Subinterface::release_subif_config() {
  
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* temp = _impl_.subif_config_;
  _impl_.subif_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* NetInterface_Subinterfaces_Subinterface::unsafe_arena_release_subif_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.subif_config)
  
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* temp = _impl_.subif_config_;
  _impl_.subif_config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* NetInterface_Subinterfaces_Subinterface::_internal_mutable_subif_config() {
  
  if (_impl_.subif_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig>(GetArenaForAllocation());
    _impl_.subif_config_ = p;
  }
  return _impl_.subif_config_;
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* NetInterface_Subinterfaces_Subinterface::mutable_subif_config() {
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* _msg = _internal_mutable_subif_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.subif_config)
  return _msg;
}
inline void NetInterface_Subinterfaces_Subinterface::set_allocated_subif_config(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* subif_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subif_config_;
  }
  if (subif_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subif_config);
    if (message_arena != submessage_arena) {
      subif_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subif_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subif_config_ = subif_config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.subif_config)
}

// .opi_api.network.v1alpha1.State state = 3;
inline bool NetInterface_Subinterfaces_Subinterface::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool NetInterface_Subinterfaces_Subinterface::has_state() const {
  return _internal_has_state();
}
inline void NetInterface_Subinterfaces_Subinterface::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::State& NetInterface_Subinterfaces_Subinterface::_internal_state() const {
  const ::opi_api::network::v1alpha1::State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::State&>(
      ::opi_api::network::v1alpha1::_State_default_instance_);
}
inline const ::opi_api::network::v1alpha1::State& NetInterface_Subinterfaces_Subinterface::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.state)
  return _internal_state();
}
inline void NetInterface_Subinterfaces_Subinterface::unsafe_arena_set_allocated_state(
    ::opi_api::network::v1alpha1::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.state)
}
inline ::opi_api::network::v1alpha1::State* NetInterface_Subinterfaces_Subinterface::release_state() {
  
  ::opi_api::network::v1alpha1::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::State* NetInterface_Subinterfaces_Subinterface::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.state)
  
  ::opi_api::network::v1alpha1::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::State* NetInterface_Subinterfaces_Subinterface::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::State>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::opi_api::network::v1alpha1::State* NetInterface_Subinterfaces_Subinterface::mutable_state() {
  ::opi_api::network::v1alpha1::State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.state)
  return _msg;
}
inline void NetInterface_Subinterfaces_Subinterface::set_allocated_state(::opi_api::network::v1alpha1::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.state)
}

// -------------------------------------------------------------------

// NetInterface_Subinterfaces

// repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
inline int NetInterface_Subinterfaces::_internal_subinterface_size() const {
  return _impl_.subinterface_.size();
}
inline int NetInterface_Subinterfaces::subinterface_size() const {
  return _internal_subinterface_size();
}
inline void NetInterface_Subinterfaces::clear_subinterface() {
  _impl_.subinterface_.Clear();
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* NetInterface_Subinterfaces::mutable_subinterface(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.Subinterfaces.subinterface)
  return _impl_.subinterface_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >*
NetInterface_Subinterfaces::mutable_subinterface() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.v1alpha1.NetInterface.Subinterfaces.subinterface)
  return &_impl_.subinterface_;
}
inline const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface& NetInterface_Subinterfaces::_internal_subinterface(int index) const {
  return _impl_.subinterface_.Get(index);
}
inline const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface& NetInterface_Subinterfaces::subinterface(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.Subinterfaces.subinterface)
  return _internal_subinterface(index);
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* NetInterface_Subinterfaces::_internal_add_subinterface() {
  return _impl_.subinterface_.Add();
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* NetInterface_Subinterfaces::add_subinterface() {
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* _add = _internal_add_subinterface();
  // @@protoc_insertion_point(field_add:opi_api.network.v1alpha1.NetInterface.Subinterfaces.subinterface)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >&
NetInterface_Subinterfaces::subinterface() const {
  // @@protoc_insertion_point(field_list:opi_api.network.v1alpha1.NetInterface.Subinterfaces.subinterface)
  return _impl_.subinterface_;
}

// -------------------------------------------------------------------

// NetInterface

// string name = 1;
inline void NetInterface::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NetInterface::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInterface::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.NetInterface.name)
}
inline std::string* NetInterface::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.name)
  return _s;
}
inline const std::string& NetInterface::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NetInterface::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInterface::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInterface::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.name)
  return _impl_.name_.Release();
}
inline void NetInterface::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.name)
}

// .opi_api.network.v1alpha1.Config config = 2;
inline bool NetInterface::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool NetInterface::has_config() const {
  return _internal_has_config();
}
inline void NetInterface::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::Config& NetInterface::_internal_config() const {
  const ::opi_api::network::v1alpha1::Config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::Config&>(
      ::opi_api::network::v1alpha1::_Config_default_instance_);
}
inline const ::opi_api::network::v1alpha1::Config& NetInterface::config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.config)
  return _internal_config();
}
inline void NetInterface::unsafe_arena_set_allocated_config(
    ::opi_api::network::v1alpha1::Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.config)
}
inline ::opi_api::network::v1alpha1::Config* NetInterface::release_config() {
  
  ::opi_api::network::v1alpha1::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::Config* NetInterface::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.config)
  
  ::opi_api::network::v1alpha1::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::Config* NetInterface::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::Config>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::opi_api::network::v1alpha1::Config* NetInterface::mutable_config() {
  ::opi_api::network::v1alpha1::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.config)
  return _msg;
}
inline void NetInterface::set_allocated_config(::opi_api::network::v1alpha1::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.config)
}

// .opi_api.network.v1alpha1.State state = 3;
inline bool NetInterface::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool NetInterface::has_state() const {
  return _internal_has_state();
}
inline void NetInterface::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::State& NetInterface::_internal_state() const {
  const ::opi_api::network::v1alpha1::State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::State&>(
      ::opi_api::network::v1alpha1::_State_default_instance_);
}
inline const ::opi_api::network::v1alpha1::State& NetInterface::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.state)
  return _internal_state();
}
inline void NetInterface::unsafe_arena_set_allocated_state(
    ::opi_api::network::v1alpha1::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.state)
}
inline ::opi_api::network::v1alpha1::State* NetInterface::release_state() {
  
  ::opi_api::network::v1alpha1::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::State* NetInterface::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.state)
  
  ::opi_api::network::v1alpha1::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::State* NetInterface::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::State>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::opi_api::network::v1alpha1::State* NetInterface::mutable_state() {
  ::opi_api::network::v1alpha1::State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.state)
  return _msg;
}
inline void NetInterface::set_allocated_state(::opi_api::network::v1alpha1::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.state)
}

// .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
inline bool NetInterface::_internal_has_holdtime() const {
  return this != internal_default_instance() && _impl_.holdtime_ != nullptr;
}
inline bool NetInterface::has_holdtime() const {
  return _internal_has_holdtime();
}
inline void NetInterface::clear_holdtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.holdtime_ != nullptr) {
    delete _impl_.holdtime_;
  }
  _impl_.holdtime_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::NetInterface_HoldTime& NetInterface::_internal_holdtime() const {
  const ::opi_api::network::v1alpha1::NetInterface_HoldTime* p = _impl_.holdtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::NetInterface_HoldTime&>(
      ::opi_api::network::v1alpha1::_NetInterface_HoldTime_default_instance_);
}
inline const ::opi_api::network::v1alpha1::NetInterface_HoldTime& NetInterface::holdtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.holdtime)
  return _internal_holdtime();
}
inline void NetInterface::unsafe_arena_set_allocated_holdtime(
    ::opi_api::network::v1alpha1::NetInterface_HoldTime* holdtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.holdtime_);
  }
  _impl_.holdtime_ = holdtime;
  if (holdtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.holdtime)
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime* NetInterface::release_holdtime() {
  
  ::opi_api::network::v1alpha1::NetInterface_HoldTime* temp = _impl_.holdtime_;
  _impl_.holdtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime* NetInterface::unsafe_arena_release_holdtime() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.holdtime)
  
  ::opi_api::network::v1alpha1::NetInterface_HoldTime* temp = _impl_.holdtime_;
  _impl_.holdtime_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime* NetInterface::_internal_mutable_holdtime() {
  
  if (_impl_.holdtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_HoldTime>(GetArenaForAllocation());
    _impl_.holdtime_ = p;
  }
  return _impl_.holdtime_;
}
inline ::opi_api::network::v1alpha1::NetInterface_HoldTime* NetInterface::mutable_holdtime() {
  ::opi_api::network::v1alpha1::NetInterface_HoldTime* _msg = _internal_mutable_holdtime();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.holdtime)
  return _msg;
}
inline void NetInterface::set_allocated_holdtime(::opi_api::network::v1alpha1::NetInterface_HoldTime* holdtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.holdtime_;
  }
  if (holdtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(holdtime);
    if (message_arena != submessage_arena) {
      holdtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, holdtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.holdtime_ = holdtime;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.holdtime)
}

// .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
inline bool NetInterface::_internal_has_subinterfaces() const {
  return this != internal_default_instance() && _impl_.subinterfaces_ != nullptr;
}
inline bool NetInterface::has_subinterfaces() const {
  return _internal_has_subinterfaces();
}
inline void NetInterface::clear_subinterfaces() {
  if (GetArenaForAllocation() == nullptr && _impl_.subinterfaces_ != nullptr) {
    delete _impl_.subinterfaces_;
  }
  _impl_.subinterfaces_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces& NetInterface::_internal_subinterfaces() const {
  const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* p = _impl_.subinterfaces_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces&>(
      ::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_default_instance_);
}
inline const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces& NetInterface::subinterfaces() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.NetInterface.subinterfaces)
  return _internal_subinterfaces();
}
inline void NetInterface::unsafe_arena_set_allocated_subinterfaces(
    ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* subinterfaces) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subinterfaces_);
  }
  _impl_.subinterfaces_ = subinterfaces;
  if (subinterfaces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.NetInterface.subinterfaces)
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* NetInterface::release_subinterfaces() {
  
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* temp = _impl_.subinterfaces_;
  _impl_.subinterfaces_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* NetInterface::unsafe_arena_release_subinterfaces() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.NetInterface.subinterfaces)
  
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* temp = _impl_.subinterfaces_;
  _impl_.subinterfaces_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* NetInterface::_internal_mutable_subinterfaces() {
  
  if (_impl_.subinterfaces_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface_Subinterfaces>(GetArenaForAllocation());
    _impl_.subinterfaces_ = p;
  }
  return _impl_.subinterfaces_;
}
inline ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* NetInterface::mutable_subinterfaces() {
  ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* _msg = _internal_mutable_subinterfaces();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.NetInterface.subinterfaces)
  return _msg;
}
inline void NetInterface::set_allocated_subinterfaces(::opi_api::network::v1alpha1::NetInterface_Subinterfaces* subinterfaces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subinterfaces_;
  }
  if (subinterfaces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subinterfaces);
    if (message_arena != submessage_arena) {
      subinterfaces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subinterfaces, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subinterfaces_ = subinterfaces;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.NetInterface.subinterfaces)
}

// -------------------------------------------------------------------

// GetNetInterfaceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNetInterfaceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetNetInterfaceRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.GetNetInterfaceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNetInterfaceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.GetNetInterfaceRequest.name)
}
inline std::string* GetNetInterfaceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.GetNetInterfaceRequest.name)
  return _s;
}
inline const std::string& GetNetInterfaceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetNetInterfaceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNetInterfaceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNetInterfaceRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.GetNetInterfaceRequest.name)
  return _impl_.name_.Release();
}
inline void GetNetInterfaceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.GetNetInterfaceRequest.name)
}

// -------------------------------------------------------------------

// ListNetInterfacesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNetInterfacesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListNetInterfacesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.ListNetInterfacesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNetInterfacesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.ListNetInterfacesRequest.parent)
}
inline std::string* ListNetInterfacesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.ListNetInterfacesRequest.parent)
  return _s;
}
inline const std::string& ListNetInterfacesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListNetInterfacesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNetInterfacesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNetInterfacesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.ListNetInterfacesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListNetInterfacesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.ListNetInterfacesRequest.parent)
}

// int32 page_size = 2;
inline void ListNetInterfacesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListNetInterfacesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListNetInterfacesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_size)
  return _internal_page_size();
}
inline void ListNetInterfacesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListNetInterfacesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_size)
}

// string page_token = 3;
inline void ListNetInterfacesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListNetInterfacesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNetInterfacesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token)
}
inline std::string* ListNetInterfacesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token)
  return _s;
}
inline const std::string& ListNetInterfacesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListNetInterfacesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNetInterfacesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNetInterfacesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListNetInterfacesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNetInterfacesResponse

// repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
inline int ListNetInterfacesResponse::_internal_net_interfaces_size() const {
  return _impl_.net_interfaces_.size();
}
inline int ListNetInterfacesResponse::net_interfaces_size() const {
  return _internal_net_interfaces_size();
}
inline void ListNetInterfacesResponse::clear_net_interfaces() {
  _impl_.net_interfaces_.Clear();
}
inline ::opi_api::network::v1alpha1::NetInterface* ListNetInterfacesResponse::mutable_net_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.ListNetInterfacesResponse.net_interfaces)
  return _impl_.net_interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface >*
ListNetInterfacesResponse::mutable_net_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.v1alpha1.ListNetInterfacesResponse.net_interfaces)
  return &_impl_.net_interfaces_;
}
inline const ::opi_api::network::v1alpha1::NetInterface& ListNetInterfacesResponse::_internal_net_interfaces(int index) const {
  return _impl_.net_interfaces_.Get(index);
}
inline const ::opi_api::network::v1alpha1::NetInterface& ListNetInterfacesResponse::net_interfaces(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.ListNetInterfacesResponse.net_interfaces)
  return _internal_net_interfaces(index);
}
inline ::opi_api::network::v1alpha1::NetInterface* ListNetInterfacesResponse::_internal_add_net_interfaces() {
  return _impl_.net_interfaces_.Add();
}
inline ::opi_api::network::v1alpha1::NetInterface* ListNetInterfacesResponse::add_net_interfaces() {
  ::opi_api::network::v1alpha1::NetInterface* _add = _internal_add_net_interfaces();
  // @@protoc_insertion_point(field_add:opi_api.network.v1alpha1.ListNetInterfacesResponse.net_interfaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1alpha1::NetInterface >&
ListNetInterfacesResponse::net_interfaces() const {
  // @@protoc_insertion_point(field_list:opi_api.network.v1alpha1.ListNetInterfacesResponse.net_interfaces)
  return _impl_.net_interfaces_;
}

// string next_page_token = 2;
inline void ListNetInterfacesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListNetInterfacesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNetInterfacesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token)
}
inline std::string* ListNetInterfacesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token)
  return _s;
}
inline const std::string& ListNetInterfacesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListNetInterfacesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNetInterfacesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNetInterfacesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListNetInterfacesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateNetInterfaceRequest

// .opi_api.network.v1alpha1.NetInterface net_interface = 1;
inline bool UpdateNetInterfaceRequest::_internal_has_net_interface() const {
  return this != internal_default_instance() && _impl_.net_interface_ != nullptr;
}
inline bool UpdateNetInterfaceRequest::has_net_interface() const {
  return _internal_has_net_interface();
}
inline void UpdateNetInterfaceRequest::clear_net_interface() {
  if (GetArenaForAllocation() == nullptr && _impl_.net_interface_ != nullptr) {
    delete _impl_.net_interface_;
  }
  _impl_.net_interface_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::NetInterface& UpdateNetInterfaceRequest::_internal_net_interface() const {
  const ::opi_api::network::v1alpha1::NetInterface* p = _impl_.net_interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::NetInterface&>(
      ::opi_api::network::v1alpha1::_NetInterface_default_instance_);
}
inline const ::opi_api::network::v1alpha1::NetInterface& UpdateNetInterfaceRequest::net_interface() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.net_interface)
  return _internal_net_interface();
}
inline void UpdateNetInterfaceRequest::unsafe_arena_set_allocated_net_interface(
    ::opi_api::network::v1alpha1::NetInterface* net_interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.net_interface_);
  }
  _impl_.net_interface_ = net_interface;
  if (net_interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.net_interface)
}
inline ::opi_api::network::v1alpha1::NetInterface* UpdateNetInterfaceRequest::release_net_interface() {
  
  ::opi_api::network::v1alpha1::NetInterface* temp = _impl_.net_interface_;
  _impl_.net_interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface* UpdateNetInterfaceRequest::unsafe_arena_release_net_interface() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.net_interface)
  
  ::opi_api::network::v1alpha1::NetInterface* temp = _impl_.net_interface_;
  _impl_.net_interface_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::NetInterface* UpdateNetInterfaceRequest::_internal_mutable_net_interface() {
  
  if (_impl_.net_interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::NetInterface>(GetArenaForAllocation());
    _impl_.net_interface_ = p;
  }
  return _impl_.net_interface_;
}
inline ::opi_api::network::v1alpha1::NetInterface* UpdateNetInterfaceRequest::mutable_net_interface() {
  ::opi_api::network::v1alpha1::NetInterface* _msg = _internal_mutable_net_interface();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.net_interface)
  return _msg;
}
inline void UpdateNetInterfaceRequest::set_allocated_net_interface(::opi_api::network::v1alpha1::NetInterface* net_interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.net_interface_;
  }
  if (net_interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(net_interface);
    if (message_arena != submessage_arena) {
      net_interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_interface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.net_interface_ = net_interface;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.net_interface)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNetInterfaceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateNetInterfaceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNetInterfaceRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNetInterfaceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNetInterfaceRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNetInterfaceRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNetInterfaceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNetInterfaceRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNetInterfaceRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.update_mask)
  return _msg;
}
inline void UpdateNetInterfaceRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.UpdateNetInterfaceRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::v1alpha1::InterfaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1alpha1::InterfaceType>() {
  return ::opi_api::network::v1alpha1::InterfaceType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::v1alpha1::OperState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1alpha1::OperState>() {
  return ::opi_api::network::v1alpha1::OperState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openconfig_5finterfaces_2eproto
