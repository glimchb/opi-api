// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: l2_xpu_infra_mgr.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)
// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: Word "Status" will be used instead of "State". --)
//
#ifndef GRPC_l2_5fxpu_5finfra_5fmgr_2eproto__INCLUDED
#define GRPC_l2_5fxpu_5finfra_5fmgr_2eproto__INCLUDED

#include "l2_xpu_infra_mgr.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

// Management of LogicalBridge Resources
class LogicalBridgeService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a Logical Bridge
    virtual ::grpc::Status CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> AsyncCreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(AsyncCreateLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> PrepareAsyncCreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(PrepareAsyncCreateLogicalBridgeRaw(context, request, cq));
    }
    // List Logical Bridges
    virtual ::grpc::Status ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>> AsyncListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>>(AsyncListLogicalBridgesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>> PrepareAsyncListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>>(PrepareAsyncListLogicalBridgesRaw(context, request, cq));
    }
    // Retrieve a Logical Bridge
    virtual ::grpc::Status GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> AsyncGetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(AsyncGetLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> PrepareAsyncGetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(PrepareAsyncGetLogicalBridgeRaw(context, request, cq));
    }
    // Delete a Logical Bridge
    virtual ::grpc::Status DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteLogicalBridgeRaw(context, request, cq));
    }
    // Update a Logical Bridge
    virtual ::grpc::Status UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> AsyncUpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(AsyncUpdateLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> PrepareAsyncUpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(PrepareAsyncUpdateLogicalBridgeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a Logical Bridge
      virtual void CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Logical Bridges
      virtual void ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve a Logical Bridge
      virtual void GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a Logical Bridge
      virtual void DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update a Logical Bridge
      virtual void UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* AsyncCreateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* PrepareAsyncCreateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* AsyncListLogicalBridgesRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* PrepareAsyncListLogicalBridgesRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* AsyncGetLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* PrepareAsyncGetLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* AsyncUpdateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* PrepareAsyncUpdateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> AsyncCreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(AsyncCreateLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> PrepareAsyncCreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(PrepareAsyncCreateLogicalBridgeRaw(context, request, cq));
    }
    ::grpc::Status ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>> AsyncListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>>(AsyncListLogicalBridgesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>> PrepareAsyncListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>>(PrepareAsyncListLogicalBridgesRaw(context, request, cq));
    }
    ::grpc::Status GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> AsyncGetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(AsyncGetLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> PrepareAsyncGetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(PrepareAsyncGetLogicalBridgeRaw(context, request, cq));
    }
    ::grpc::Status DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteLogicalBridgeRaw(context, request, cq));
    }
    ::grpc::Status UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> AsyncUpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(AsyncUpdateLogicalBridgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>> PrepareAsyncUpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>>(PrepareAsyncUpdateLogicalBridgeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)>) override;
      void CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)>) override;
      void GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)>) override;
      void UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* AsyncCreateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* PrepareAsyncCreateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* AsyncListLogicalBridgesRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* PrepareAsyncListLogicalBridgesRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* AsyncGetLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* PrepareAsyncGetLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* AsyncUpdateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* PrepareAsyncUpdateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLogicalBridge_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLogicalBridges_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLogicalBridge_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLogicalBridge_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateLogicalBridge_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a Logical Bridge
    virtual ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response);
    // List Logical Bridges
    virtual ::grpc::Status ListLogicalBridges(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response);
    // Retrieve a Logical Bridge
    virtual ::grpc::Status GetLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response);
    // Delete a Logical Bridge
    virtual ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response);
    // Update a Logical Bridge
    virtual ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateLogicalBridge() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLogicalBridge(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLogicalBridges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListLogicalBridges() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListLogicalBridges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogicalBridges(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLogicalBridges(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLogicalBridge() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogicalBridge(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLogicalBridge() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLogicalBridge(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateLogicalBridge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLogicalBridge(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateLogicalBridge<WithAsyncMethod_ListLogicalBridges<WithAsyncMethod_GetLogicalBridge<WithAsyncMethod_DeleteLogicalBridge<WithAsyncMethod_UpdateLogicalBridge<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateLogicalBridge() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) { return this->CreateLogicalBridge(context, request, response); }));}
    void SetMessageAllocatorFor_CreateLogicalBridge(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListLogicalBridges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListLogicalBridges() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response) { return this->ListLogicalBridges(context, request, response); }));}
    void SetMessageAllocatorFor_ListLogicalBridges(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListLogicalBridges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogicalBridges(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLogicalBridges(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLogicalBridge() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) { return this->GetLogicalBridge(context, request, response); }));}
    void SetMessageAllocatorFor_GetLogicalBridge(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteLogicalBridge() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response) { return this->DeleteLogicalBridge(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLogicalBridge(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateLogicalBridge() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) { return this->UpdateLogicalBridge(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateLogicalBridge(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateLogicalBridge<WithCallbackMethod_ListLogicalBridges<WithCallbackMethod_GetLogicalBridge<WithCallbackMethod_DeleteLogicalBridge<WithCallbackMethod_UpdateLogicalBridge<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateLogicalBridge() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLogicalBridges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListLogicalBridges() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListLogicalBridges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogicalBridges(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLogicalBridge() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLogicalBridge() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateLogicalBridge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateLogicalBridge() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLogicalBridge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLogicalBridges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListLogicalBridges() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListLogicalBridges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogicalBridges(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLogicalBridges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLogicalBridge() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogicalBridge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLogicalBridge() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLogicalBridge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateLogicalBridge() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLogicalBridge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateLogicalBridge() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateLogicalBridge(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListLogicalBridges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListLogicalBridges() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListLogicalBridges(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListLogicalBridges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogicalBridges(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLogicalBridges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLogicalBridge() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLogicalBridge(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteLogicalBridge() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLogicalBridge(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateLogicalBridge() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateLogicalBridge(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateLogicalBridge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateLogicalBridge() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* streamer) {
                       return this->StreamedCreateLogicalBridge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLogicalBridge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest,::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLogicalBridges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListLogicalBridges() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* streamer) {
                       return this->StreamedListLogicalBridges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListLogicalBridges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLogicalBridges(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLogicalBridges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest,::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLogicalBridge() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* streamer) {
                       return this->StreamedGetLogicalBridge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLogicalBridge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest,::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLogicalBridge() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteLogicalBridge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLogicalBridge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateLogicalBridge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateLogicalBridge() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* streamer) {
                       return this->StreamedUpdateLogicalBridge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateLogicalBridge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateLogicalBridge(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateLogicalBridge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest,::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateLogicalBridge<WithStreamedUnaryMethod_ListLogicalBridges<WithStreamedUnaryMethod_GetLogicalBridge<WithStreamedUnaryMethod_DeleteLogicalBridge<WithStreamedUnaryMethod_UpdateLogicalBridge<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateLogicalBridge<WithStreamedUnaryMethod_ListLogicalBridges<WithStreamedUnaryMethod_GetLogicalBridge<WithStreamedUnaryMethod_DeleteLogicalBridge<WithStreamedUnaryMethod_UpdateLogicalBridge<Service > > > > > StreamedService;
};

// Management of BridgePort resources
class BridgePortService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.network.evpn_gw.v1alpha1.BridgePortService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a Bridge Port
    virtual ::grpc::Status CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> AsyncCreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(AsyncCreateBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> PrepareAsyncCreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(PrepareAsyncCreateBridgePortRaw(context, request, cq));
    }
    // List Bridge Ports
    virtual ::grpc::Status ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>> AsyncListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>>(AsyncListBridgePortsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>> PrepareAsyncListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>>(PrepareAsyncListBridgePortsRaw(context, request, cq));
    }
    // Retrieve a Bridge Port
    virtual ::grpc::Status GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> AsyncGetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(AsyncGetBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> PrepareAsyncGetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(PrepareAsyncGetBridgePortRaw(context, request, cq));
    }
    // Delete a Bridge Port
    virtual ::grpc::Status DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteBridgePortRaw(context, request, cq));
    }
    // Update a Bridge Port
    virtual ::grpc::Status UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> AsyncUpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(AsyncUpdateBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> PrepareAsyncUpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(PrepareAsyncUpdateBridgePortRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a Bridge Port
      virtual void CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Bridge Ports
      virtual void ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve a Bridge Port
      virtual void GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a Bridge Port
      virtual void DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update a Bridge Port
      virtual void UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* AsyncCreateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* PrepareAsyncCreateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* AsyncListBridgePortsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* PrepareAsyncListBridgePortsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* AsyncGetBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* PrepareAsyncGetBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* AsyncUpdateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* PrepareAsyncUpdateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> AsyncCreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(AsyncCreateBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> PrepareAsyncCreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(PrepareAsyncCreateBridgePortRaw(context, request, cq));
    }
    ::grpc::Status ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>> AsyncListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>>(AsyncListBridgePortsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>> PrepareAsyncListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>>(PrepareAsyncListBridgePortsRaw(context, request, cq));
    }
    ::grpc::Status GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> AsyncGetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(AsyncGetBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> PrepareAsyncGetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(PrepareAsyncGetBridgePortRaw(context, request, cq));
    }
    ::grpc::Status DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteBridgePortRaw(context, request, cq));
    }
    ::grpc::Status UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> AsyncUpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(AsyncUpdateBridgePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>> PrepareAsyncUpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>>(PrepareAsyncUpdateBridgePortRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)>) override;
      void CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)>) override;
      void GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)>) override;
      void UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* AsyncCreateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* PrepareAsyncCreateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* AsyncListBridgePortsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* PrepareAsyncListBridgePortsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* AsyncGetBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* PrepareAsyncGetBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* AsyncUpdateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* PrepareAsyncUpdateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBridgePort_;
    const ::grpc::internal::RpcMethod rpcmethod_ListBridgePorts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBridgePort_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteBridgePort_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateBridgePort_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a Bridge Port
    virtual ::grpc::Status CreateBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response);
    // List Bridge Ports
    virtual ::grpc::Status ListBridgePorts(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response);
    // Retrieve a Bridge Port
    virtual ::grpc::Status GetBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response);
    // Delete a Bridge Port
    virtual ::grpc::Status DeleteBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response);
    // Update a Bridge Port
    virtual ::grpc::Status UpdateBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateBridgePort() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBridgePort(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBridgePorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListBridgePorts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListBridgePorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBridgePorts(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBridgePorts(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBridgePort() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBridgePort(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteBridgePort() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBridgePort(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateBridgePort() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBridgePort(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateBridgePort<WithAsyncMethod_ListBridgePorts<WithAsyncMethod_GetBridgePort<WithAsyncMethod_DeleteBridgePort<WithAsyncMethod_UpdateBridgePort<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateBridgePort() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) { return this->CreateBridgePort(context, request, response); }));}
    void SetMessageAllocatorFor_CreateBridgePort(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListBridgePorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListBridgePorts() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response) { return this->ListBridgePorts(context, request, response); }));}
    void SetMessageAllocatorFor_ListBridgePorts(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListBridgePorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBridgePorts(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListBridgePorts(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBridgePort() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) { return this->GetBridgePort(context, request, response); }));}
    void SetMessageAllocatorFor_GetBridgePort(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteBridgePort() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response) { return this->DeleteBridgePort(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteBridgePort(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateBridgePort() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) { return this->UpdateBridgePort(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateBridgePort(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateBridgePort<WithCallbackMethod_ListBridgePorts<WithCallbackMethod_GetBridgePort<WithCallbackMethod_DeleteBridgePort<WithCallbackMethod_UpdateBridgePort<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateBridgePort() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListBridgePorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListBridgePorts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListBridgePorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBridgePorts(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBridgePort() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteBridgePort() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateBridgePort() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateBridgePort() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBridgePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListBridgePorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListBridgePorts() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListBridgePorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBridgePorts(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBridgePorts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBridgePort() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBridgePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteBridgePort() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBridgePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateBridgePort() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBridgePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateBridgePort() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateBridgePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListBridgePorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListBridgePorts() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListBridgePorts(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListBridgePorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBridgePorts(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListBridgePorts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBridgePort() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBridgePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteBridgePort() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteBridgePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateBridgePort() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateBridgePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateBridgePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateBridgePort() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* streamer) {
                       return this->StreamedCreateBridgePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateBridgePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest,::opi_api::network::evpn_gw::v1alpha1::BridgePort>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListBridgePorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListBridgePorts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* streamer) {
                       return this->StreamedListBridgePorts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListBridgePorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListBridgePorts(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListBridgePorts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest,::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBridgePort() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* streamer) {
                       return this->StreamedGetBridgePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBridgePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest,::opi_api::network::evpn_gw::v1alpha1::BridgePort>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteBridgePort() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteBridgePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteBridgePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateBridgePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateBridgePort() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* streamer) {
                       return this->StreamedUpdateBridgePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateBridgePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateBridgePort(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateBridgePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest,::opi_api::network::evpn_gw::v1alpha1::BridgePort>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateBridgePort<WithStreamedUnaryMethod_ListBridgePorts<WithStreamedUnaryMethod_GetBridgePort<WithStreamedUnaryMethod_DeleteBridgePort<WithStreamedUnaryMethod_UpdateBridgePort<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateBridgePort<WithStreamedUnaryMethod_ListBridgePorts<WithStreamedUnaryMethod_GetBridgePort<WithStreamedUnaryMethod_DeleteBridgePort<WithStreamedUnaryMethod_UpdateBridgePort<Service > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api


#endif  // GRPC_l2_5fxpu_5finfra_5fmgr_2eproto__INCLUDED
