// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: l2_xpu_infra_mgr.proto

#include "l2_xpu_infra_mgr.pb.h"
#include "l2_xpu_infra_mgr.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

static const char* LogicalBridgeService_method_names[] = {
  "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/CreateLogicalBridge",
  "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/ListLogicalBridges",
  "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/GetLogicalBridge",
  "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/DeleteLogicalBridge",
  "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/UpdateLogicalBridge",
};

std::unique_ptr< LogicalBridgeService::Stub> LogicalBridgeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LogicalBridgeService::Stub> stub(new LogicalBridgeService::Stub(channel, options));
  return stub;
}

LogicalBridgeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateLogicalBridge_(LogicalBridgeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLogicalBridges_(LogicalBridgeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLogicalBridge_(LogicalBridgeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteLogicalBridge_(LogicalBridgeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateLogicalBridge_(LogicalBridgeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LogicalBridgeService::Stub::CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateLogicalBridge_, context, request, response);
}

void LogicalBridgeService::Stub::async::CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLogicalBridge_, context, request, response, std::move(f));
}

void LogicalBridgeService::Stub::async::CreateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLogicalBridge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* LogicalBridgeService::Stub::PrepareAsyncCreateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateLogicalBridge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* LogicalBridgeService::Stub::AsyncCreateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateLogicalBridgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LogicalBridgeService::Stub::ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListLogicalBridges_, context, request, response);
}

void LogicalBridgeService::Stub::async::ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLogicalBridges_, context, request, response, std::move(f));
}

void LogicalBridgeService::Stub::async::ListLogicalBridges(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLogicalBridges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* LogicalBridgeService::Stub::PrepareAsyncListLogicalBridgesRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListLogicalBridges_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>* LogicalBridgeService::Stub::AsyncListLogicalBridgesRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListLogicalBridgesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LogicalBridgeService::Stub::GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLogicalBridge_, context, request, response);
}

void LogicalBridgeService::Stub::async::GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogicalBridge_, context, request, response, std::move(f));
}

void LogicalBridgeService::Stub::async::GetLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogicalBridge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* LogicalBridgeService::Stub::PrepareAsyncGetLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLogicalBridge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* LogicalBridgeService::Stub::AsyncGetLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLogicalBridgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LogicalBridgeService::Stub::DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteLogicalBridge_, context, request, response);
}

void LogicalBridgeService::Stub::async::DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLogicalBridge_, context, request, response, std::move(f));
}

void LogicalBridgeService::Stub::async::DeleteLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLogicalBridge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LogicalBridgeService::Stub::PrepareAsyncDeleteLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteLogicalBridge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LogicalBridgeService::Stub::AsyncDeleteLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteLogicalBridgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LogicalBridgeService::Stub::UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateLogicalBridge_, context, request, response);
}

void LogicalBridgeService::Stub::async::UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateLogicalBridge_, context, request, response, std::move(f));
}

void LogicalBridgeService::Stub::async::UpdateLogicalBridge(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateLogicalBridge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* LogicalBridgeService::Stub::PrepareAsyncUpdateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateLogicalBridge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>* LogicalBridgeService::Stub::AsyncUpdateLogicalBridgeRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateLogicalBridgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

LogicalBridgeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicalBridgeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicalBridgeService::Service, ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicalBridgeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* resp) {
               return service->CreateLogicalBridge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicalBridgeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicalBridgeService::Service, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicalBridgeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* resp) {
               return service->ListLogicalBridges(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicalBridgeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicalBridgeService::Service, ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicalBridgeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* resp) {
               return service->GetLogicalBridge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicalBridgeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicalBridgeService::Service, ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicalBridgeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteLogicalBridge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicalBridgeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicalBridgeService::Service, ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicalBridgeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* resp) {
               return service->UpdateLogicalBridge(ctx, req, resp);
             }, this)));
}

LogicalBridgeService::Service::~Service() {
}

::grpc::Status LogicalBridgeService::Service::CreateLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LogicalBridgeService::Service::ListLogicalBridges(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LogicalBridgeService::Service::GetLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LogicalBridgeService::Service::DeleteLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LogicalBridgeService::Service::UpdateLogicalBridge(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* request, ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BridgePortService_method_names[] = {
  "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/CreateBridgePort",
  "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/ListBridgePorts",
  "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/GetBridgePort",
  "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/DeleteBridgePort",
  "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/UpdateBridgePort",
};

std::unique_ptr< BridgePortService::Stub> BridgePortService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BridgePortService::Stub> stub(new BridgePortService::Stub(channel, options));
  return stub;
}

BridgePortService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateBridgePort_(BridgePortService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBridgePorts_(BridgePortService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBridgePort_(BridgePortService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteBridgePort_(BridgePortService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBridgePort_(BridgePortService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BridgePortService::Stub::CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBridgePort_, context, request, response);
}

void BridgePortService::Stub::async::CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBridgePort_, context, request, response, std::move(f));
}

void BridgePortService::Stub::async::CreateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBridgePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* BridgePortService::Stub::PrepareAsyncCreateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBridgePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* BridgePortService::Stub::AsyncCreateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBridgePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BridgePortService::Stub::ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBridgePorts_, context, request, response);
}

void BridgePortService::Stub::async::ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBridgePorts_, context, request, response, std::move(f));
}

void BridgePortService::Stub::async::ListBridgePorts(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBridgePorts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* BridgePortService::Stub::PrepareAsyncListBridgePortsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBridgePorts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>* BridgePortService::Stub::AsyncListBridgePortsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBridgePortsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BridgePortService::Stub::GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBridgePort_, context, request, response);
}

void BridgePortService::Stub::async::GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBridgePort_, context, request, response, std::move(f));
}

void BridgePortService::Stub::async::GetBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBridgePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* BridgePortService::Stub::PrepareAsyncGetBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBridgePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* BridgePortService::Stub::AsyncGetBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBridgePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BridgePortService::Stub::DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBridgePort_, context, request, response);
}

void BridgePortService::Stub::async::DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBridgePort_, context, request, response, std::move(f));
}

void BridgePortService::Stub::async::DeleteBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBridgePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* BridgePortService::Stub::PrepareAsyncDeleteBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBridgePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* BridgePortService::Stub::AsyncDeleteBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBridgePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BridgePortService::Stub::UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBridgePort_, context, request, response);
}

void BridgePortService::Stub::async::UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBridgePort_, context, request, response, std::move(f));
}

void BridgePortService::Stub::async::UpdateBridgePort(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBridgePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* BridgePortService::Stub::PrepareAsyncUpdateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBridgePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::BridgePort>* BridgePortService::Stub::AsyncUpdateBridgePortRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBridgePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

BridgePortService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgePortService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgePortService::Service, ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgePortService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::BridgePort* resp) {
               return service->CreateBridgePort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgePortService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgePortService::Service, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgePortService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* resp) {
               return service->ListBridgePorts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgePortService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgePortService::Service, ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgePortService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::BridgePort* resp) {
               return service->GetBridgePort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgePortService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgePortService::Service, ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgePortService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteBridgePort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BridgePortService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BridgePortService::Service, ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, ::opi_api::network::evpn_gw::v1alpha1::BridgePort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BridgePortService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::BridgePort* resp) {
               return service->UpdateBridgePort(ctx, req, resp);
             }, this)));
}

BridgePortService::Service::~Service() {
}

::grpc::Status BridgePortService::Service::CreateBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BridgePortService::Service::ListBridgePorts(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BridgePortService::Service::GetBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BridgePortService::Service::DeleteBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BridgePortService::Service::UpdateBridgePort(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* request, ::opi_api::network::evpn_gw::v1alpha1::BridgePort* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace network
}  // namespace evpn_gw
}  // namespace v1alpha1

