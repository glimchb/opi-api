// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: l3_xpu_infra_mgr.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)
// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: Word "Status" will be used instead of "State". --)
//
#ifndef GRPC_l3_5fxpu_5finfra_5fmgr_2eproto__INCLUDED
#define GRPC_l3_5fxpu_5finfra_5fmgr_2eproto__INCLUDED

#include "l3_xpu_infra_mgr.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

// Management of Vrf Resources
class VrfService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.network.evpn_gw.v1alpha1.VrfService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a Vrf
    virtual ::grpc::Status CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> AsyncCreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(AsyncCreateVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> PrepareAsyncCreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(PrepareAsyncCreateVrfRaw(context, request, cq));
    }
    // List Vrfs
    virtual ::grpc::Status ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>> AsyncListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>>(AsyncListVrfsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>> PrepareAsyncListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>>(PrepareAsyncListVrfsRaw(context, request, cq));
    }
    // Retrieve a Vrf
    virtual ::grpc::Status GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> AsyncGetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(AsyncGetVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> PrepareAsyncGetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(PrepareAsyncGetVrfRaw(context, request, cq));
    }
    // Delete a Vrf
    virtual ::grpc::Status DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteVrfRaw(context, request, cq));
    }
    // Update a Vrf
    virtual ::grpc::Status UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> AsyncUpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(AsyncUpdateVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> PrepareAsyncUpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(PrepareAsyncUpdateVrfRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a Vrf
      virtual void CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Vrfs
      virtual void ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve a Vrf
      virtual void GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a Vrf
      virtual void DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update a Vrf
      virtual void UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* AsyncCreateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* PrepareAsyncCreateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* AsyncListVrfsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* PrepareAsyncListVrfsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* AsyncGetVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* PrepareAsyncGetVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* AsyncUpdateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* PrepareAsyncUpdateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> AsyncCreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(AsyncCreateVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> PrepareAsyncCreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(PrepareAsyncCreateVrfRaw(context, request, cq));
    }
    ::grpc::Status ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>> AsyncListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>>(AsyncListVrfsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>> PrepareAsyncListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>>(PrepareAsyncListVrfsRaw(context, request, cq));
    }
    ::grpc::Status GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> AsyncGetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(AsyncGetVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> PrepareAsyncGetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(PrepareAsyncGetVrfRaw(context, request, cq));
    }
    ::grpc::Status DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteVrfRaw(context, request, cq));
    }
    ::grpc::Status UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> AsyncUpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(AsyncUpdateVrfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>> PrepareAsyncUpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>>(PrepareAsyncUpdateVrfRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)>) override;
      void CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)>) override;
      void GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)>) override;
      void UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* AsyncCreateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* PrepareAsyncCreateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* AsyncListVrfsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* PrepareAsyncListVrfsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* AsyncGetVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* PrepareAsyncGetVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* AsyncUpdateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* PrepareAsyncUpdateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVrf_;
    const ::grpc::internal::RpcMethod rpcmethod_ListVrfs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVrf_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVrf_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateVrf_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a Vrf
    virtual ::grpc::Status CreateVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response);
    // List Vrfs
    virtual ::grpc::Status ListVrfs(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response);
    // Retrieve a Vrf
    virtual ::grpc::Status GetVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response);
    // Delete a Vrf
    virtual ::grpc::Status DeleteVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response);
    // Update a Vrf
    virtual ::grpc::Status UpdateVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateVrf() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVrf(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVrfs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListVrfs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListVrfs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVrfs(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVrfs(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVrf() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVrf(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteVrf() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVrf(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateVrf() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVrf(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateVrf<WithAsyncMethod_ListVrfs<WithAsyncMethod_GetVrf<WithAsyncMethod_DeleteVrf<WithAsyncMethod_UpdateVrf<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateVrf() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) { return this->CreateVrf(context, request, response); }));}
    void SetMessageAllocatorFor_CreateVrf(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListVrfs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListVrfs() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response) { return this->ListVrfs(context, request, response); }));}
    void SetMessageAllocatorFor_ListVrfs(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListVrfs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVrfs(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListVrfs(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVrf() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) { return this->GetVrf(context, request, response); }));}
    void SetMessageAllocatorFor_GetVrf(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteVrf() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response) { return this->DeleteVrf(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteVrf(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateVrf() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) { return this->UpdateVrf(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateVrf(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateVrf<WithCallbackMethod_ListVrfs<WithCallbackMethod_GetVrf<WithCallbackMethod_DeleteVrf<WithCallbackMethod_UpdateVrf<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateVrf() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListVrfs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListVrfs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListVrfs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVrfs(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVrf() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteVrf() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateVrf() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateVrf() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVrf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListVrfs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListVrfs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListVrfs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVrfs(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVrfs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVrf() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVrf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteVrf() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVrf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateVrf() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVrf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateVrf() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateVrf(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListVrfs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListVrfs() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListVrfs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListVrfs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVrfs(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListVrfs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVrf() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVrf(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteVrf() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteVrf(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateVrf() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateVrf(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateVrf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateVrf() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>* streamer) {
                       return this->StreamedCreateVrf(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVrf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest,::opi_api::network::evpn_gw::v1alpha1::Vrf>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVrfs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListVrfs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* streamer) {
                       return this->StreamedListVrfs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListVrfs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVrfs(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVrfs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest,::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVrf() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>* streamer) {
                       return this->StreamedGetVrf(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVrf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest,::opi_api::network::evpn_gw::v1alpha1::Vrf>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteVrf() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteVrf(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteVrf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateVrf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateVrf() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf>* streamer) {
                       return this->StreamedUpdateVrf(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateVrf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateVrf(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Vrf* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateVrf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest,::opi_api::network::evpn_gw::v1alpha1::Vrf>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateVrf<WithStreamedUnaryMethod_ListVrfs<WithStreamedUnaryMethod_GetVrf<WithStreamedUnaryMethod_DeleteVrf<WithStreamedUnaryMethod_UpdateVrf<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateVrf<WithStreamedUnaryMethod_ListVrfs<WithStreamedUnaryMethod_GetVrf<WithStreamedUnaryMethod_DeleteVrf<WithStreamedUnaryMethod_UpdateVrf<Service > > > > > StreamedService;
};

// Management of switch virtual interfaces (SVIs) binding LogicalBridges to VRFs.
class SviService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.network.evpn_gw.v1alpha1.SviService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a Svi
    virtual ::grpc::Status CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>> AsyncCreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(AsyncCreateSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>> PrepareAsyncCreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(PrepareAsyncCreateSviRaw(context, request, cq));
    }
    // List Svis
    virtual ::grpc::Status ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>> AsyncListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>>(AsyncListSvisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>> PrepareAsyncListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>>(PrepareAsyncListSvisRaw(context, request, cq));
    }
    // Retrieve a Svi
    virtual ::grpc::Status GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>> AsyncGetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(AsyncGetSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>> PrepareAsyncGetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(PrepareAsyncGetSviRaw(context, request, cq));
    }
    // Delete a Svi
    virtual ::grpc::Status DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSviRaw(context, request, cq));
    }
    // Update a Svi
    virtual ::grpc::Status UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>> AsyncUpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(AsyncUpdateSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>> PrepareAsyncUpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(PrepareAsyncUpdateSviRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a Svi
      virtual void CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Svis
      virtual void ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve a Svi
      virtual void GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a Svi
      virtual void DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update a Svi
      virtual void UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>* AsyncCreateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>* PrepareAsyncCreateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* AsyncListSvisRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* PrepareAsyncListSvisRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>* AsyncGetSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>* PrepareAsyncGetSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>* AsyncUpdateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::evpn_gw::v1alpha1::Svi>* PrepareAsyncUpdateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>> AsyncCreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(AsyncCreateSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>> PrepareAsyncCreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(PrepareAsyncCreateSviRaw(context, request, cq));
    }
    ::grpc::Status ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>> AsyncListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>>(AsyncListSvisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>> PrepareAsyncListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>>(PrepareAsyncListSvisRaw(context, request, cq));
    }
    ::grpc::Status GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>> AsyncGetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(AsyncGetSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>> PrepareAsyncGetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(PrepareAsyncGetSviRaw(context, request, cq));
    }
    ::grpc::Status DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSviRaw(context, request, cq));
    }
    ::grpc::Status UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>> AsyncUpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(AsyncUpdateSviRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>> PrepareAsyncUpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>>(PrepareAsyncUpdateSviRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)>) override;
      void CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)>) override;
      void GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)>) override;
      void UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* AsyncCreateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* PrepareAsyncCreateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* AsyncListSvisRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* PrepareAsyncListSvisRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* AsyncGetSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* PrepareAsyncGetSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* AsyncUpdateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* PrepareAsyncUpdateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSvi_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSvis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSvi_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSvi_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSvi_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a Svi
    virtual ::grpc::Status CreateSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response);
    // List Svis
    virtual ::grpc::Status ListSvis(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response);
    // Retrieve a Svi
    virtual ::grpc::Status GetSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response);
    // Delete a Svi
    virtual ::grpc::Status DeleteSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response);
    // Update a Svi
    virtual ::grpc::Status UpdateSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSvi() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSvi(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::Svi>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSvis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSvis() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListSvis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSvis(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSvis(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSvi() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSvi(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::Svi>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSvi() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSvi(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSvi() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSvi(::grpc::ServerContext* context, ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::evpn_gw::v1alpha1::Svi>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSvi<WithAsyncMethod_ListSvis<WithAsyncMethod_GetSvi<WithAsyncMethod_DeleteSvi<WithAsyncMethod_UpdateSvi<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSvi() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) { return this->CreateSvi(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSvi(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSvis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSvis() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response) { return this->ListSvis(context, request, response); }));}
    void SetMessageAllocatorFor_ListSvis(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSvis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSvis(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSvis(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSvi() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) { return this->GetSvi(context, request, response); }));}
    void SetMessageAllocatorFor_GetSvi(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSvi() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response) { return this->DeleteSvi(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSvi(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSvi() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) { return this->UpdateSvi(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSvi(
        ::grpc::MessageAllocator< ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateSvi<WithCallbackMethod_ListSvis<WithCallbackMethod_GetSvi<WithCallbackMethod_DeleteSvi<WithCallbackMethod_UpdateSvi<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSvi() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSvis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSvis() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListSvis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSvis(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSvi() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSvi() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSvi() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSvi() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSvi(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSvis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSvis() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListSvis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSvis(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSvis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSvi() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSvi(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSvi() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSvi(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSvi() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSvi(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSvi() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSvi(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSvis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSvis() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSvis(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSvis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSvis(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSvis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSvi() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSvi(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSvi() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSvi(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSvi() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSvi(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSvi(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSvi() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>* streamer) {
                       return this->StreamedCreateSvi(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSvi(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest,::opi_api::network::evpn_gw::v1alpha1::Svi>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSvis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSvis() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* streamer) {
                       return this->StreamedListSvis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSvis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSvis(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSvis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest,::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSvi() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>* streamer) {
                       return this->StreamedGetSvi(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSvi(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest,::opi_api::network::evpn_gw::v1alpha1::Svi>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSvi() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteSvi(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSvi(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSvi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSvi() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi>* streamer) {
                       return this->StreamedUpdateSvi(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSvi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSvi(::grpc::ServerContext* /*context*/, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* /*request*/, ::opi_api::network::evpn_gw::v1alpha1::Svi* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSvi(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest,::opi_api::network::evpn_gw::v1alpha1::Svi>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSvi<WithStreamedUnaryMethod_ListSvis<WithStreamedUnaryMethod_GetSvi<WithStreamedUnaryMethod_DeleteSvi<WithStreamedUnaryMethod_UpdateSvi<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSvi<WithStreamedUnaryMethod_ListSvis<WithStreamedUnaryMethod_GetSvi<WithStreamedUnaryMethod_DeleteSvi<WithStreamedUnaryMethod_UpdateSvi<Service > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api


#endif  // GRPC_l3_5fxpu_5finfra_5fmgr_2eproto__INCLUDED
