// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: l3_xpu_infra_mgr.proto

#include "l3_xpu_infra_mgr.pb.h"
#include "l3_xpu_infra_mgr.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

static const char* VrfService_method_names[] = {
  "/opi_api.network.evpn_gw.v1alpha1.VrfService/CreateVrf",
  "/opi_api.network.evpn_gw.v1alpha1.VrfService/ListVrfs",
  "/opi_api.network.evpn_gw.v1alpha1.VrfService/GetVrf",
  "/opi_api.network.evpn_gw.v1alpha1.VrfService/DeleteVrf",
  "/opi_api.network.evpn_gw.v1alpha1.VrfService/UpdateVrf",
};

std::unique_ptr< VrfService::Stub> VrfService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VrfService::Stub> stub(new VrfService::Stub(channel, options));
  return stub;
}

VrfService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateVrf_(VrfService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListVrfs_(VrfService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVrf_(VrfService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteVrf_(VrfService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateVrf_(VrfService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VrfService::Stub::CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateVrf_, context, request, response);
}

void VrfService::Stub::async::CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVrf_, context, request, response, std::move(f));
}

void VrfService::Stub::async::CreateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVrf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* VrfService::Stub::PrepareAsyncCreateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateVrf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* VrfService::Stub::AsyncCreateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateVrfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VrfService::Stub::ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListVrfs_, context, request, response);
}

void VrfService::Stub::async::ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVrfs_, context, request, response, std::move(f));
}

void VrfService::Stub::async::ListVrfs(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVrfs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* VrfService::Stub::PrepareAsyncListVrfsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListVrfs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>* VrfService::Stub::AsyncListVrfsRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListVrfsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VrfService::Stub::GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVrf_, context, request, response);
}

void VrfService::Stub::async::GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVrf_, context, request, response, std::move(f));
}

void VrfService::Stub::async::GetVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVrf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* VrfService::Stub::PrepareAsyncGetVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVrf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* VrfService::Stub::AsyncGetVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVrfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VrfService::Stub::DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteVrf_, context, request, response);
}

void VrfService::Stub::async::DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteVrf_, context, request, response, std::move(f));
}

void VrfService::Stub::async::DeleteVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteVrf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VrfService::Stub::PrepareAsyncDeleteVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteVrf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VrfService::Stub::AsyncDeleteVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteVrfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VrfService::Stub::UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateVrf_, context, request, response);
}

void VrfService::Stub::async::UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateVrf_, context, request, response, std::move(f));
}

void VrfService::Stub::async::UpdateVrf(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateVrf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* VrfService::Stub::PrepareAsyncUpdateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateVrf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Vrf>* VrfService::Stub::AsyncUpdateVrfRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateVrfRaw(context, request, cq);
  result->StartCall();
  return result;
}

VrfService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrfService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrfService::Service, ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VrfService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::Vrf* resp) {
               return service->CreateVrf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrfService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrfService::Service, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VrfService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* resp) {
               return service->ListVrfs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrfService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrfService::Service, ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VrfService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::Vrf* resp) {
               return service->GetVrf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrfService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrfService::Service, ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VrfService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteVrf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrfService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrfService::Service, ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest, ::opi_api::network::evpn_gw::v1alpha1::Vrf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VrfService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::Vrf* resp) {
               return service->UpdateVrf(ctx, req, resp);
             }, this)));
}

VrfService::Service::~Service() {
}

::grpc::Status VrfService::Service::CreateVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VrfService::Service::ListVrfs(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VrfService::Service::GetVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VrfService::Service::DeleteVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VrfService::Service::UpdateVrf(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateVrfRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Vrf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SviService_method_names[] = {
  "/opi_api.network.evpn_gw.v1alpha1.SviService/CreateSvi",
  "/opi_api.network.evpn_gw.v1alpha1.SviService/ListSvis",
  "/opi_api.network.evpn_gw.v1alpha1.SviService/GetSvi",
  "/opi_api.network.evpn_gw.v1alpha1.SviService/DeleteSvi",
  "/opi_api.network.evpn_gw.v1alpha1.SviService/UpdateSvi",
};

std::unique_ptr< SviService::Stub> SviService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SviService::Stub> stub(new SviService::Stub(channel, options));
  return stub;
}

SviService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateSvi_(SviService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSvis_(SviService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSvi_(SviService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSvi_(SviService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSvi_(SviService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SviService::Stub::CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSvi_, context, request, response);
}

void SviService::Stub::async::CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSvi_, context, request, response, std::move(f));
}

void SviService::Stub::async::CreateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSvi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* SviService::Stub::PrepareAsyncCreateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::Svi, ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSvi_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* SviService::Stub::AsyncCreateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSviRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SviService::Stub::ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSvis_, context, request, response);
}

void SviService::Stub::async::ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSvis_, context, request, response, std::move(f));
}

void SviService::Stub::async::ListSvis(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSvis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* SviService::Stub::PrepareAsyncListSvisRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSvis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>* SviService::Stub::AsyncListSvisRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSvisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SviService::Stub::GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSvi_, context, request, response);
}

void SviService::Stub::async::GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSvi_, context, request, response, std::move(f));
}

void SviService::Stub::async::GetSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSvi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* SviService::Stub::PrepareAsyncGetSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::Svi, ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSvi_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* SviService::Stub::AsyncGetSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSviRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SviService::Stub::DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSvi_, context, request, response);
}

void SviService::Stub::async::DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSvi_, context, request, response, std::move(f));
}

void SviService::Stub::async::DeleteSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSvi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SviService::Stub::PrepareAsyncDeleteSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSvi_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SviService::Stub::AsyncDeleteSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSviRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SviService::Stub::UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSvi_, context, request, response);
}

void SviService::Stub::async::UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSvi_, context, request, response, std::move(f));
}

void SviService::Stub::async::UpdateSvi(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSvi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* SviService::Stub::PrepareAsyncUpdateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::evpn_gw::v1alpha1::Svi, ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSvi_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::evpn_gw::v1alpha1::Svi>* SviService::Stub::AsyncUpdateSviRaw(::grpc::ClientContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSviRaw(context, request, cq);
  result->StartCall();
  return result;
}

SviService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SviService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SviService::Service, ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SviService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::Svi* resp) {
               return service->CreateSvi(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SviService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SviService::Service, ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SviService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* resp) {
               return service->ListSvis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SviService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SviService::Service, ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SviService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::Svi* resp) {
               return service->GetSvi(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SviService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SviService::Service, ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SviService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteSvi(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SviService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SviService::Service, ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest, ::opi_api::network::evpn_gw::v1alpha1::Svi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SviService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* req,
             ::opi_api::network::evpn_gw::v1alpha1::Svi* resp) {
               return service->UpdateSvi(ctx, req, resp);
             }, this)));
}

SviService::Service::~Service() {
}

::grpc::Status SviService::Service::CreateSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SviService::Service::ListSvis(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* request, ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SviService::Service::GetSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SviService::Service::DeleteSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SviService::Service::UpdateSvi(::grpc::ServerContext* context, const ::opi_api::network::evpn_gw::v1alpha1::UpdateSviRequest* request, ::opi_api::network::evpn_gw::v1alpha1::Svi* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace network
}  // namespace evpn_gw
}  // namespace v1alpha1

