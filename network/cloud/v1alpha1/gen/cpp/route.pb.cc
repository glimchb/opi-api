// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#include "route.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR RouteTable::RouteTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteTableDefaultTypeInternal() {}
  union {
    RouteTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteTableDefaultTypeInternal _RouteTable_default_instance_;
PROTOBUF_CONSTEXPR RouteTableSpec::RouteTableSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_)*/{}
  , /*decltype(_impl_.af_)*/0
  , /*decltype(_impl_.priority_enable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteTableSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteTableSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteTableSpecDefaultTypeInternal() {}
  union {
    RouteTableSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteTableSpecDefaultTypeInternal _RouteTableSpec_default_instance_;
PROTOBUF_CONSTEXPR RouteInfo::RouteInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attrs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteInfoDefaultTypeInternal() {}
  union {
    RouteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
PROTOBUF_CONSTEXPR RouteTableStatus::RouteTableStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vpc_count_)*/0
  , /*decltype(_impl_.subnet_count_)*/0
  , /*decltype(_impl_.vnic_count_)*/0
  , /*decltype(_impl_.pool_id_)*/0
  , /*decltype(_impl_.route_table_base_address_)*/uint64_t{0u}
  , /*decltype(_impl_.hw_idx_)*/0
  , /*decltype(_impl_.hw_lpm_block_idx_)*/0
  , /*decltype(_impl_.hw_lpm_rewrite_block_idx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteTableStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteTableStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteTableStatusDefaultTypeInternal() {}
  union {
    RouteTableStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteTableStatusDefaultTypeInternal _RouteTableStatus_default_instance_;
PROTOBUF_CONSTEXPR RouteAttrs::RouteAttrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.overlay_mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prefix_)*/nullptr
  , /*decltype(_impl_.encap_)*/nullptr
  , /*decltype(_impl_.route_class_)*/0
  , /*decltype(_impl_.class_priority_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.tos_)*/0
  , /*decltype(_impl_.nh_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RouteAttrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteAttrsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteAttrsDefaultTypeInternal() {}
  union {
    RouteAttrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteAttrsDefaultTypeInternal _RouteAttrs_default_instance_;
PROTOBUF_CONSTEXPR VPCPeerNhInfo::VPCPeerNhInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vpc_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VPCPeerNhInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VPCPeerNhInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VPCPeerNhInfoDefaultTypeInternal() {}
  union {
    VPCPeerNhInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VPCPeerNhInfoDefaultTypeInternal _VPCPeerNhInfo_default_instance_;
PROTOBUF_CONSTEXPR OverlayNextHopIPInfo::OverlayNextHopIPInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nexthop_ip_)*/{}
  , /*decltype(_impl_.nexthop_mac_)*/{}
  , /*decltype(_impl_.vpc_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverlayNextHopIPInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlayNextHopIPInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlayNextHopIPInfoDefaultTypeInternal() {}
  union {
    OverlayNextHopIPInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlayNextHopIPInfoDefaultTypeInternal _OverlayNextHopIPInfo_default_instance_;
PROTOBUF_CONSTEXPR RouteId::RouteId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteIdDefaultTypeInternal() {}
  union {
    RouteId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteIdDefaultTypeInternal _RouteId_default_instance_;
PROTOBUF_CONSTEXPR Route::Route(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDefaultTypeInternal _Route_default_instance_;
PROTOBUF_CONSTEXPR RouteSpec::RouteSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attrs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteSpecDefaultTypeInternal() {}
  union {
    RouteSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteSpecDefaultTypeInternal _RouteSpec_default_instance_;
PROTOBUF_CONSTEXPR RouteStatus::RouteStatus(
    ::_pbi::ConstantInitialized) {}
struct RouteStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteStatusDefaultTypeInternal() {}
  union {
    RouteStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteStatusDefaultTypeInternal _RouteStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_route_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_route_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_route_2eproto = nullptr;

const uint32_t TableStruct_route_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, _impl_.af_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, _impl_.priority_enable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, _impl_.routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteInfo, _impl_.route_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteInfo, _impl_.attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.vpc_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.subnet_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.vnic_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.pool_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.hw_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.route_table_base_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.hw_lpm_block_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _impl_.hw_lpm_rewrite_block_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.route_class_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.class_priority_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.priority_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.tos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.overlay_mac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _impl_.nh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo, _impl_.vpc_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo, _impl_.route_table_name_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, _impl_.nexthop_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, _impl_.nexthop_mac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, _impl_.vpc_name_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteId, _impl_.route_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteId, _impl_.route_table_name_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, _impl_.route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, _impl_.attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteTable)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteTableSpec)},
  { 18, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteInfo)},
  { 26, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteTableStatus)},
  { 40, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteAttrs)},
  { 61, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo)},
  { 69, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo)},
  { 78, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteId)},
  { 86, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Route)},
  { 95, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteSpec)},
  { 103, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_RouteTable_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteTableSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteInfo_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteTableStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteAttrs_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_VPCPeerNhInfo_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_OverlayNextHopIPInfo_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteId_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_Route_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_RouteStatus_default_instance_._instance,
};

const char descriptor_table_protodef_route_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013route.proto\022\036opi_api.network.cloud.v1a"
  "lpha1\032\022networktypes.proto\032\031google/api/re"
  "source.proto\"\344\001\n\nRouteTable\022\014\n\004name\030\001 \001("
  "\t\022<\n\004spec\030\002 \001(\0132..opi_api.network.cloud."
  "v1alpha1.RouteTableSpec\022@\n\006status\030\003 \001(\0132"
  "0.opi_api.network.cloud.v1alpha1.RouteTa"
  "bleStatus:H\352AE\n)opi_api.network.cloud.v1"
  "alpha1/routetable\022\030routetables/{routetab"
  "le}\"\235\001\n\016RouteTableSpec\0227\n\002af\030\001 \001(\0162+.opi"
  "_api.network.opinetcommon.v1alpha1.IpAf\022"
  "\027\n\017priority_enable\030\002 \001(\010\0229\n\006routes\030\003 \003(\013"
  "2).opi_api.network.cloud.v1alpha1.RouteI"
  "nfo\"X\n\tRouteInfo\022\020\n\010route_id\030\001 \001(\t\0229\n\005at"
  "trs\030\002 \001(\0132*.opi_api.network.cloud.v1alph"
  "a1.RouteAttrs\"\316\001\n\020RouteTableStatus\022\021\n\tvp"
  "c_count\030\001 \001(\005\022\024\n\014subnet_count\030\002 \001(\005\022\022\n\nv"
  "nic_count\030\003 \001(\005\022\017\n\007pool_id\030\004 \001(\005\022\016\n\006hw_i"
  "dx\030\005 \001(\005\022 \n\030route_table_base_address\030\006 \001"
  "(\004\022\030\n\020hw_lpm_block_idx\030\007 \001(\005\022 \n\030hw_lpm_r"
  "ewrite_block_idx\030\010 \001(\005\"\303\004\n\nRouteAttrs\022\?\n"
  "\006prefix\030\001 \001(\0132/.opi_api.network.opinetco"
  "mmon.v1alpha1.IPPrefix\022\?\n\013route_class\030\002 "
  "\001(\0162*.opi_api.network.cloud.v1alpha1.Rou"
  "teClass\022\026\n\016class_priority\030\003 \001(\005\022\020\n\010prior"
  "ity\030\004 \001(\005\022R\n\022overlay_nh_ip_info\030\005 \001(\01324."
  "opi_api.network.cloud.v1alpha1.OverlayNe"
  "xtHopIPInfoH\000\022\032\n\020nexthop_name_ref\030\006 \001(\tH"
  "\000\022\033\n\021nh_group_name_ref\030\007 \001(\tH\000\022D\n\013vpc_nh"
  "_info\030\010 \001(\0132-.opi_api.network.cloud.v1al"
  "pha1.VPCPeerNhInfoH\000\022\031\n\017tunnel_name_ref\030"
  "\t \001(\tH\000\022\036\n\024route_table_name_ref\030\n \001(\tH\000\022"
  "\026\n\014eval_mapping\030\013 \001(\010H\000\022\013\n\003tos\030\014 \001(\005\022;\n\005"
  "encap\030\r \001(\0132,.opi_api.network.opinetcomm"
  "on.v1alpha1.Encap\022\023\n\013overlay_mac\030\016 \001(\014B\004"
  "\n\002nh\"C\n\rVPCPeerNhInfo\022\024\n\014vpc_name_ref\030\001 "
  "\001(\t\022\034\n\024route_table_name_ref\030\002 \001(\t\"\207\001\n\024Ov"
  "erlayNextHopIPInfo\022D\n\nnexthop_ip\030\001 \003(\01320"
  ".opi_api.network.opinetcommon.v1alpha1.I"
  "PAddress\022\023\n\013nexthop_mac\030\002 \003(\014\022\024\n\014vpc_nam"
  "e_ref\030\003 \001(\t\"9\n\007RouteId\022\020\n\010route_id\030\001 \001(\t"
  "\022\034\n\024route_table_name_ref\030\002 \001(\t\"\306\001\n\005Route"
  "\022\014\n\004name\030\001 \001(\t\0227\n\004spec\030\002 \001(\0132).opi_api.n"
  "etwork.cloud.v1alpha1.RouteSpec\022;\n\006statu"
  "s\030\003 \001(\0132+.opi_api.network.cloud.v1alpha1"
  ".RouteStatus:9\352A6\n$opi_api.network.cloud"
  ".v1alpha1/route\022\016routes/{route}\"d\n\tRoute"
  "Spec\022\034\n\024route_table_name_ref\030\001 \001(\t\0229\n\005at"
  "trs\030\002 \001(\0132*.opi_api.network.cloud.v1alph"
  "a1.RouteAttrs\"\r\n\013RouteStatus*q\n\nRouteCla"
  "ss\022\033\n\027ROUTE_CLASS_UNSPECIFIED\020\000\022\030\n\024ROUTE"
  "_CLASS_INTERNET\020\001\022\027\n\023ROUTE_CLASS_SERVICE"
  "\020\002\022\023\n\017ROUTE_CLASS_VPC\020\003Bk\n\036opi_api.netwo"
  "rk.cloud.v1alpha1B\nRouteProtoP\001Z;github."
  "com/opiproject/opi-api/network/cloud/v1a"
  "lpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_route_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_route_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_route_2eproto = {
    false, false, 2180, descriptor_table_protodef_route_2eproto,
    "route.proto",
    &descriptor_table_route_2eproto_once, descriptor_table_route_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_route_2eproto::offsets,
    file_level_metadata_route_2eproto, file_level_enum_descriptors_route_2eproto,
    file_level_service_descriptors_route_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_route_2eproto_getter() {
  return &descriptor_table_route_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_route_2eproto(&descriptor_table_route_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_route_2eproto);
  return file_level_enum_descriptors_route_2eproto[0];
}
bool RouteClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RouteTable::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::RouteTableSpec& spec(const RouteTable* msg);
  static const ::opi_api::network::cloud::v1alpha1::RouteTableStatus& status(const RouteTable* msg);
};

const ::opi_api::network::cloud::v1alpha1::RouteTableSpec&
RouteTable::_Internal::spec(const RouteTable* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::RouteTableStatus&
RouteTable::_Internal::status(const RouteTable* msg) {
  return *msg->_impl_.status_;
}
RouteTable::RouteTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteTable)
}
RouteTable::RouteTable(const RouteTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::RouteTableSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::RouteTableStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteTable)
}

inline void RouteTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteTable::~RouteTable() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void RouteTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteTable::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteTable.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteTableSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteTableStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteTable.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.RouteTableSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteTableStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteTable)
  return target;
}

size_t RouteTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.RouteTableSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteTableStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTable::GetClassData() const { return &_class_data_; }


void RouteTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteTable*>(&to_msg);
  auto& from = static_cast<const RouteTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::RouteTableSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::RouteTableStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTable::CopyFrom(const RouteTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTable::IsInitialized() const {
  return true;
}

void RouteTable::InternalSwap(RouteTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTable, _impl_.status_)
      + sizeof(RouteTable::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RouteTable, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[0]);
}

// ===================================================================

class RouteTableSpec::_Internal {
 public:
};

RouteTableSpec::RouteTableSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteTableSpec)
}
RouteTableSpec::RouteTableSpec(const RouteTableSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteTableSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){from._impl_.routes_}
    , decltype(_impl_.af_){}
    , decltype(_impl_.priority_enable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.af_, &from._impl_.af_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_enable_) -
    reinterpret_cast<char*>(&_impl_.af_)) + sizeof(_impl_.priority_enable_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteTableSpec)
}

inline void RouteTableSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){arena}
    , decltype(_impl_.af_){0}
    , decltype(_impl_.priority_enable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteTableSpec::~RouteTableSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteTableSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_.~RepeatedPtrField();
}

void RouteTableSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteTableSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_.Clear();
  ::memset(&_impl_.af_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_enable_) -
      reinterpret_cast<char*>(&_impl_.af_)) + sizeof(_impl_.priority_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTableSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_af(static_cast<::opi_api::network::opinetcommon::v1alpha1::IpAf>(val));
        } else
          goto handle_unusual;
        continue;
      // bool priority_enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.priority_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.RouteInfo routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteTableSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 1;
  if (this->_internal_af() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_af(), target);
  }

  // bool priority_enable = 2;
  if (this->_internal_priority_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_priority_enable(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.RouteInfo routes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  return target;
}

size_t RouteTableSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.RouteInfo routes = 3;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_impl_.routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 1;
  if (this->_internal_af() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_af());
  }

  // bool priority_enable = 2;
  if (this->_internal_priority_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTableSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteTableSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTableSpec::GetClassData() const { return &_class_data_; }


void RouteTableSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteTableSpec*>(&to_msg);
  auto& from = static_cast<const RouteTableSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_.MergeFrom(from._impl_.routes_);
  if (from._internal_af() != 0) {
    _this->_internal_set_af(from._internal_af());
  }
  if (from._internal_priority_enable() != 0) {
    _this->_internal_set_priority_enable(from._internal_priority_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTableSpec::CopyFrom(const RouteTableSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTableSpec::IsInitialized() const {
  return true;
}

void RouteTableSpec::InternalSwap(RouteTableSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTableSpec, _impl_.priority_enable_)
      + sizeof(RouteTableSpec::_impl_.priority_enable_)
      - PROTOBUF_FIELD_OFFSET(RouteTableSpec, _impl_.af_)>(
          reinterpret_cast<char*>(&_impl_.af_),
          reinterpret_cast<char*>(&other->_impl_.af_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTableSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[1]);
}

// ===================================================================

class RouteInfo::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::RouteAttrs& attrs(const RouteInfo* msg);
};

const ::opi_api::network::cloud::v1alpha1::RouteAttrs&
RouteInfo::_Internal::attrs(const RouteInfo* msg) {
  return *msg->_impl_.attrs_;
}
RouteInfo::RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_id_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_id().empty()) {
    _this->_impl_.route_id_.Set(from._internal_route_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attrs()) {
    _this->_impl_.attrs_ = new ::opi_api::network::cloud::v1alpha1::RouteAttrs(*from._impl_.attrs_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteInfo)
}

inline void RouteInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_id_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attrs_;
}

void RouteInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attrs_ != nullptr) {
    delete _impl_.attrs_;
  }
  _impl_.attrs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteInfo.route_id"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteInfo.route_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_id(), target);
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attrs(this),
        _Internal::attrs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteInfo)
  return target;
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_id());
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attrs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteInfo::GetClassData() const { return &_class_data_; }


void RouteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteInfo*>(&to_msg);
  auto& from = static_cast<const RouteInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_id().empty()) {
    _this->_internal_set_route_id(from._internal_route_id());
  }
  if (from._internal_has_attrs()) {
    _this->_internal_mutable_attrs()->::opi_api::network::cloud::v1alpha1::RouteAttrs::MergeFrom(
        from._internal_attrs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_id_, lhs_arena,
      &other->_impl_.route_id_, rhs_arena
  );
  swap(_impl_.attrs_, other->_impl_.attrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[2]);
}

// ===================================================================

class RouteTableStatus::_Internal {
 public:
};

RouteTableStatus::RouteTableStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteTableStatus)
}
RouteTableStatus::RouteTableStatus(const RouteTableStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteTableStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_count_){}
    , decltype(_impl_.subnet_count_){}
    , decltype(_impl_.vnic_count_){}
    , decltype(_impl_.pool_id_){}
    , decltype(_impl_.route_table_base_address_){}
    , decltype(_impl_.hw_idx_){}
    , decltype(_impl_.hw_lpm_block_idx_){}
    , decltype(_impl_.hw_lpm_rewrite_block_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vpc_count_, &from._impl_.vpc_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hw_lpm_rewrite_block_idx_) -
    reinterpret_cast<char*>(&_impl_.vpc_count_)) + sizeof(_impl_.hw_lpm_rewrite_block_idx_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteTableStatus)
}

inline void RouteTableStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_count_){0}
    , decltype(_impl_.subnet_count_){0}
    , decltype(_impl_.vnic_count_){0}
    , decltype(_impl_.pool_id_){0}
    , decltype(_impl_.route_table_base_address_){uint64_t{0u}}
    , decltype(_impl_.hw_idx_){0}
    , decltype(_impl_.hw_lpm_block_idx_){0}
    , decltype(_impl_.hw_lpm_rewrite_block_idx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteTableStatus::~RouteTableStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteTableStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteTableStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteTableStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vpc_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hw_lpm_rewrite_block_idx_) -
      reinterpret_cast<char*>(&_impl_.vpc_count_)) + sizeof(_impl_.hw_lpm_rewrite_block_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTableStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vpc_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vpc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subnet_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.subnet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vnic_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vnic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pool_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 route_table_base_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.route_table_base_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_lpm_block_idx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hw_lpm_block_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_lpm_rewrite_block_idx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.hw_lpm_rewrite_block_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteTableStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vpc_count = 1;
  if (this->_internal_vpc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vpc_count(), target);
  }

  // int32 subnet_count = 2;
  if (this->_internal_subnet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_subnet_count(), target);
  }

  // int32 vnic_count = 3;
  if (this->_internal_vnic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_vnic_count(), target);
  }

  // int32 pool_id = 4;
  if (this->_internal_pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_pool_id(), target);
  }

  // int32 hw_idx = 5;
  if (this->_internal_hw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_hw_idx(), target);
  }

  // uint64 route_table_base_address = 6;
  if (this->_internal_route_table_base_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_route_table_base_address(), target);
  }

  // int32 hw_lpm_block_idx = 7;
  if (this->_internal_hw_lpm_block_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_hw_lpm_block_idx(), target);
  }

  // int32 hw_lpm_rewrite_block_idx = 8;
  if (this->_internal_hw_lpm_rewrite_block_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_hw_lpm_rewrite_block_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  return target;
}

size_t RouteTableStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vpc_count = 1;
  if (this->_internal_vpc_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vpc_count());
  }

  // int32 subnet_count = 2;
  if (this->_internal_subnet_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subnet_count());
  }

  // int32 vnic_count = 3;
  if (this->_internal_vnic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vnic_count());
  }

  // int32 pool_id = 4;
  if (this->_internal_pool_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pool_id());
  }

  // uint64 route_table_base_address = 6;
  if (this->_internal_route_table_base_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_route_table_base_address());
  }

  // int32 hw_idx = 5;
  if (this->_internal_hw_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hw_idx());
  }

  // int32 hw_lpm_block_idx = 7;
  if (this->_internal_hw_lpm_block_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hw_lpm_block_idx());
  }

  // int32 hw_lpm_rewrite_block_idx = 8;
  if (this->_internal_hw_lpm_rewrite_block_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hw_lpm_rewrite_block_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTableStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteTableStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTableStatus::GetClassData() const { return &_class_data_; }


void RouteTableStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteTableStatus*>(&to_msg);
  auto& from = static_cast<const RouteTableStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vpc_count() != 0) {
    _this->_internal_set_vpc_count(from._internal_vpc_count());
  }
  if (from._internal_subnet_count() != 0) {
    _this->_internal_set_subnet_count(from._internal_subnet_count());
  }
  if (from._internal_vnic_count() != 0) {
    _this->_internal_set_vnic_count(from._internal_vnic_count());
  }
  if (from._internal_pool_id() != 0) {
    _this->_internal_set_pool_id(from._internal_pool_id());
  }
  if (from._internal_route_table_base_address() != 0) {
    _this->_internal_set_route_table_base_address(from._internal_route_table_base_address());
  }
  if (from._internal_hw_idx() != 0) {
    _this->_internal_set_hw_idx(from._internal_hw_idx());
  }
  if (from._internal_hw_lpm_block_idx() != 0) {
    _this->_internal_set_hw_lpm_block_idx(from._internal_hw_lpm_block_idx());
  }
  if (from._internal_hw_lpm_rewrite_block_idx() != 0) {
    _this->_internal_set_hw_lpm_rewrite_block_idx(from._internal_hw_lpm_rewrite_block_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTableStatus::CopyFrom(const RouteTableStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTableStatus::IsInitialized() const {
  return true;
}

void RouteTableStatus::InternalSwap(RouteTableStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTableStatus, _impl_.hw_lpm_rewrite_block_idx_)
      + sizeof(RouteTableStatus::_impl_.hw_lpm_rewrite_block_idx_)
      - PROTOBUF_FIELD_OFFSET(RouteTableStatus, _impl_.vpc_count_)>(
          reinterpret_cast<char*>(&_impl_.vpc_count_),
          reinterpret_cast<char*>(&other->_impl_.vpc_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTableStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[3]);
}

// ===================================================================

class RouteAttrs::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& prefix(const RouteAttrs* msg);
  static const ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo& overlay_nh_ip_info(const RouteAttrs* msg);
  static const ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo& vpc_nh_info(const RouteAttrs* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& encap(const RouteAttrs* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
RouteAttrs::_Internal::prefix(const RouteAttrs* msg) {
  return *msg->_impl_.prefix_;
}
const ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo&
RouteAttrs::_Internal::overlay_nh_ip_info(const RouteAttrs* msg) {
  return *msg->_impl_.nh_.overlay_nh_ip_info_;
}
const ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo&
RouteAttrs::_Internal::vpc_nh_info(const RouteAttrs* msg) {
  return *msg->_impl_.nh_.vpc_nh_info_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
RouteAttrs::_Internal::encap(const RouteAttrs* msg) {
  return *msg->_impl_.encap_;
}
void RouteAttrs::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && _impl_.prefix_ != nullptr) {
    delete _impl_.prefix_;
  }
  _impl_.prefix_ = nullptr;
}
void RouteAttrs::set_allocated_overlay_nh_ip_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo* overlay_nh_ip_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (overlay_nh_ip_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay_nh_ip_info);
    if (message_arena != submessage_arena) {
      overlay_nh_ip_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_nh_ip_info, submessage_arena);
    }
    set_has_overlay_nh_ip_info();
    _impl_.nh_.overlay_nh_ip_info_ = overlay_nh_ip_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.overlay_nh_ip_info)
}
void RouteAttrs::set_allocated_vpc_nh_info(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo* vpc_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (vpc_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vpc_nh_info);
    if (message_arena != submessage_arena) {
      vpc_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc_nh_info, submessage_arena);
    }
    set_has_vpc_nh_info();
    _impl_.nh_.vpc_nh_info_ = vpc_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.vpc_nh_info)
}
void RouteAttrs::clear_encap() {
  if (GetArenaForAllocation() == nullptr && _impl_.encap_ != nullptr) {
    delete _impl_.encap_;
  }
  _impl_.encap_ = nullptr;
}
RouteAttrs::RouteAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteAttrs)
}
RouteAttrs::RouteAttrs(const RouteAttrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteAttrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.overlay_mac_){}
    , decltype(_impl_.prefix_){nullptr}
    , decltype(_impl_.encap_){nullptr}
    , decltype(_impl_.route_class_){}
    , decltype(_impl_.class_priority_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.tos_){}
    , decltype(_impl_.nh_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.overlay_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.overlay_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_overlay_mac().empty()) {
    _this->_impl_.overlay_mac_.Set(from._internal_overlay_mac(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_prefix()) {
    _this->_impl_.prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from._impl_.prefix_);
  }
  if (from._internal_has_encap()) {
    _this->_impl_.encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from._impl_.encap_);
  }
  ::memcpy(&_impl_.route_class_, &from._impl_.route_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tos_) -
    reinterpret_cast<char*>(&_impl_.route_class_)) + sizeof(_impl_.tos_));
  clear_has_nh();
  switch (from.nh_case()) {
    case kOverlayNhIpInfo: {
      _this->_internal_mutable_overlay_nh_ip_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo::MergeFrom(
          from._internal_overlay_nh_ip_info());
      break;
    }
    case kNexthopNameRef: {
      _this->_internal_set_nexthop_name_ref(from._internal_nexthop_name_ref());
      break;
    }
    case kNhGroupNameRef: {
      _this->_internal_set_nh_group_name_ref(from._internal_nh_group_name_ref());
      break;
    }
    case kVpcNhInfo: {
      _this->_internal_mutable_vpc_nh_info()->::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo::MergeFrom(
          from._internal_vpc_nh_info());
      break;
    }
    case kTunnelNameRef: {
      _this->_internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
      break;
    }
    case kRouteTableNameRef: {
      _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
      break;
    }
    case kEvalMapping: {
      _this->_internal_set_eval_mapping(from._internal_eval_mapping());
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteAttrs)
}

inline void RouteAttrs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.overlay_mac_){}
    , decltype(_impl_.prefix_){nullptr}
    , decltype(_impl_.encap_){nullptr}
    , decltype(_impl_.route_class_){0}
    , decltype(_impl_.class_priority_){0}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.tos_){0}
    , decltype(_impl_.nh_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.overlay_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.overlay_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_nh();
}

RouteAttrs::~RouteAttrs() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteAttrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteAttrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.overlay_mac_.Destroy();
  if (this != internal_default_instance()) delete _impl_.prefix_;
  if (this != internal_default_instance()) delete _impl_.encap_;
  if (has_nh()) {
    clear_nh();
  }
}

void RouteAttrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteAttrs::clear_nh() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  switch (nh_case()) {
    case kOverlayNhIpInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nh_.overlay_nh_ip_info_;
      }
      break;
    }
    case kNexthopNameRef: {
      _impl_.nh_.nexthop_name_ref_.Destroy();
      break;
    }
    case kNhGroupNameRef: {
      _impl_.nh_.nh_group_name_ref_.Destroy();
      break;
    }
    case kVpcNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nh_.vpc_nh_info_;
      }
      break;
    }
    case kTunnelNameRef: {
      _impl_.nh_.tunnel_name_ref_.Destroy();
      break;
    }
    case kRouteTableNameRef: {
      _impl_.nh_.route_table_name_ref_.Destroy();
      break;
    }
    case kEvalMapping: {
      // No need to clear
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NH_NOT_SET;
}


void RouteAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overlay_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.prefix_ != nullptr) {
    delete _impl_.prefix_;
  }
  _impl_.prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.encap_ != nullptr) {
    delete _impl_.encap_;
  }
  _impl_.encap_ = nullptr;
  ::memset(&_impl_.route_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tos_) -
      reinterpret_cast<char*>(&_impl_.route_class_)) + sizeof(_impl_.tos_));
  clear_nh();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteAttrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteClass route_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_class(static_cast<::opi_api::network::cloud::v1alpha1::RouteClass>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 class_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.class_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo overlay_nh_ip_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_nh_ip_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nexthop_name_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_nexthop_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteAttrs.nexthop_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string nh_group_name_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_nh_group_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteAttrs.nh_group_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VPCPeerNhInfo vpc_nh_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tunnel_name_ref = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_tunnel_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteAttrs.tunnel_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string route_table_name_ref = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteAttrs.route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // bool eval_mapping = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_eval_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes overlay_mac = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_overlay_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteAttrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::prefix(this),
        _Internal::prefix(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteClass route_class = 2;
  if (this->_internal_route_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_route_class(), target);
  }

  // int32 class_priority = 3;
  if (this->_internal_class_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_class_priority(), target);
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority(), target);
  }

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo overlay_nh_ip_info = 5;
  if (_internal_has_overlay_nh_ip_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::overlay_nh_ip_info(this),
        _Internal::overlay_nh_ip_info(this).GetCachedSize(), target, stream);
  }

  // string nexthop_name_ref = 6;
  if (_internal_has_nexthop_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nexthop_name_ref().data(), static_cast<int>(this->_internal_nexthop_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteAttrs.nexthop_name_ref");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nexthop_name_ref(), target);
  }

  // string nh_group_name_ref = 7;
  if (_internal_has_nh_group_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nh_group_name_ref().data(), static_cast<int>(this->_internal_nh_group_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteAttrs.nh_group_name_ref");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_nh_group_name_ref(), target);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerNhInfo vpc_nh_info = 8;
  if (_internal_has_vpc_nh_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vpc_nh_info(this),
        _Internal::vpc_nh_info(this).GetCachedSize(), target, stream);
  }

  // string tunnel_name_ref = 9;
  if (_internal_has_tunnel_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tunnel_name_ref().data(), static_cast<int>(this->_internal_tunnel_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteAttrs.tunnel_name_ref");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tunnel_name_ref(), target);
  }

  // string route_table_name_ref = 10;
  if (_internal_has_route_table_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_table_name_ref().data(), static_cast<int>(this->_internal_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteAttrs.route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_route_table_name_ref(), target);
  }

  // bool eval_mapping = 11;
  if (_internal_has_eval_mapping()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_eval_mapping(), target);
  }

  // int32 tos = 12;
  if (this->_internal_tos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_tos(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 13;
  if (this->_internal_has_encap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::encap(this),
        _Internal::encap(this).GetCachedSize(), target, stream);
  }

  // bytes overlay_mac = 14;
  if (!this->_internal_overlay_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_overlay_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteAttrs)
  return target;
}

size_t RouteAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes overlay_mac = 14;
  if (!this->_internal_overlay_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_overlay_mac());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 13;
  if (this->_internal_has_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.encap_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteClass route_class = 2;
  if (this->_internal_route_class() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_route_class());
  }

  // int32 class_priority = 3;
  if (this->_internal_class_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_class_priority());
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // int32 tos = 12;
  if (this->_internal_tos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tos());
  }

  switch (nh_case()) {
    // .opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo overlay_nh_ip_info = 5;
    case kOverlayNhIpInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nh_.overlay_nh_ip_info_);
      break;
    }
    // string nexthop_name_ref = 6;
    case kNexthopNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nexthop_name_ref());
      break;
    }
    // string nh_group_name_ref = 7;
    case kNhGroupNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nh_group_name_ref());
      break;
    }
    // .opi_api.network.cloud.v1alpha1.VPCPeerNhInfo vpc_nh_info = 8;
    case kVpcNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nh_.vpc_nh_info_);
      break;
    }
    // string tunnel_name_ref = 9;
    case kTunnelNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tunnel_name_ref());
      break;
    }
    // string route_table_name_ref = 10;
    case kRouteTableNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route_table_name_ref());
      break;
    }
    // bool eval_mapping = 11;
    case kEvalMapping: {
      total_size += 1 + 1;
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteAttrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteAttrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteAttrs::GetClassData() const { return &_class_data_; }


void RouteAttrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteAttrs*>(&to_msg);
  auto& from = static_cast<const RouteAttrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_overlay_mac().empty()) {
    _this->_internal_set_overlay_mac(from._internal_overlay_mac());
  }
  if (from._internal_has_prefix()) {
    _this->_internal_mutable_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(
        from._internal_prefix());
  }
  if (from._internal_has_encap()) {
    _this->_internal_mutable_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(
        from._internal_encap());
  }
  if (from._internal_route_class() != 0) {
    _this->_internal_set_route_class(from._internal_route_class());
  }
  if (from._internal_class_priority() != 0) {
    _this->_internal_set_class_priority(from._internal_class_priority());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_tos() != 0) {
    _this->_internal_set_tos(from._internal_tos());
  }
  switch (from.nh_case()) {
    case kOverlayNhIpInfo: {
      _this->_internal_mutable_overlay_nh_ip_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo::MergeFrom(
          from._internal_overlay_nh_ip_info());
      break;
    }
    case kNexthopNameRef: {
      _this->_internal_set_nexthop_name_ref(from._internal_nexthop_name_ref());
      break;
    }
    case kNhGroupNameRef: {
      _this->_internal_set_nh_group_name_ref(from._internal_nh_group_name_ref());
      break;
    }
    case kVpcNhInfo: {
      _this->_internal_mutable_vpc_nh_info()->::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo::MergeFrom(
          from._internal_vpc_nh_info());
      break;
    }
    case kTunnelNameRef: {
      _this->_internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
      break;
    }
    case kRouteTableNameRef: {
      _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
      break;
    }
    case kEvalMapping: {
      _this->_internal_set_eval_mapping(from._internal_eval_mapping());
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteAttrs::CopyFrom(const RouteAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAttrs::IsInitialized() const {
  return true;
}

void RouteAttrs::InternalSwap(RouteAttrs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.overlay_mac_, lhs_arena,
      &other->_impl_.overlay_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteAttrs, _impl_.tos_)
      + sizeof(RouteAttrs::_impl_.tos_)
      - PROTOBUF_FIELD_OFFSET(RouteAttrs, _impl_.prefix_)>(
          reinterpret_cast<char*>(&_impl_.prefix_),
          reinterpret_cast<char*>(&other->_impl_.prefix_));
  swap(_impl_.nh_, other->_impl_.nh_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteAttrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[4]);
}

// ===================================================================

class VPCPeerNhInfo::_Internal {
 public:
};

VPCPeerNhInfo::VPCPeerNhInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
}
VPCPeerNhInfo::VPCPeerNhInfo(const VPCPeerNhInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VPCPeerNhInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_name_ref_){}
    , decltype(_impl_.route_table_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vpc_name_ref().empty()) {
    _this->_impl_.vpc_name_ref_.Set(from._internal_vpc_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_impl_.route_table_name_ref_.Set(from._internal_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
}

inline void VPCPeerNhInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_name_ref_){}
    , decltype(_impl_.route_table_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VPCPeerNhInfo::~VPCPeerNhInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VPCPeerNhInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vpc_name_ref_.Destroy();
  _impl_.route_table_name_ref_.Destroy();
}

void VPCPeerNhInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VPCPeerNhInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vpc_name_ref_.ClearToEmpty();
  _impl_.route_table_name_ref_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPCPeerNhInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vpc_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vpc_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VPCPeerNhInfo.vpc_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string route_table_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VPCPeerNhInfo.route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VPCPeerNhInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vpc_name_ref = 1;
  if (!this->_internal_vpc_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpc_name_ref().data(), static_cast<int>(this->_internal_vpc_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VPCPeerNhInfo.vpc_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vpc_name_ref(), target);
  }

  // string route_table_name_ref = 2;
  if (!this->_internal_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_table_name_ref().data(), static_cast<int>(this->_internal_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VPCPeerNhInfo.route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route_table_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  return target;
}

size_t VPCPeerNhInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vpc_name_ref = 1;
  if (!this->_internal_vpc_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpc_name_ref());
  }

  // string route_table_name_ref = 2;
  if (!this->_internal_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_table_name_ref());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeerNhInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VPCPeerNhInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeerNhInfo::GetClassData() const { return &_class_data_; }


void VPCPeerNhInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VPCPeerNhInfo*>(&to_msg);
  auto& from = static_cast<const VPCPeerNhInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vpc_name_ref().empty()) {
    _this->_internal_set_vpc_name_ref(from._internal_vpc_name_ref());
  }
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VPCPeerNhInfo::CopyFrom(const VPCPeerNhInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPCPeerNhInfo::IsInitialized() const {
  return true;
}

void VPCPeerNhInfo::InternalSwap(VPCPeerNhInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vpc_name_ref_, lhs_arena,
      &other->_impl_.vpc_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_table_name_ref_, lhs_arena,
      &other->_impl_.route_table_name_ref_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VPCPeerNhInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[5]);
}

// ===================================================================

class OverlayNextHopIPInfo::_Internal {
 public:
};

void OverlayNextHopIPInfo::clear_nexthop_ip() {
  _impl_.nexthop_ip_.Clear();
}
OverlayNextHopIPInfo::OverlayNextHopIPInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
}
OverlayNextHopIPInfo::OverlayNextHopIPInfo(const OverlayNextHopIPInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverlayNextHopIPInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nexthop_ip_){from._impl_.nexthop_ip_}
    , decltype(_impl_.nexthop_mac_){from._impl_.nexthop_mac_}
    , decltype(_impl_.vpc_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vpc_name_ref().empty()) {
    _this->_impl_.vpc_name_ref_.Set(from._internal_vpc_name_ref(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
}

inline void OverlayNextHopIPInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nexthop_ip_){arena}
    , decltype(_impl_.nexthop_mac_){arena}
    , decltype(_impl_.vpc_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverlayNextHopIPInfo::~OverlayNextHopIPInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverlayNextHopIPInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nexthop_ip_.~RepeatedPtrField();
  _impl_.nexthop_mac_.~RepeatedPtrField();
  _impl_.vpc_name_ref_.Destroy();
}

void OverlayNextHopIPInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverlayNextHopIPInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nexthop_ip_.Clear();
  _impl_.nexthop_mac_.Clear();
  _impl_.vpc_name_ref_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayNextHopIPInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress nexthop_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nexthop_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes nexthop_mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nexthop_mac();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string vpc_name_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vpc_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo.vpc_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlayNextHopIPInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress nexthop_ip = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nexthop_ip_size()); i < n; i++) {
    const auto& repfield = this->_internal_nexthop_ip(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bytes nexthop_mac = 2;
  for (int i = 0, n = this->_internal_nexthop_mac_size(); i < n; i++) {
    const auto& s = this->_internal_nexthop_mac(i);
    target = stream->WriteBytes(2, s, target);
  }

  // string vpc_name_ref = 3;
  if (!this->_internal_vpc_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpc_name_ref().data(), static_cast<int>(this->_internal_vpc_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo.vpc_name_ref");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vpc_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  return target;
}

size_t OverlayNextHopIPInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress nexthop_ip = 1;
  total_size += 1UL * this->_internal_nexthop_ip_size();
  for (const auto& msg : this->_impl_.nexthop_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes nexthop_mac = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.nexthop_mac_.size());
  for (int i = 0, n = _impl_.nexthop_mac_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.nexthop_mac_.Get(i));
  }

  // string vpc_name_ref = 3;
  if (!this->_internal_vpc_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpc_name_ref());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayNextHopIPInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverlayNextHopIPInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayNextHopIPInfo::GetClassData() const { return &_class_data_; }


void OverlayNextHopIPInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverlayNextHopIPInfo*>(&to_msg);
  auto& from = static_cast<const OverlayNextHopIPInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nexthop_ip_.MergeFrom(from._impl_.nexthop_ip_);
  _this->_impl_.nexthop_mac_.MergeFrom(from._impl_.nexthop_mac_);
  if (!from._internal_vpc_name_ref().empty()) {
    _this->_internal_set_vpc_name_ref(from._internal_vpc_name_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayNextHopIPInfo::CopyFrom(const OverlayNextHopIPInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayNextHopIPInfo::IsInitialized() const {
  return true;
}

void OverlayNextHopIPInfo::InternalSwap(OverlayNextHopIPInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nexthop_ip_.InternalSwap(&other->_impl_.nexthop_ip_);
  _impl_.nexthop_mac_.InternalSwap(&other->_impl_.nexthop_mac_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vpc_name_ref_, lhs_arena,
      &other->_impl_.vpc_name_ref_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayNextHopIPInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[6]);
}

// ===================================================================

class RouteId::_Internal {
 public:
};

RouteId::RouteId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteId)
}
RouteId::RouteId(const RouteId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_id_){}
    , decltype(_impl_.route_table_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_id().empty()) {
    _this->_impl_.route_id_.Set(from._internal_route_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_impl_.route_table_name_ref_.Set(from._internal_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteId)
}

inline void RouteId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_id_){}
    , decltype(_impl_.route_table_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteId::~RouteId() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_id_.Destroy();
  _impl_.route_table_name_ref_.Destroy();
}

void RouteId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteId::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_id_.ClearToEmpty();
  _impl_.route_table_name_ref_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteId.route_id"));
        } else
          goto handle_unusual;
        continue;
      // string route_table_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteId.route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteId.route_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_id(), target);
  }

  // string route_table_name_ref = 2;
  if (!this->_internal_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_table_name_ref().data(), static_cast<int>(this->_internal_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteId.route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route_table_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteId)
  return target;
}

size_t RouteId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_id = 1;
  if (!this->_internal_route_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_id());
  }

  // string route_table_name_ref = 2;
  if (!this->_internal_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_table_name_ref());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteId::GetClassData() const { return &_class_data_; }


void RouteId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteId*>(&to_msg);
  auto& from = static_cast<const RouteId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_id().empty()) {
    _this->_internal_set_route_id(from._internal_route_id());
  }
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteId::CopyFrom(const RouteId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteId::IsInitialized() const {
  return true;
}

void RouteId::InternalSwap(RouteId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_id_, lhs_arena,
      &other->_impl_.route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_table_name_ref_, lhs_arena,
      &other->_impl_.route_table_name_ref_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[7]);
}

// ===================================================================

class Route::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::RouteSpec& spec(const Route* msg);
  static const ::opi_api::network::cloud::v1alpha1::RouteStatus& status(const Route* msg);
};

const ::opi_api::network::cloud::v1alpha1::RouteSpec&
Route::_Internal::spec(const Route* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::RouteStatus&
Route::_Internal::status(const Route* msg) {
  return *msg->_impl_.status_;
}
Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Route* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::RouteSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::RouteStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Route)
}

inline void Route::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.Route.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.Route.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.RouteSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.RouteSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }


void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Route*>(&to_msg);
  auto& from = static_cast<const Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Route)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::RouteSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::RouteStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Route, _impl_.status_)
      + sizeof(Route::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Route, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[8]);
}

// ===================================================================

class RouteSpec::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::RouteAttrs& attrs(const RouteSpec* msg);
};

const ::opi_api::network::cloud::v1alpha1::RouteAttrs&
RouteSpec::_Internal::attrs(const RouteSpec* msg) {
  return *msg->_impl_.attrs_;
}
RouteSpec::RouteSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteSpec)
}
RouteSpec::RouteSpec(const RouteSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_impl_.route_table_name_ref_.Set(from._internal_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attrs()) {
    _this->_impl_.attrs_ = new ::opi_api::network::cloud::v1alpha1::RouteAttrs(*from._impl_.attrs_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteSpec)
}

inline void RouteSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteSpec::~RouteSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_table_name_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attrs_;
}

void RouteSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_table_name_ref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attrs_ != nullptr) {
    delete _impl_.attrs_;
  }
  _impl_.attrs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_table_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.RouteSpec.route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_table_name_ref = 1;
  if (!this->_internal_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_table_name_ref().data(), static_cast<int>(this->_internal_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.RouteSpec.route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_table_name_ref(), target);
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attrs(this),
        _Internal::attrs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteSpec)
  return target;
}

size_t RouteSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_table_name_ref = 1;
  if (!this->_internal_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_table_name_ref());
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attrs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteSpec::GetClassData() const { return &_class_data_; }


void RouteSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteSpec*>(&to_msg);
  auto& from = static_cast<const RouteSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_table_name_ref().empty()) {
    _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
  }
  if (from._internal_has_attrs()) {
    _this->_internal_mutable_attrs()->::opi_api::network::cloud::v1alpha1::RouteAttrs::MergeFrom(
        from._internal_attrs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteSpec::CopyFrom(const RouteSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSpec::IsInitialized() const {
  return true;
}

void RouteSpec::InternalSwap(RouteSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_table_name_ref_, lhs_arena,
      &other->_impl_.route_table_name_ref_, rhs_arena
  );
  swap(_impl_.attrs_, other->_impl_.attrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[9]);
}

// ===================================================================

class RouteStatus::_Internal {
 public:
};

RouteStatus::RouteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteStatus)
}
RouteStatus::RouteStatus(const RouteStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RouteStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RouteStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteTable*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteTable >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteTableSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteTableSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteTableSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteInfo*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteTableStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteTableStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteTableStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteAttrs*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteAttrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteAttrs >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteId*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteId >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Route*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
