// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnel.proto

#include "tunnel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR Tunnel::Tunnel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TunnelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelDefaultTypeInternal() {}
  union {
    Tunnel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelDefaultTypeInternal _Tunnel_default_instance_;
PROTOBUF_CONSTEXPR TunnelSpec::TunnelSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vpc_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_ip_)*/nullptr
  , /*decltype(_impl_.remote_ip_)*/nullptr
  , /*decltype(_impl_.encap_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.tos_)*/0
  , /*decltype(_impl_.nh_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TunnelSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelSpecDefaultTypeInternal() {}
  union {
    TunnelSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelSpecDefaultTypeInternal _TunnelSpec_default_instance_;
PROTOBUF_CONSTEXPR DropNexthop::DropNexthop(
    ::_pbi::ConstantInitialized) {}
struct DropNexthopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropNexthopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropNexthopDefaultTypeInternal() {}
  union {
    DropNexthop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropNexthopDefaultTypeInternal _DropNexthop_default_instance_;
PROTOBUF_CONSTEXPR TunnelStatus::TunnelStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hw_handle_)*/nullptr
  , /*decltype(_impl_.vnic_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TunnelStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelStatusDefaultTypeInternal() {}
  union {
    TunnelStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelStatusDefaultTypeInternal _TunnelStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_tunnel_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tunnel_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tunnel_2eproto = nullptr;

const uint32_t TableStruct_tunnel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Tunnel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Tunnel, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Tunnel, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Tunnel, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.vpc_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.local_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.remote_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.encap_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.tos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelSpec, _impl_.nh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DropNexthop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelStatus, _impl_.hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::TunnelStatus, _impl_.vnic_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Tunnel)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::TunnelSpec)},
  { 27, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DropNexthop)},
  { 33, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::TunnelStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_Tunnel_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_TunnelSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_DropNexthop_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_TunnelStatus_default_instance_._instance,
};

const char descriptor_table_protodef_tunnel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014tunnel.proto\022\036opi_api.network.cloud.v1"
  "alpha1\032\022networktypes.proto\032\031google/api/r"
  "esource.proto\"\313\001\n\006Tunnel\022\014\n\004name\030\001 \001(\t\0228"
  "\n\004spec\030\002 \001(\0132*.opi_api.network.cloud.v1a"
  "lpha1.TunnelSpec\022<\n\006status\030\003 \001(\0132,.opi_a"
  "pi.network.cloud.v1alpha1.TunnelStatus:;"
  "\352A8\n%opi_api.network.cloud.v1alpha1/tunn"
  "el\022\017tunnel/{tunnel}\"\351\003\n\nTunnelSpec\022\024\n\014vp"
  "c_name_ref\030\001 \001(\t\022B\n\010local_ip\030\002 \001(\01320.opi"
  "_api.network.opinetcommon.v1alpha1.IPAdd"
  "ress\022C\n\tremote_ip\030\003 \001(\01320.opi_api.networ"
  "k.opinetcommon.v1alpha1.IPAddress\0228\n\004typ"
  "e\030\004 \001(\0162*.opi_api.network.cloud.v1alpha1"
  ".TunnelType\022;\n\005encap\030\005 \001(\0132,.opi_api.net"
  "work.opinetcommon.v1alpha1.Encap\022\032\n\020next"
  "hop_name_ref\030\006 \001(\tH\000\022 \n\026nexthop_group_na"
  "me_ref\030\007 \001(\tH\000\022\031\n\017tunnel_name_ref\030\010 \001(\tH"
  "\000\022D\n\rdrop_next_hop\030\t \001(\0132+.opi_api.netwo"
  "rk.cloud.v1alpha1.DropNexthopH\000\022\023\n\013mac_a"
  "ddress\030\n \001(\014\022\013\n\003tos\030\013 \001(\005B\004\n\002nh\"\r\n\013DropN"
  "exthop\"f\n\014TunnelStatus\022B\n\thw_handle\030\001 \001("
  "\0132/.opi_api.network.opinetcommon.v1alpha"
  "1.HwHandle\022\022\n\nvnic_count\030\002 \001(\005*\267\001\n\nTunne"
  "lType\022\033\n\027TUNNEL_TYPE_UNSPECIFIED\020\000\022\023\n\017TU"
  "NNEL_TYPE_IGW\020\001\022\030\n\024TUNNEL_TYPE_WORKLOAD\020"
  "\002\022\030\n\024TUNNEL_TYPE_INTER_DC\020\003\022\027\n\023TUNNEL_TY"
  "PE_SERVICE\020\004\022\023\n\017TUNNEL_TYPE_VNF\020\005\022\025\n\021TUN"
  "NEL_TYPE_IPSEC\020\006Bl\n\036opi_api.network.clou"
  "d.v1alpha1B\013TunnelProtoP\001Z;github.com/op"
  "iproject/opi-api/network/cloud/v1alpha1/"
  "gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tunnel_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tunnel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tunnel_2eproto = {
    false, false, 1214, descriptor_table_protodef_tunnel_2eproto,
    "tunnel.proto",
    &descriptor_table_tunnel_2eproto_once, descriptor_table_tunnel_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_tunnel_2eproto::offsets,
    file_level_metadata_tunnel_2eproto, file_level_enum_descriptors_tunnel_2eproto,
    file_level_service_descriptors_tunnel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tunnel_2eproto_getter() {
  return &descriptor_table_tunnel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tunnel_2eproto(&descriptor_table_tunnel_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tunnel_2eproto);
  return file_level_enum_descriptors_tunnel_2eproto[0];
}
bool TunnelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Tunnel::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::TunnelSpec& spec(const Tunnel* msg);
  static const ::opi_api::network::cloud::v1alpha1::TunnelStatus& status(const Tunnel* msg);
};

const ::opi_api::network::cloud::v1alpha1::TunnelSpec&
Tunnel::_Internal::spec(const Tunnel* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::TunnelStatus&
Tunnel::_Internal::status(const Tunnel* msg) {
  return *msg->_impl_.status_;
}
Tunnel::Tunnel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Tunnel)
}
Tunnel::Tunnel(const Tunnel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tunnel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::TunnelSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::TunnelStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Tunnel)
}

inline void Tunnel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tunnel::~Tunnel() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Tunnel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tunnel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Tunnel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tunnel::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Tunnel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tunnel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.Tunnel.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.TunnelSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.TunnelStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tunnel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Tunnel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.Tunnel.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.TunnelSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.TunnelStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Tunnel)
  return target;
}

size_t Tunnel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Tunnel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.TunnelSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.TunnelStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tunnel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tunnel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tunnel::GetClassData() const { return &_class_data_; }


void Tunnel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tunnel*>(&to_msg);
  auto& from = static_cast<const Tunnel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Tunnel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::TunnelSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::TunnelStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tunnel::CopyFrom(const Tunnel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Tunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tunnel::IsInitialized() const {
  return true;
}

void Tunnel::InternalSwap(Tunnel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tunnel, _impl_.status_)
      + sizeof(Tunnel::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Tunnel, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tunnel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnel_2eproto_getter, &descriptor_table_tunnel_2eproto_once,
      file_level_metadata_tunnel_2eproto[0]);
}

// ===================================================================

class TunnelSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_ip(const TunnelSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& remote_ip(const TunnelSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& encap(const TunnelSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::DropNexthop& drop_next_hop(const TunnelSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
TunnelSpec::_Internal::local_ip(const TunnelSpec* msg) {
  return *msg->_impl_.local_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
TunnelSpec::_Internal::remote_ip(const TunnelSpec* msg) {
  return *msg->_impl_.remote_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
TunnelSpec::_Internal::encap(const TunnelSpec* msg) {
  return *msg->_impl_.encap_;
}
const ::opi_api::network::cloud::v1alpha1::DropNexthop&
TunnelSpec::_Internal::drop_next_hop(const TunnelSpec* msg) {
  return *msg->_impl_.nh_.drop_next_hop_;
}
void TunnelSpec::clear_local_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.local_ip_ != nullptr) {
    delete _impl_.local_ip_;
  }
  _impl_.local_ip_ = nullptr;
}
void TunnelSpec::clear_remote_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.remote_ip_ != nullptr) {
    delete _impl_.remote_ip_;
  }
  _impl_.remote_ip_ = nullptr;
}
void TunnelSpec::clear_encap() {
  if (GetArenaForAllocation() == nullptr && _impl_.encap_ != nullptr) {
    delete _impl_.encap_;
  }
  _impl_.encap_ = nullptr;
}
void TunnelSpec::set_allocated_drop_next_hop(::opi_api::network::cloud::v1alpha1::DropNexthop* drop_next_hop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (drop_next_hop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_next_hop);
    if (message_arena != submessage_arena) {
      drop_next_hop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_next_hop, submessage_arena);
    }
    set_has_drop_next_hop();
    _impl_.nh_.drop_next_hop_ = drop_next_hop;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.drop_next_hop)
}
TunnelSpec::TunnelSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.TunnelSpec)
}
TunnelSpec::TunnelSpec(const TunnelSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_name_ref_){}
    , decltype(_impl_.mac_address_){}
    , decltype(_impl_.local_ip_){nullptr}
    , decltype(_impl_.remote_ip_){nullptr}
    , decltype(_impl_.encap_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.tos_){}
    , decltype(_impl_.nh_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vpc_name_ref().empty()) {
    _this->_impl_.vpc_name_ref_.Set(from._internal_vpc_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    _this->_impl_.mac_address_.Set(from._internal_mac_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_local_ip()) {
    _this->_impl_.local_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.local_ip_);
  }
  if (from._internal_has_remote_ip()) {
    _this->_impl_.remote_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.remote_ip_);
  }
  if (from._internal_has_encap()) {
    _this->_impl_.encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from._impl_.encap_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tos_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tos_));
  clear_has_nh();
  switch (from.nh_case()) {
    case kNexthopNameRef: {
      _this->_internal_set_nexthop_name_ref(from._internal_nexthop_name_ref());
      break;
    }
    case kNexthopGroupNameRef: {
      _this->_internal_set_nexthop_group_name_ref(from._internal_nexthop_group_name_ref());
      break;
    }
    case kTunnelNameRef: {
      _this->_internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
      break;
    }
    case kDropNextHop: {
      _this->_internal_mutable_drop_next_hop()->::opi_api::network::cloud::v1alpha1::DropNexthop::MergeFrom(
          from._internal_drop_next_hop());
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.TunnelSpec)
}

inline void TunnelSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_name_ref_){}
    , decltype(_impl_.mac_address_){}
    , decltype(_impl_.local_ip_){nullptr}
    , decltype(_impl_.remote_ip_){nullptr}
    , decltype(_impl_.encap_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.tos_){0}
    , decltype(_impl_.nh_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_nh();
}

TunnelSpec::~TunnelSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.TunnelSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vpc_name_ref_.Destroy();
  _impl_.mac_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.local_ip_;
  if (this != internal_default_instance()) delete _impl_.remote_ip_;
  if (this != internal_default_instance()) delete _impl_.encap_;
  if (has_nh()) {
    clear_nh();
  }
}

void TunnelSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelSpec::clear_nh() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.TunnelSpec)
  switch (nh_case()) {
    case kNexthopNameRef: {
      _impl_.nh_.nexthop_name_ref_.Destroy();
      break;
    }
    case kNexthopGroupNameRef: {
      _impl_.nh_.nexthop_group_name_ref_.Destroy();
      break;
    }
    case kTunnelNameRef: {
      _impl_.nh_.tunnel_name_ref_.Destroy();
      break;
    }
    case kDropNextHop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nh_.drop_next_hop_;
      }
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NH_NOT_SET;
}


void TunnelSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.TunnelSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vpc_name_ref_.ClearToEmpty();
  _impl_.mac_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.local_ip_ != nullptr) {
    delete _impl_.local_ip_;
  }
  _impl_.local_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remote_ip_ != nullptr) {
    delete _impl_.remote_ip_;
  }
  _impl_.remote_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.encap_ != nullptr) {
    delete _impl_.encap_;
  }
  _impl_.encap_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tos_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tos_));
  clear_nh();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vpc_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vpc_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.TunnelType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::TunnelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nexthop_name_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_nexthop_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string nexthop_group_name_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_nexthop_group_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string tunnel_name_ref = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_tunnel_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_next_hop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TunnelSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.TunnelSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vpc_name_ref = 1;
  if (!this->_internal_vpc_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpc_name_ref().data(), static_cast<int>(this->_internal_vpc_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vpc_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 2;
  if (this->_internal_has_local_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::local_ip(this),
        _Internal::local_ip(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 3;
  if (this->_internal_has_remote_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::remote_ip(this),
        _Internal::remote_ip(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.TunnelType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 5;
  if (this->_internal_has_encap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::encap(this),
        _Internal::encap(this).GetCachedSize(), target, stream);
  }

  // string nexthop_name_ref = 6;
  if (_internal_has_nexthop_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nexthop_name_ref().data(), static_cast<int>(this->_internal_nexthop_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_name_ref");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nexthop_name_ref(), target);
  }

  // string nexthop_group_name_ref = 7;
  if (_internal_has_nexthop_group_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nexthop_group_name_ref().data(), static_cast<int>(this->_internal_nexthop_group_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_name_ref");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_nexthop_group_name_ref(), target);
  }

  // string tunnel_name_ref = 8;
  if (_internal_has_tunnel_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tunnel_name_ref().data(), static_cast<int>(this->_internal_tunnel_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_name_ref");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tunnel_name_ref(), target);
  }

  // .opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 9;
  if (_internal_has_drop_next_hop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::drop_next_hop(this),
        _Internal::drop_next_hop(this).GetCachedSize(), target, stream);
  }

  // bytes mac_address = 10;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_mac_address(), target);
  }

  // int32 tos = 11;
  if (this->_internal_tos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.TunnelSpec)
  return target;
}

size_t TunnelSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.TunnelSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vpc_name_ref = 1;
  if (!this->_internal_vpc_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpc_name_ref());
  }

  // bytes mac_address = 10;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 2;
  if (this->_internal_has_local_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 3;
  if (this->_internal_has_remote_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 5;
  if (this->_internal_has_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.encap_);
  }

  // .opi_api.network.cloud.v1alpha1.TunnelType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 tos = 11;
  if (this->_internal_tos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tos());
  }

  switch (nh_case()) {
    // string nexthop_name_ref = 6;
    case kNexthopNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nexthop_name_ref());
      break;
    }
    // string nexthop_group_name_ref = 7;
    case kNexthopGroupNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nexthop_group_name_ref());
      break;
    }
    // string tunnel_name_ref = 8;
    case kTunnelNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tunnel_name_ref());
      break;
    }
    // .opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 9;
    case kDropNextHop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nh_.drop_next_hop_);
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelSpec::GetClassData() const { return &_class_data_; }


void TunnelSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelSpec*>(&to_msg);
  auto& from = static_cast<const TunnelSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.TunnelSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vpc_name_ref().empty()) {
    _this->_internal_set_vpc_name_ref(from._internal_vpc_name_ref());
  }
  if (!from._internal_mac_address().empty()) {
    _this->_internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_has_local_ip()) {
    _this->_internal_mutable_local_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_local_ip());
  }
  if (from._internal_has_remote_ip()) {
    _this->_internal_mutable_remote_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_remote_ip());
  }
  if (from._internal_has_encap()) {
    _this->_internal_mutable_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(
        from._internal_encap());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_tos() != 0) {
    _this->_internal_set_tos(from._internal_tos());
  }
  switch (from.nh_case()) {
    case kNexthopNameRef: {
      _this->_internal_set_nexthop_name_ref(from._internal_nexthop_name_ref());
      break;
    }
    case kNexthopGroupNameRef: {
      _this->_internal_set_nexthop_group_name_ref(from._internal_nexthop_group_name_ref());
      break;
    }
    case kTunnelNameRef: {
      _this->_internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
      break;
    }
    case kDropNextHop: {
      _this->_internal_mutable_drop_next_hop()->::opi_api::network::cloud::v1alpha1::DropNexthop::MergeFrom(
          from._internal_drop_next_hop());
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelSpec::CopyFrom(const TunnelSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.TunnelSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelSpec::IsInitialized() const {
  return true;
}

void TunnelSpec::InternalSwap(TunnelSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vpc_name_ref_, lhs_arena,
      &other->_impl_.vpc_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_address_, lhs_arena,
      &other->_impl_.mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelSpec, _impl_.tos_)
      + sizeof(TunnelSpec::_impl_.tos_)
      - PROTOBUF_FIELD_OFFSET(TunnelSpec, _impl_.local_ip_)>(
          reinterpret_cast<char*>(&_impl_.local_ip_),
          reinterpret_cast<char*>(&other->_impl_.local_ip_));
  swap(_impl_.nh_, other->_impl_.nh_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnel_2eproto_getter, &descriptor_table_tunnel_2eproto_once,
      file_level_metadata_tunnel_2eproto[1]);
}

// ===================================================================

class DropNexthop::_Internal {
 public:
};

DropNexthop::DropNexthop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DropNexthop)
}
DropNexthop::DropNexthop(const DropNexthop& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DropNexthop* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DropNexthop)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropNexthop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropNexthop::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DropNexthop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnel_2eproto_getter, &descriptor_table_tunnel_2eproto_once,
      file_level_metadata_tunnel_2eproto[2]);
}

// ===================================================================

class TunnelStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const TunnelStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
TunnelStatus::_Internal::hw_handle(const TunnelStatus* msg) {
  return *msg->_impl_.hw_handle_;
}
void TunnelStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
}
TunnelStatus::TunnelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.TunnelStatus)
}
TunnelStatus::TunnelStatus(const TunnelStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.vnic_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    _this->_impl_.hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.hw_handle_);
  }
  _this->_impl_.vnic_count_ = from._impl_.vnic_count_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.TunnelStatus)
}

inline void TunnelStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.vnic_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TunnelStatus::~TunnelStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.TunnelStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hw_handle_;
}

void TunnelStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.TunnelStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
  _impl_.vnic_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vnic_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TunnelStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.TunnelStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hw_handle(this),
        _Internal::hw_handle(this).GetCachedSize(), target, stream);
  }

  // int32 vnic_count = 2;
  if (this->_internal_vnic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vnic_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.TunnelStatus)
  return target;
}

size_t TunnelStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.TunnelStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_handle_);
  }

  // int32 vnic_count = 2;
  if (this->_internal_vnic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vnic_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelStatus::GetClassData() const { return &_class_data_; }


void TunnelStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelStatus*>(&to_msg);
  auto& from = static_cast<const TunnelStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.TunnelStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hw_handle()) {
    _this->_internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_hw_handle());
  }
  if (from._internal_vnic_count() != 0) {
    _this->_internal_set_vnic_count(from._internal_vnic_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelStatus::CopyFrom(const TunnelStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.TunnelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelStatus::IsInitialized() const {
  return true;
}

void TunnelStatus::InternalSwap(TunnelStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelStatus, _impl_.vnic_count_)
      + sizeof(TunnelStatus::_impl_.vnic_count_)
      - PROTOBUF_FIELD_OFFSET(TunnelStatus, _impl_.hw_handle_)>(
          reinterpret_cast<char*>(&_impl_.hw_handle_),
          reinterpret_cast<char*>(&other->_impl_.hw_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnel_2eproto_getter, &descriptor_table_tunnel_2eproto_once,
      file_level_metadata_tunnel_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Tunnel*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Tunnel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Tunnel >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::TunnelSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::TunnelSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::TunnelSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DropNexthop*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DropNexthop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DropNexthop >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::TunnelStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::TunnelStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::TunnelStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
