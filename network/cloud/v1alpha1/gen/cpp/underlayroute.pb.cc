// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: underlayroute.proto

#include "underlayroute.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR UnderlayRoute::UnderlayRoute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderlayRouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderlayRouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderlayRouteDefaultTypeInternal() {}
  union {
    UnderlayRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderlayRouteDefaultTypeInternal _UnderlayRoute_default_instance_;
PROTOBUF_CONSTEXPR UnderlayRouteSpec::UnderlayRouteSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interface_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dest_prefix_)*/nullptr
  , /*decltype(_impl_.next_hop_address_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.enable_admin_distance_)*/false
  , /*decltype(_impl_.admin_dist_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderlayRouteSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderlayRouteSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderlayRouteSpecDefaultTypeInternal() {}
  union {
    UnderlayRouteSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderlayRouteSpecDefaultTypeInternal _UnderlayRouteSpec_default_instance_;
PROTOBUF_CONSTEXPR UnderlayRouteStatus::UnderlayRouteStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dest_prefix_)*/nullptr
  , /*decltype(_impl_.next_hop_address_)*/nullptr
  , /*decltype(_impl_.route_table_name_ref_)*/0
  , /*decltype(_impl_.if_index_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.proto_)*/0
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.metric_)*/0
  , /*decltype(_impl_.fib_route_)*/false
  , /*decltype(_impl_.connected_)*/false
  , /*decltype(_impl_.admin_distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderlayRouteStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderlayRouteStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderlayRouteStatusDefaultTypeInternal() {}
  union {
    UnderlayRouteStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderlayRouteStatusDefaultTypeInternal _UnderlayRouteStatus_default_instance_;
PROTOBUF_CONSTEXPR UnderlayRouteLookupKey::UnderlayRouteLookupKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dest_prefix_)*/nullptr
  , /*decltype(_impl_.next_hop_address_)*/nullptr
  , /*decltype(_impl_.ifid_)*/0
  , /*decltype(_impl_.proto_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderlayRouteLookupKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderlayRouteLookupKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderlayRouteLookupKeyDefaultTypeInternal() {}
  union {
    UnderlayRouteLookupKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderlayRouteLookupKeyDefaultTypeInternal _UnderlayRouteLookupKey_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_underlayroute_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_underlayroute_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_underlayroute_2eproto = nullptr;

const uint32_t TableStruct_underlayroute_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.dest_prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.next_hop_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.enable_admin_distance_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.admin_dist_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _impl_.interface_name_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.dest_prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.next_hop_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.if_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.proto_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.metric_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.fib_route_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.connected_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _impl_.admin_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _impl_.route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _impl_.dest_prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _impl_.next_hop_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _impl_.ifid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _impl_.proto_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRoute)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec)},
  { 22, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus)},
  { 39, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_UnderlayRoute_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_UnderlayRouteSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_UnderlayRouteStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_UnderlayRouteLookupKey_default_instance_._instance,
};

const char descriptor_table_protodef_underlayroute_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023underlayroute.proto\022\036opi_api.network.c"
  "loud.v1alpha1\032\022networktypes.proto\032\031googl"
  "e/api/resource.proto\"\366\001\n\rUnderlayRoute\022\014"
  "\n\004name\030\001 \001(\t\022\?\n\004spec\030\002 \001(\01321.opi_api.net"
  "work.cloud.v1alpha1.UnderlayRouteSpec\022C\n"
  "\006status\030\003 \001(\01323.opi_api.network.cloud.v1"
  "alpha1.UnderlayRouteStatus:Q\352AN\n,opi_api"
  ".network.cloud.v1alpha1/underlayroute\022\036u"
  "nderlayroutes/{underlayroute}\"\324\002\n\021Underl"
  "ayRouteSpec\022\034\n\024route_table_name_ref\030\001 \001("
  "\t\022D\n\013dest_prefix\030\002 \001(\0132/.opi_api.network"
  ".opinetcommon.v1alpha1.IPPrefix\022J\n\020next_"
  "hop_address\030\003 \001(\01320.opi_api.network.opin"
  "etcommon.v1alpha1.IPAddress\022@\n\005state\030\004 \001"
  "(\01621.opi_api.network.opinetcommon.v1alph"
  "a1.AdminState\022\035\n\025enable_admin_distance\030\005"
  " \001(\010\022\022\n\nadmin_dist\030\006 \001(\005\022\032\n\022interface_na"
  "me_ref\030\007 \001(\t\"\267\003\n\023UnderlayRouteStatus\022\034\n\024"
  "route_table_name_ref\030\001 \001(\005\022D\n\013dest_prefi"
  "x\030\002 \001(\0132/.opi_api.network.opinetcommon.v"
  "1alpha1.IPPrefix\022J\n\020next_hop_address\030\003 \001"
  "(\01320.opi_api.network.opinetcommon.v1alph"
  "a1.IPAddress\022\020\n\010if_index\030\005 \001(\005\022>\n\004type\030\006"
  " \001(\01620.opi_api.network.opinetcommon.v1al"
  "pha1.RouteType\022C\n\005proto\030\007 \001(\01624.opi_api."
  "network.opinetcommon.v1alpha1.RouteProto"
  "col\022\013\n\003age\030\010 \001(\005\022\016\n\006metric\030\t \001(\005\022\021\n\tfib_"
  "route\030\n \001(\010\022\021\n\tconnected\030\013 \001(\010\022\026\n\016admin_"
  "distance\030\014 \001(\005\"\233\002\n\026UnderlayRouteLookupKe"
  "y\022\034\n\024route_table_name_ref\030\001 \001(\t\022D\n\013dest_"
  "prefix\030\002 \001(\0132/.opi_api.network.opinetcom"
  "mon.v1alpha1.IPPrefix\022J\n\020next_hop_addres"
  "s\030\003 \001(\01320.opi_api.network.opinetcommon.v"
  "1alpha1.IPAddress\022\014\n\004ifid\030\004 \001(\005\022C\n\005proto"
  "\030\006 \001(\01624.opi_api.network.opinetcommon.v1"
  "alpha1.RouteProtocolBs\n\036opi_api.network."
  "cloud.v1alpha1B\022UnderlayRouteProtoP\001Z;gi"
  "thub.com/opiproject/opi-api/network/clou"
  "d/v1alpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_underlayroute_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_underlayroute_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_underlayroute_2eproto = {
    false, false, 1545, descriptor_table_protodef_underlayroute_2eproto,
    "underlayroute.proto",
    &descriptor_table_underlayroute_2eproto_once, descriptor_table_underlayroute_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_underlayroute_2eproto::offsets,
    file_level_metadata_underlayroute_2eproto, file_level_enum_descriptors_underlayroute_2eproto,
    file_level_service_descriptors_underlayroute_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_underlayroute_2eproto_getter() {
  return &descriptor_table_underlayroute_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_underlayroute_2eproto(&descriptor_table_underlayroute_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class UnderlayRoute::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec& spec(const UnderlayRoute* msg);
  static const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus& status(const UnderlayRoute* msg);
};

const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec&
UnderlayRoute::_Internal::spec(const UnderlayRoute* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus&
UnderlayRoute::_Internal::status(const UnderlayRoute* msg) {
  return *msg->_impl_.status_;
}
UnderlayRoute::UnderlayRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRoute)
}
UnderlayRoute::UnderlayRoute(const UnderlayRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderlayRoute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRoute)
}

inline void UnderlayRoute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnderlayRoute::~UnderlayRoute() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderlayRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void UnderlayRoute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderlayRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRoute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.UnderlayRoute.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.UnderlayRoute.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  return target;
}

size_t UnderlayRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderlayRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRoute::GetClassData() const { return &_class_data_; }


void UnderlayRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderlayRoute*>(&to_msg);
  auto& from = static_cast<const UnderlayRoute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRoute::CopyFrom(const UnderlayRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRoute::IsInitialized() const {
  return true;
}

void UnderlayRoute::InternalSwap(UnderlayRoute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRoute, _impl_.status_)
      + sizeof(UnderlayRoute::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRoute, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRoute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[0]);
}

// ===================================================================

class UnderlayRouteSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix(const UnderlayRouteSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address(const UnderlayRouteSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
UnderlayRouteSpec::_Internal::dest_prefix(const UnderlayRouteSpec* msg) {
  return *msg->_impl_.dest_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
UnderlayRouteSpec::_Internal::next_hop_address(const UnderlayRouteSpec* msg) {
  return *msg->_impl_.next_hop_address_;
}
void UnderlayRouteSpec::clear_dest_prefix() {
  if (GetArenaForAllocation() == nullptr && _impl_.dest_prefix_ != nullptr) {
    delete _impl_.dest_prefix_;
  }
  _impl_.dest_prefix_ = nullptr;
}
void UnderlayRouteSpec::clear_next_hop_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_hop_address_ != nullptr) {
    delete _impl_.next_hop_address_;
  }
  _impl_.next_hop_address_ = nullptr;
}
UnderlayRouteSpec::UnderlayRouteSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
}
UnderlayRouteSpec::UnderlayRouteSpec(const UnderlayRouteSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderlayRouteSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.interface_name_ref_){}
    , decltype(_impl_.dest_prefix_){nullptr}
    , decltype(_impl_.next_hop_address_){nullptr}
    , decltype(_impl_.state_){}
    , decltype(_impl_.enable_admin_distance_){}
    , decltype(_impl_.admin_dist_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_impl_.route_table_name_ref_.Set(from._internal_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interface_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_name_ref().empty()) {
    _this->_impl_.interface_name_ref_.Set(from._internal_interface_name_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dest_prefix()) {
    _this->_impl_.dest_prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from._impl_.dest_prefix_);
  }
  if (from._internal_has_next_hop_address()) {
    _this->_impl_.next_hop_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.next_hop_address_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.admin_dist_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.admin_dist_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
}

inline void UnderlayRouteSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.interface_name_ref_){}
    , decltype(_impl_.dest_prefix_){nullptr}
    , decltype(_impl_.next_hop_address_){nullptr}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.enable_admin_distance_){false}
    , decltype(_impl_.admin_dist_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interface_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnderlayRouteSpec::~UnderlayRouteSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderlayRouteSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_table_name_ref_.Destroy();
  _impl_.interface_name_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dest_prefix_;
  if (this != internal_default_instance()) delete _impl_.next_hop_address_;
}

void UnderlayRouteSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderlayRouteSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_table_name_ref_.ClearToEmpty();
  _impl_.interface_name_ref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dest_prefix_ != nullptr) {
    delete _impl_.dest_prefix_;
  }
  _impl_.dest_prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.next_hop_address_ != nullptr) {
    delete _impl_.next_hop_address_;
  }
  _impl_.next_hop_address_ = nullptr;
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.admin_dist_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.admin_dist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRouteSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_table_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::opi_api::network::opinetcommon::v1alpha1::AdminState>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enable_admin_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.enable_admin_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 admin_dist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.admin_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string interface_name_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_interface_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRouteSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_table_name_ref = 1;
  if (!this->_internal_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_table_name_ref().data(), static_cast<int>(this->_internal_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_table_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dest_prefix(this),
        _Internal::dest_prefix(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::next_hop_address(this),
        _Internal::next_hop_address(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // bool enable_admin_distance = 5;
  if (this->_internal_enable_admin_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_admin_distance(), target);
  }

  // int32 admin_dist = 6;
  if (this->_internal_admin_dist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_admin_dist(), target);
  }

  // string interface_name_ref = 7;
  if (!this->_internal_interface_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_name_ref().data(), static_cast<int>(this->_internal_interface_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_name_ref");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_interface_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  return target;
}

size_t UnderlayRouteSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_table_name_ref = 1;
  if (!this->_internal_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_table_name_ref());
  }

  // string interface_name_ref = 7;
  if (!this->_internal_interface_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_name_ref());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dest_prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hop_address_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 4;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool enable_admin_distance = 5;
  if (this->_internal_enable_admin_distance() != 0) {
    total_size += 1 + 1;
  }

  // int32 admin_dist = 6;
  if (this->_internal_admin_dist() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_admin_dist());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRouteSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderlayRouteSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRouteSpec::GetClassData() const { return &_class_data_; }


void UnderlayRouteSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderlayRouteSpec*>(&to_msg);
  auto& from = static_cast<const UnderlayRouteSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_table_name_ref().empty()) {
    _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
  }
  if (!from._internal_interface_name_ref().empty()) {
    _this->_internal_set_interface_name_ref(from._internal_interface_name_ref());
  }
  if (from._internal_has_dest_prefix()) {
    _this->_internal_mutable_dest_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(
        from._internal_dest_prefix());
  }
  if (from._internal_has_next_hop_address()) {
    _this->_internal_mutable_next_hop_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_next_hop_address());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_enable_admin_distance() != 0) {
    _this->_internal_set_enable_admin_distance(from._internal_enable_admin_distance());
  }
  if (from._internal_admin_dist() != 0) {
    _this->_internal_set_admin_dist(from._internal_admin_dist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRouteSpec::CopyFrom(const UnderlayRouteSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRouteSpec::IsInitialized() const {
  return true;
}

void UnderlayRouteSpec::InternalSwap(UnderlayRouteSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_table_name_ref_, lhs_arena,
      &other->_impl_.route_table_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_name_ref_, lhs_arena,
      &other->_impl_.interface_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRouteSpec, _impl_.admin_dist_)
      + sizeof(UnderlayRouteSpec::_impl_.admin_dist_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRouteSpec, _impl_.dest_prefix_)>(
          reinterpret_cast<char*>(&_impl_.dest_prefix_),
          reinterpret_cast<char*>(&other->_impl_.dest_prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRouteSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[1]);
}

// ===================================================================

class UnderlayRouteStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix(const UnderlayRouteStatus* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address(const UnderlayRouteStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
UnderlayRouteStatus::_Internal::dest_prefix(const UnderlayRouteStatus* msg) {
  return *msg->_impl_.dest_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
UnderlayRouteStatus::_Internal::next_hop_address(const UnderlayRouteStatus* msg) {
  return *msg->_impl_.next_hop_address_;
}
void UnderlayRouteStatus::clear_dest_prefix() {
  if (GetArenaForAllocation() == nullptr && _impl_.dest_prefix_ != nullptr) {
    delete _impl_.dest_prefix_;
  }
  _impl_.dest_prefix_ = nullptr;
}
void UnderlayRouteStatus::clear_next_hop_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_hop_address_ != nullptr) {
    delete _impl_.next_hop_address_;
  }
  _impl_.next_hop_address_ = nullptr;
}
UnderlayRouteStatus::UnderlayRouteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
}
UnderlayRouteStatus::UnderlayRouteStatus(const UnderlayRouteStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderlayRouteStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dest_prefix_){nullptr}
    , decltype(_impl_.next_hop_address_){nullptr}
    , decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.if_index_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.proto_){}
    , decltype(_impl_.age_){}
    , decltype(_impl_.metric_){}
    , decltype(_impl_.fib_route_){}
    , decltype(_impl_.connected_){}
    , decltype(_impl_.admin_distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dest_prefix()) {
    _this->_impl_.dest_prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from._impl_.dest_prefix_);
  }
  if (from._internal_has_next_hop_address()) {
    _this->_impl_.next_hop_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.next_hop_address_);
  }
  ::memcpy(&_impl_.route_table_name_ref_, &from._impl_.route_table_name_ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.admin_distance_) -
    reinterpret_cast<char*>(&_impl_.route_table_name_ref_)) + sizeof(_impl_.admin_distance_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
}

inline void UnderlayRouteStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dest_prefix_){nullptr}
    , decltype(_impl_.next_hop_address_){nullptr}
    , decltype(_impl_.route_table_name_ref_){0}
    , decltype(_impl_.if_index_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.proto_){0}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.metric_){0}
    , decltype(_impl_.fib_route_){false}
    , decltype(_impl_.connected_){false}
    , decltype(_impl_.admin_distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnderlayRouteStatus::~UnderlayRouteStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderlayRouteStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dest_prefix_;
  if (this != internal_default_instance()) delete _impl_.next_hop_address_;
}

void UnderlayRouteStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderlayRouteStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.dest_prefix_ != nullptr) {
    delete _impl_.dest_prefix_;
  }
  _impl_.dest_prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.next_hop_address_ != nullptr) {
    delete _impl_.next_hop_address_;
  }
  _impl_.next_hop_address_ = nullptr;
  ::memset(&_impl_.route_table_name_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.admin_distance_) -
      reinterpret_cast<char*>(&_impl_.route_table_name_ref_)) + sizeof(_impl_.admin_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRouteStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 route_table_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.route_table_name_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 if_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.if_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::opinetcommon::v1alpha1::RouteType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto(static_cast<::opi_api::network::opinetcommon::v1alpha1::RouteProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 age = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 metric = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fib_route = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.fib_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool connected = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 admin_distance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.admin_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRouteStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 route_table_name_ref = 1;
  if (this->_internal_route_table_name_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_route_table_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dest_prefix(this),
        _Internal::dest_prefix(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::next_hop_address(this),
        _Internal::next_hop_address(this).GetCachedSize(), target, stream);
  }

  // int32 if_index = 5;
  if (this->_internal_if_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_if_index(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_proto(), target);
  }

  // int32 age = 8;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_age(), target);
  }

  // int32 metric = 9;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_metric(), target);
  }

  // bool fib_route = 10;
  if (this->_internal_fib_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_fib_route(), target);
  }

  // bool connected = 11;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_connected(), target);
  }

  // int32 admin_distance = 12;
  if (this->_internal_admin_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_admin_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  return target;
}

size_t UnderlayRouteStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dest_prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hop_address_);
  }

  // int32 route_table_name_ref = 1;
  if (this->_internal_route_table_name_ref() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_route_table_name_ref());
  }

  // int32 if_index = 5;
  if (this->_internal_if_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_if_index());
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
  if (this->_internal_proto() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_proto());
  }

  // int32 age = 8;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int32 metric = 9;
  if (this->_internal_metric() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_metric());
  }

  // bool fib_route = 10;
  if (this->_internal_fib_route() != 0) {
    total_size += 1 + 1;
  }

  // bool connected = 11;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  // int32 admin_distance = 12;
  if (this->_internal_admin_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_admin_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRouteStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderlayRouteStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRouteStatus::GetClassData() const { return &_class_data_; }


void UnderlayRouteStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderlayRouteStatus*>(&to_msg);
  auto& from = static_cast<const UnderlayRouteStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dest_prefix()) {
    _this->_internal_mutable_dest_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(
        from._internal_dest_prefix());
  }
  if (from._internal_has_next_hop_address()) {
    _this->_internal_mutable_next_hop_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_next_hop_address());
  }
  if (from._internal_route_table_name_ref() != 0) {
    _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
  }
  if (from._internal_if_index() != 0) {
    _this->_internal_set_if_index(from._internal_if_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_proto() != 0) {
    _this->_internal_set_proto(from._internal_proto());
  }
  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  if (from._internal_metric() != 0) {
    _this->_internal_set_metric(from._internal_metric());
  }
  if (from._internal_fib_route() != 0) {
    _this->_internal_set_fib_route(from._internal_fib_route());
  }
  if (from._internal_connected() != 0) {
    _this->_internal_set_connected(from._internal_connected());
  }
  if (from._internal_admin_distance() != 0) {
    _this->_internal_set_admin_distance(from._internal_admin_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRouteStatus::CopyFrom(const UnderlayRouteStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRouteStatus::IsInitialized() const {
  return true;
}

void UnderlayRouteStatus::InternalSwap(UnderlayRouteStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRouteStatus, _impl_.admin_distance_)
      + sizeof(UnderlayRouteStatus::_impl_.admin_distance_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRouteStatus, _impl_.dest_prefix_)>(
          reinterpret_cast<char*>(&_impl_.dest_prefix_),
          reinterpret_cast<char*>(&other->_impl_.dest_prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRouteStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[2]);
}

// ===================================================================

class UnderlayRouteLookupKey::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix(const UnderlayRouteLookupKey* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address(const UnderlayRouteLookupKey* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
UnderlayRouteLookupKey::_Internal::dest_prefix(const UnderlayRouteLookupKey* msg) {
  return *msg->_impl_.dest_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
UnderlayRouteLookupKey::_Internal::next_hop_address(const UnderlayRouteLookupKey* msg) {
  return *msg->_impl_.next_hop_address_;
}
void UnderlayRouteLookupKey::clear_dest_prefix() {
  if (GetArenaForAllocation() == nullptr && _impl_.dest_prefix_ != nullptr) {
    delete _impl_.dest_prefix_;
  }
  _impl_.dest_prefix_ = nullptr;
}
void UnderlayRouteLookupKey::clear_next_hop_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_hop_address_ != nullptr) {
    delete _impl_.next_hop_address_;
  }
  _impl_.next_hop_address_ = nullptr;
}
UnderlayRouteLookupKey::UnderlayRouteLookupKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
}
UnderlayRouteLookupKey::UnderlayRouteLookupKey(const UnderlayRouteLookupKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderlayRouteLookupKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.dest_prefix_){nullptr}
    , decltype(_impl_.next_hop_address_){nullptr}
    , decltype(_impl_.ifid_){}
    , decltype(_impl_.proto_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_table_name_ref().empty()) {
    _this->_impl_.route_table_name_ref_.Set(from._internal_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dest_prefix()) {
    _this->_impl_.dest_prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from._impl_.dest_prefix_);
  }
  if (from._internal_has_next_hop_address()) {
    _this->_impl_.next_hop_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.next_hop_address_);
  }
  ::memcpy(&_impl_.ifid_, &from._impl_.ifid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.proto_) -
    reinterpret_cast<char*>(&_impl_.ifid_)) + sizeof(_impl_.proto_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
}

inline void UnderlayRouteLookupKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_table_name_ref_){}
    , decltype(_impl_.dest_prefix_){nullptr}
    , decltype(_impl_.next_hop_address_){nullptr}
    , decltype(_impl_.ifid_){0}
    , decltype(_impl_.proto_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnderlayRouteLookupKey::~UnderlayRouteLookupKey() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderlayRouteLookupKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_table_name_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dest_prefix_;
  if (this != internal_default_instance()) delete _impl_.next_hop_address_;
}

void UnderlayRouteLookupKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderlayRouteLookupKey::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_table_name_ref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dest_prefix_ != nullptr) {
    delete _impl_.dest_prefix_;
  }
  _impl_.dest_prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.next_hop_address_ != nullptr) {
    delete _impl_.next_hop_address_;
  }
  _impl_.next_hop_address_ = nullptr;
  ::memset(&_impl_.ifid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.proto_) -
      reinterpret_cast<char*>(&_impl_.ifid_)) + sizeof(_impl_.proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRouteLookupKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route_table_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ifid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ifid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto(static_cast<::opi_api::network::opinetcommon::v1alpha1::RouteProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRouteLookupKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route_table_name_ref = 1;
  if (!this->_internal_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_table_name_ref().data(), static_cast<int>(this->_internal_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_table_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dest_prefix(this),
        _Internal::dest_prefix(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::next_hop_address(this),
        _Internal::next_hop_address(this).GetCachedSize(), target, stream);
  }

  // int32 ifid = 4;
  if (this->_internal_ifid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ifid(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  return target;
}

size_t UnderlayRouteLookupKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_table_name_ref = 1;
  if (!this->_internal_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_table_name_ref());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dest_prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hop_address_);
  }

  // int32 ifid = 4;
  if (this->_internal_ifid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ifid());
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
  if (this->_internal_proto() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRouteLookupKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderlayRouteLookupKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRouteLookupKey::GetClassData() const { return &_class_data_; }


void UnderlayRouteLookupKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderlayRouteLookupKey*>(&to_msg);
  auto& from = static_cast<const UnderlayRouteLookupKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route_table_name_ref().empty()) {
    _this->_internal_set_route_table_name_ref(from._internal_route_table_name_ref());
  }
  if (from._internal_has_dest_prefix()) {
    _this->_internal_mutable_dest_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(
        from._internal_dest_prefix());
  }
  if (from._internal_has_next_hop_address()) {
    _this->_internal_mutable_next_hop_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_next_hop_address());
  }
  if (from._internal_ifid() != 0) {
    _this->_internal_set_ifid(from._internal_ifid());
  }
  if (from._internal_proto() != 0) {
    _this->_internal_set_proto(from._internal_proto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRouteLookupKey::CopyFrom(const UnderlayRouteLookupKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRouteLookupKey::IsInitialized() const {
  return true;
}

void UnderlayRouteLookupKey::InternalSwap(UnderlayRouteLookupKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_table_name_ref_, lhs_arena,
      &other->_impl_.route_table_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRouteLookupKey, _impl_.proto_)
      + sizeof(UnderlayRouteLookupKey::_impl_.proto_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRouteLookupKey, _impl_.dest_prefix_)>(
          reinterpret_cast<char*>(&_impl_.dest_prefix_),
          reinterpret_cast<char*>(&other->_impl_.dest_prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRouteLookupKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRoute*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
