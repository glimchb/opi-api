// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nexthop.proto

#include "nexthop.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR NextHop::NextHop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextHopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopDefaultTypeInternal() {}
  union {
    NextHop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopDefaultTypeInternal _NextHop_default_instance_;
PROTOBUF_CONSTEXPR NextHopSpec::NextHopSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nhinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NextHopSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopSpecDefaultTypeInternal() {}
  union {
    NextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopSpecDefaultTypeInternal _NextHopSpec_default_instance_;
PROTOBUF_CONSTEXPR UnderlayNextHopSpec::UnderlayNextHopSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.underlay_nh_mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderlayNextHopSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderlayNextHopSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderlayNextHopSpecDefaultTypeInternal() {}
  union {
    UnderlayNextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderlayNextHopSpecDefaultTypeInternal _UnderlayNextHopSpec_default_instance_;
PROTOBUF_CONSTEXPR OverlayNextHopSpec::OverlayNextHopSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tunnel_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverlayNextHopSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlayNextHopSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlayNextHopSpecDefaultTypeInternal() {}
  union {
    OverlayNextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlayNextHopSpecDefaultTypeInternal _OverlayNextHopSpec_default_instance_;
PROTOBUF_CONSTEXPR IPNextHopSpec::IPNextHopSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vpc_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_address_)*/nullptr
  , /*decltype(_impl_.vlan_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IPNextHopSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPNextHopSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPNextHopSpecDefaultTypeInternal() {}
  union {
    IPNextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPNextHopSpecDefaultTypeInternal _IPNextHopSpec_default_instance_;
PROTOBUF_CONSTEXPR NextHopStatus::NextHopStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hw_handle_)*/nullptr
  , /*decltype(_impl_.nhinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NextHopStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopStatusDefaultTypeInternal() {}
  union {
    NextHopStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopStatusDefaultTypeInternal _NextHopStatus_default_instance_;
PROTOBUF_CONSTEXPR UnderlayNextHopStatus::UnderlayNextHopStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.vlan_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnderlayNextHopStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnderlayNextHopStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnderlayNextHopStatusDefaultTypeInternal() {}
  union {
    UnderlayNextHopStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnderlayNextHopStatusDefaultTypeInternal _UnderlayNextHopStatus_default_instance_;
PROTOBUF_CONSTEXPR OverlayNextHopStatus::OverlayNextHopStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tunnel_ip_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverlayNextHopStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlayNextHopStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlayNextHopStatusDefaultTypeInternal() {}
  union {
    OverlayNextHopStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlayNextHopStatusDefaultTypeInternal _OverlayNextHopStatus_default_instance_;
PROTOBUF_CONSTEXPR NextHopLookup::NextHopLookup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gettype_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NextHopLookupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopLookupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopLookupDefaultTypeInternal() {}
  union {
    NextHopLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopLookupDefaultTypeInternal _NextHopLookup_default_instance_;
PROTOBUF_CONSTEXPR NextHopGroup::NextHopGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextHopGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopGroupDefaultTypeInternal() {}
  union {
    NextHopGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopGroupDefaultTypeInternal _NextHopGroup_default_instance_;
PROTOBUF_CONSTEXPR NextHopGroupSpec::NextHopGroupSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextHopGroupSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopGroupSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopGroupSpecDefaultTypeInternal() {}
  union {
    NextHopGroupSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopGroupSpecDefaultTypeInternal _NextHopGroupSpec_default_instance_;
PROTOBUF_CONSTEXPR NextHopGroupStatus::NextHopGroupStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.hw_handle_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextHopGroupStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopGroupStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopGroupStatusDefaultTypeInternal() {}
  union {
    NextHopGroupStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopGroupStatusDefaultTypeInternal _NextHopGroupStatus_default_instance_;
PROTOBUF_CONSTEXPR NextHopGroupLookup::NextHopGroupLookup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gettype_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NextHopGroupLookupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextHopGroupLookupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextHopGroupLookupDefaultTypeInternal() {}
  union {
    NextHopGroupLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextHopGroupLookupDefaultTypeInternal _NextHopGroupLookup_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_nexthop_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nexthop_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_nexthop_2eproto = nullptr;

const uint32_t TableStruct_nexthop_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, _impl_.nhinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec, _impl_.interface_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec, _impl_.underlay_nh_mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec, _impl_.tunnel_name_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, _impl_.vpc_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, _impl_.vlan_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, _impl_.mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, _impl_.hw_handle_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, _impl_.nhinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus, _impl_.vlan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus, _impl_.tunnel_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopLookup, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopLookup, _impl_.gettype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, _impl_.members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus, _impl_.hw_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup, _impl_.gettype_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHop)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopSpec)},
  { 19, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec)},
  { 27, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec)},
  { 34, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::IPNextHopSpec)},
  { 44, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopStatus)},
  { 54, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus)},
  { 62, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus)},
  { 69, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopLookup)},
  { 78, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroup)},
  { 87, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec)},
  { 95, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus)},
  { 103, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_NextHop_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_UnderlayNextHopSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_OverlayNextHopSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_IPNextHopSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_UnderlayNextHopStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_OverlayNextHopStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopLookup_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopGroup_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopGroupSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopGroupStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_NextHopGroupLookup_default_instance_._instance,
};

const char descriptor_table_protodef_nexthop_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnexthop.proto\022\036opi_api.network.cloud.v"
  "1alpha1\032\022networktypes.proto\032\031google/api/"
  "resource.proto\"\322\001\n\007NextHop\022\014\n\004name\030\001 \001(\t"
  "\0229\n\004spec\030\002 \001(\0132+.opi_api.network.cloud.v"
  "1alpha1.NextHopSpec\022=\n\006status\030\003 \001(\0132-.op"
  "i_api.network.cloud.v1alpha1.NextHopStat"
  "us:\?\352A<\n&opi_api.network.cloud.v1alpha1/"
  "nexthop\022\022nexthops/{nexthop}\"\374\001\n\013NextHopS"
  "pec\022M\n\017overlay_nh_info\030\001 \001(\01322.opi_api.n"
  "etwork.cloud.v1alpha1.OverlayNextHopSpec"
  "H\000\022O\n\020underlay_nh_info\030\002 \001(\01323.opi_api.n"
  "etwork.cloud.v1alpha1.UnderlayNextHopSpe"
  "cH\000\022C\n\nip_nh_info\030\003 \001(\0132-.opi_api.networ"
  "k.cloud.v1alpha1.IPNextHopSpecH\000B\010\n\006nhin"
  "fo\"J\n\023UnderlayNextHopSpec\022\032\n\022interface_n"
  "ame_ref\030\001 \001(\t\022\027\n\017underlay_nh_mac\030\002 \001(\014\"-"
  "\n\022OverlayNextHopSpec\022\027\n\017tunnel_name_ref\030"
  "\001 \001(\t\"\206\001\n\rIPNextHopSpec\022\024\n\014vpc_name_ref\030"
  "\001 \001(\t\022D\n\nip_address\030\002 \001(\01320.opi_api.netw"
  "ork.opinetcommon.v1alpha1.IPAddress\022\014\n\004v"
  "lan\030\003 \001(\005\022\013\n\003mac\030\004 \001(\014\"\201\002\n\rNextHopStatus"
  "\022B\n\thw_handle\030\001 \001(\0132/.opi_api.network.op"
  "inetcommon.v1alpha1.HwHandle\022Q\n\020underlay"
  "_nh_info\030\002 \001(\01325.opi_api.network.cloud.v"
  "1alpha1.UnderlayNextHopStatusH\000\022O\n\017overl"
  "ay_nh_info\030\003 \001(\01324.opi_api.network.cloud"
  ".v1alpha1.OverlayNextHopStatusH\000B\010\n\006nhin"
  "fo\"3\n\025UnderlayNextHopStatus\022\014\n\004port\030\001 \001("
  "\005\022\014\n\004vlan\030\002 \001(\005\"[\n\024OverlayNextHopStatus\022"
  "C\n\ttunnel_ip\030\001 \001(\01320.opi_api.network.opi"
  "netcommon.v1alpha1.IPAddress\"n\n\rNextHopL"
  "ookup\022;\n\004type\030\001 \001(\0162+.opi_api.network.cl"
  "oud.v1alpha1.NextHopTypeH\000\022\025\n\013nh_name_re"
  "f\030\002 \001(\tH\000B\t\n\007gettype\"\360\001\n\014NextHopGroup\022\014\n"
  "\004name\030\001 \001(\t\022>\n\004spec\030\002 \001(\01320.opi_api.netw"
  "ork.cloud.v1alpha1.NextHopGroupSpec\022B\n\006s"
  "tatus\030\003 \001(\01322.opi_api.network.cloud.v1al"
  "pha1.NextHopGroupStatus:N\352AK\n+opi_api.ne"
  "twork.cloud.v1alpha1/nexthopgroup\022\034nexth"
  "opgroups/{nexthopgroup}\"\220\001\n\020NextHopGroup"
  "Spec\022>\n\004type\030\001 \001(\01620.opi_api.network.clo"
  "ud.v1alpha1.NextHopGroupType\022<\n\007members\030"
  "\002 \003(\0132+.opi_api.network.cloud.v1alpha1.N"
  "extHopSpec\"\230\001\n\022NextHopGroupStatus\022>\n\007mem"
  "bers\030\001 \003(\0132-.opi_api.network.cloud.v1alp"
  "ha1.NextHopStatus\022B\n\thw_handle\030\002 \001(\0132/.o"
  "pi_api.network.opinetcommon.v1alpha1.HwH"
  "andle\"~\n\022NextHopGroupLookup\022@\n\004type\030\001 \001("
  "\01620.opi_api.network.cloud.v1alpha1.NextH"
  "opGroupTypeH\000\022\033\n\021nh_group_name_ref\030\002 \001(\t"
  "H\000B\t\n\007gettype*y\n\013NextHopType\022\035\n\031NEXT_HOP"
  "_TYPE_UNSPECIFIED\020\000\022\024\n\020NEXT_HOP_TYPE_IP\020"
  "\001\022\032\n\026NEXT_HOP_TYPE_UNDERLAY\020\002\022\031\n\025NEXT_HO"
  "P_TYPE_OVERLAY\020\003*\204\001\n\020NextHopGroupType\022#\n"
  "\037NEXT_HOP_GROUP_TYPE_UNSPECIFIED\020\000\022$\n NE"
  "XT_HOP_GROUP_TYPE_OVERLAY_ECMP\020\001\022%\n!NEXT"
  "_HOP_GROUP_TYPE_UNDERLAY_ECMP\020\002Bm\n\036opi_a"
  "pi.network.cloud.v1alpha1B\014NextHopProtoP"
  "\001Z;github.com/opiproject/opi-api/network"
  "/cloud/v1alpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_nexthop_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_nexthop_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nexthop_2eproto = {
    false, false, 2390, descriptor_table_protodef_nexthop_2eproto,
    "nexthop.proto",
    &descriptor_table_nexthop_2eproto_once, descriptor_table_nexthop_2eproto_deps, 2, 13,
    schemas, file_default_instances, TableStruct_nexthop_2eproto::offsets,
    file_level_metadata_nexthop_2eproto, file_level_enum_descriptors_nexthop_2eproto,
    file_level_service_descriptors_nexthop_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nexthop_2eproto_getter() {
  return &descriptor_table_nexthop_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_nexthop_2eproto(&descriptor_table_nexthop_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextHopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nexthop_2eproto);
  return file_level_enum_descriptors_nexthop_2eproto[0];
}
bool NextHopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextHopGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nexthop_2eproto);
  return file_level_enum_descriptors_nexthop_2eproto[1];
}
bool NextHopGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NextHop::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::NextHopSpec& spec(const NextHop* msg);
  static const ::opi_api::network::cloud::v1alpha1::NextHopStatus& status(const NextHop* msg);
};

const ::opi_api::network::cloud::v1alpha1::NextHopSpec&
NextHop::_Internal::spec(const NextHop* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::NextHopStatus&
NextHop::_Internal::status(const NextHop* msg) {
  return *msg->_impl_.status_;
}
NextHop::NextHop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHop)
}
NextHop::NextHop(const NextHop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::NextHopSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::NextHopStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHop)
}

inline void NextHop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NextHop::~NextHop() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void NextHop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHop::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.NextHop.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.NextHop.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHop)
  return target;
}

size_t NextHop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHop::GetClassData() const { return &_class_data_; }


void NextHop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHop*>(&to_msg);
  auto& from = static_cast<const NextHop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::NextHopSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::NextHopStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHop::CopyFrom(const NextHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHop::IsInitialized() const {
  return true;
}

void NextHop::InternalSwap(NextHop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextHop, _impl_.status_)
      + sizeof(NextHop::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(NextHop, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[0]);
}

// ===================================================================

class NextHopSpec::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec& overlay_nh_info(const NextHopSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec& underlay_nh_info(const NextHopSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec& ip_nh_info(const NextHopSpec* msg);
};

const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec&
NextHopSpec::_Internal::overlay_nh_info(const NextHopSpec* msg) {
  return *msg->_impl_.nhinfo_.overlay_nh_info_;
}
const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec&
NextHopSpec::_Internal::underlay_nh_info(const NextHopSpec* msg) {
  return *msg->_impl_.nhinfo_.underlay_nh_info_;
}
const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec&
NextHopSpec::_Internal::ip_nh_info(const NextHopSpec* msg) {
  return *msg->_impl_.nhinfo_.ip_nh_info_;
}
void NextHopSpec::set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* overlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (overlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay_nh_info);
    if (message_arena != submessage_arena) {
      overlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_nh_info, submessage_arena);
    }
    set_has_overlay_nh_info();
    _impl_.nhinfo_.overlay_nh_info_ = overlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
}
void NextHopSpec::set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* underlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (underlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlay_nh_info);
    if (message_arena != submessage_arena) {
      underlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlay_nh_info, submessage_arena);
    }
    set_has_underlay_nh_info();
    _impl_.nhinfo_.underlay_nh_info_ = underlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
}
void NextHopSpec::set_allocated_ip_nh_info(::opi_api::network::cloud::v1alpha1::IPNextHopSpec* ip_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (ip_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ip_nh_info);
    if (message_arena != submessage_arena) {
      ip_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_nh_info, submessage_arena);
    }
    set_has_ip_nh_info();
    _impl_.nhinfo_.ip_nh_info_ = ip_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
}
NextHopSpec::NextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopSpec)
}
NextHopSpec::NextHopSpec(const NextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nhinfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_nhinfo();
  switch (from.nhinfo_case()) {
    case kOverlayNhInfo: {
      _this->_internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec::MergeFrom(
          from._internal_overlay_nh_info());
      break;
    }
    case kUnderlayNhInfo: {
      _this->_internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec::MergeFrom(
          from._internal_underlay_nh_info());
      break;
    }
    case kIpNhInfo: {
      _this->_internal_mutable_ip_nh_info()->::opi_api::network::cloud::v1alpha1::IPNextHopSpec::MergeFrom(
          from._internal_ip_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopSpec)
}

inline void NextHopSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nhinfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_nhinfo();
}

NextHopSpec::~NextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_nhinfo()) {
    clear_nhinfo();
  }
}

void NextHopSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopSpec::clear_nhinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  switch (nhinfo_case()) {
    case kOverlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nhinfo_.overlay_nh_info_;
      }
      break;
    }
    case kUnderlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nhinfo_.underlay_nh_info_;
      }
      break;
    }
    case kIpNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nhinfo_.ip_nh_info_;
      }
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NHINFO_NOT_SET;
}


void NextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_nhinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 1;
  if (_internal_has_overlay_nh_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::overlay_nh_info(this),
        _Internal::overlay_nh_info(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 2;
  if (_internal_has_underlay_nh_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::underlay_nh_info(this),
        _Internal::underlay_nh_info(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 3;
  if (_internal_has_ip_nh_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ip_nh_info(this),
        _Internal::ip_nh_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopSpec)
  return target;
}

size_t NextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (nhinfo_case()) {
    // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 1;
    case kOverlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nhinfo_.overlay_nh_info_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 2;
    case kUnderlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nhinfo_.underlay_nh_info_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 3;
    case kIpNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nhinfo_.ip_nh_info_);
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopSpec::GetClassData() const { return &_class_data_; }


void NextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopSpec*>(&to_msg);
  auto& from = static_cast<const NextHopSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.nhinfo_case()) {
    case kOverlayNhInfo: {
      _this->_internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec::MergeFrom(
          from._internal_overlay_nh_info());
      break;
    }
    case kUnderlayNhInfo: {
      _this->_internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec::MergeFrom(
          from._internal_underlay_nh_info());
      break;
    }
    case kIpNhInfo: {
      _this->_internal_mutable_ip_nh_info()->::opi_api::network::cloud::v1alpha1::IPNextHopSpec::MergeFrom(
          from._internal_ip_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopSpec::CopyFrom(const NextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopSpec::IsInitialized() const {
  return true;
}

void NextHopSpec::InternalSwap(NextHopSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.nhinfo_, other->_impl_.nhinfo_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[1]);
}

// ===================================================================

class UnderlayNextHopSpec::_Internal {
 public:
};

UnderlayNextHopSpec::UnderlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
}
UnderlayNextHopSpec::UnderlayNextHopSpec(const UnderlayNextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderlayNextHopSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_name_ref_){}
    , decltype(_impl_.underlay_nh_mac_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_name_ref().empty()) {
    _this->_impl_.interface_name_ref_.Set(from._internal_interface_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.underlay_nh_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlay_nh_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlay_nh_mac().empty()) {
    _this->_impl_.underlay_nh_mac_.Set(from._internal_underlay_nh_mac(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
}

inline void UnderlayNextHopSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_name_ref_){}
    , decltype(_impl_.underlay_nh_mac_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.underlay_nh_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlay_nh_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnderlayNextHopSpec::~UnderlayNextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderlayNextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_name_ref_.Destroy();
  _impl_.underlay_nh_mac_.Destroy();
}

void UnderlayNextHopSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderlayNextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_name_ref_.ClearToEmpty();
  _impl_.underlay_nh_mac_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayNextHopSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interface_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.interface_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // bytes underlay_nh_mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_underlay_nh_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayNextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interface_name_ref = 1;
  if (!this->_internal_interface_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_name_ref().data(), static_cast<int>(this->_internal_interface_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.interface_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_name_ref(), target);
  }

  // bytes underlay_nh_mac = 2;
  if (!this->_internal_underlay_nh_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_underlay_nh_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  return target;
}

size_t UnderlayNextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_name_ref = 1;
  if (!this->_internal_interface_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_name_ref());
  }

  // bytes underlay_nh_mac = 2;
  if (!this->_internal_underlay_nh_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_underlay_nh_mac());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayNextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderlayNextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayNextHopSpec::GetClassData() const { return &_class_data_; }


void UnderlayNextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderlayNextHopSpec*>(&to_msg);
  auto& from = static_cast<const UnderlayNextHopSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_name_ref().empty()) {
    _this->_internal_set_interface_name_ref(from._internal_interface_name_ref());
  }
  if (!from._internal_underlay_nh_mac().empty()) {
    _this->_internal_set_underlay_nh_mac(from._internal_underlay_nh_mac());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayNextHopSpec::CopyFrom(const UnderlayNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayNextHopSpec::IsInitialized() const {
  return true;
}

void UnderlayNextHopSpec::InternalSwap(UnderlayNextHopSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_name_ref_, lhs_arena,
      &other->_impl_.interface_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.underlay_nh_mac_, lhs_arena,
      &other->_impl_.underlay_nh_mac_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayNextHopSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[2]);
}

// ===================================================================

class OverlayNextHopSpec::_Internal {
 public:
};

OverlayNextHopSpec::OverlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
}
OverlayNextHopSpec::OverlayNextHopSpec(const OverlayNextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverlayNextHopSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tunnel_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tunnel_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tunnel_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tunnel_name_ref().empty()) {
    _this->_impl_.tunnel_name_ref_.Set(from._internal_tunnel_name_ref(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
}

inline void OverlayNextHopSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tunnel_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tunnel_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tunnel_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverlayNextHopSpec::~OverlayNextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverlayNextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tunnel_name_ref_.Destroy();
}

void OverlayNextHopSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverlayNextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tunnel_name_ref_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayNextHopSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tunnel_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tunnel_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlayNextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tunnel_name_ref = 1;
  if (!this->_internal_tunnel_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tunnel_name_ref().data(), static_cast<int>(this->_internal_tunnel_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tunnel_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  return target;
}

size_t OverlayNextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tunnel_name_ref = 1;
  if (!this->_internal_tunnel_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tunnel_name_ref());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayNextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverlayNextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayNextHopSpec::GetClassData() const { return &_class_data_; }


void OverlayNextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverlayNextHopSpec*>(&to_msg);
  auto& from = static_cast<const OverlayNextHopSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tunnel_name_ref().empty()) {
    _this->_internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayNextHopSpec::CopyFrom(const OverlayNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayNextHopSpec::IsInitialized() const {
  return true;
}

void OverlayNextHopSpec::InternalSwap(OverlayNextHopSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tunnel_name_ref_, lhs_arena,
      &other->_impl_.tunnel_name_ref_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayNextHopSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[3]);
}

// ===================================================================

class IPNextHopSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address(const IPNextHopSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
IPNextHopSpec::_Internal::ip_address(const IPNextHopSpec* msg) {
  return *msg->_impl_.ip_address_;
}
void IPNextHopSpec::clear_ip_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.ip_address_ != nullptr) {
    delete _impl_.ip_address_;
  }
  _impl_.ip_address_ = nullptr;
}
IPNextHopSpec::IPNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
}
IPNextHopSpec::IPNextHopSpec(const IPNextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IPNextHopSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_name_ref_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ip_address_){nullptr}
    , decltype(_impl_.vlan_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vpc_name_ref().empty()) {
    _this->_impl_.vpc_name_ref_.Set(from._internal_vpc_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    _this->_impl_.mac_.Set(from._internal_mac(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ip_address()) {
    _this->_impl_.ip_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.ip_address_);
  }
  _this->_impl_.vlan_ = from._impl_.vlan_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
}

inline void IPNextHopSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc_name_ref_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ip_address_){nullptr}
    , decltype(_impl_.vlan_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vpc_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IPNextHopSpec::~IPNextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IPNextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vpc_name_ref_.Destroy();
  _impl_.mac_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ip_address_;
}

void IPNextHopSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IPNextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vpc_name_ref_.ClearToEmpty();
  _impl_.mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ip_address_ != nullptr) {
    delete _impl_.ip_address_;
  }
  _impl_.ip_address_ = nullptr;
  _impl_.vlan_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPNextHopSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vpc_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vpc_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vlan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPNextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vpc_name_ref = 1;
  if (!this->_internal_vpc_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpc_name_ref().data(), static_cast<int>(this->_internal_vpc_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vpc_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  if (this->_internal_has_ip_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ip_address(this),
        _Internal::ip_address(this).GetCachedSize(), target, stream);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_vlan(), target);
  }

  // bytes mac = 4;
  if (!this->_internal_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  return target;
}

size_t IPNextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vpc_name_ref = 1;
  if (!this->_internal_vpc_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpc_name_ref());
  }

  // bytes mac = 4;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  if (this->_internal_has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ip_address_);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPNextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IPNextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPNextHopSpec::GetClassData() const { return &_class_data_; }


void IPNextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IPNextHopSpec*>(&to_msg);
  auto& from = static_cast<const IPNextHopSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vpc_name_ref().empty()) {
    _this->_internal_set_vpc_name_ref(from._internal_vpc_name_ref());
  }
  if (!from._internal_mac().empty()) {
    _this->_internal_set_mac(from._internal_mac());
  }
  if (from._internal_has_ip_address()) {
    _this->_internal_mutable_ip_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_ip_address());
  }
  if (from._internal_vlan() != 0) {
    _this->_internal_set_vlan(from._internal_vlan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPNextHopSpec::CopyFrom(const IPNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPNextHopSpec::IsInitialized() const {
  return true;
}

void IPNextHopSpec::InternalSwap(IPNextHopSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vpc_name_ref_, lhs_arena,
      &other->_impl_.vpc_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_, lhs_arena,
      &other->_impl_.mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPNextHopSpec, _impl_.vlan_)
      + sizeof(IPNextHopSpec::_impl_.vlan_)
      - PROTOBUF_FIELD_OFFSET(IPNextHopSpec, _impl_.ip_address_)>(
          reinterpret_cast<char*>(&_impl_.ip_address_),
          reinterpret_cast<char*>(&other->_impl_.ip_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPNextHopSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[4]);
}

// ===================================================================

class NextHopStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const NextHopStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus& underlay_nh_info(const NextHopStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus& overlay_nh_info(const NextHopStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
NextHopStatus::_Internal::hw_handle(const NextHopStatus* msg) {
  return *msg->_impl_.hw_handle_;
}
const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus&
NextHopStatus::_Internal::underlay_nh_info(const NextHopStatus* msg) {
  return *msg->_impl_.nhinfo_.underlay_nh_info_;
}
const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus&
NextHopStatus::_Internal::overlay_nh_info(const NextHopStatus* msg) {
  return *msg->_impl_.nhinfo_.overlay_nh_info_;
}
void NextHopStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
}
void NextHopStatus::set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* underlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (underlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlay_nh_info);
    if (message_arena != submessage_arena) {
      underlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlay_nh_info, submessage_arena);
    }
    set_has_underlay_nh_info();
    _impl_.nhinfo_.underlay_nh_info_ = underlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
}
void NextHopStatus::set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* overlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (overlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay_nh_info);
    if (message_arena != submessage_arena) {
      overlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_nh_info, submessage_arena);
    }
    set_has_overlay_nh_info();
    _impl_.nhinfo_.overlay_nh_info_ = overlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
}
NextHopStatus::NextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopStatus)
}
NextHopStatus::NextHopStatus(const NextHopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.nhinfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    _this->_impl_.hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.hw_handle_);
  }
  clear_has_nhinfo();
  switch (from.nhinfo_case()) {
    case kUnderlayNhInfo: {
      _this->_internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus::MergeFrom(
          from._internal_underlay_nh_info());
      break;
    }
    case kOverlayNhInfo: {
      _this->_internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus::MergeFrom(
          from._internal_overlay_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopStatus)
}

inline void NextHopStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.nhinfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_nhinfo();
}

NextHopStatus::~NextHopStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hw_handle_;
  if (has_nhinfo()) {
    clear_nhinfo();
  }
}

void NextHopStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopStatus::clear_nhinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  switch (nhinfo_case()) {
    case kUnderlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nhinfo_.underlay_nh_info_;
      }
      break;
    }
    case kOverlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.nhinfo_.overlay_nh_info_;
      }
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NHINFO_NOT_SET;
}


void NextHopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
  clear_nhinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hw_handle(this),
        _Internal::hw_handle(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
  if (_internal_has_underlay_nh_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::underlay_nh_info(this),
        _Internal::underlay_nh_info(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
  if (_internal_has_overlay_nh_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::overlay_nh_info(this),
        _Internal::overlay_nh_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopStatus)
  return target;
}

size_t NextHopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_handle_);
  }

  switch (nhinfo_case()) {
    // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
    case kUnderlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nhinfo_.underlay_nh_info_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
    case kOverlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nhinfo_.overlay_nh_info_);
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopStatus::GetClassData() const { return &_class_data_; }


void NextHopStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopStatus*>(&to_msg);
  auto& from = static_cast<const NextHopStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hw_handle()) {
    _this->_internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_hw_handle());
  }
  switch (from.nhinfo_case()) {
    case kUnderlayNhInfo: {
      _this->_internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus::MergeFrom(
          from._internal_underlay_nh_info());
      break;
    }
    case kOverlayNhInfo: {
      _this->_internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus::MergeFrom(
          from._internal_overlay_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopStatus::CopyFrom(const NextHopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopStatus::IsInitialized() const {
  return true;
}

void NextHopStatus::InternalSwap(NextHopStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.hw_handle_, other->_impl_.hw_handle_);
  swap(_impl_.nhinfo_, other->_impl_.nhinfo_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[5]);
}

// ===================================================================

class UnderlayNextHopStatus::_Internal {
 public:
};

UnderlayNextHopStatus::UnderlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
}
UnderlayNextHopStatus::UnderlayNextHopStatus(const UnderlayNextHopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnderlayNextHopStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.vlan_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vlan_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.vlan_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
}

inline void UnderlayNextHopStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0}
    , decltype(_impl_.vlan_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnderlayNextHopStatus::~UnderlayNextHopStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnderlayNextHopStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnderlayNextHopStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnderlayNextHopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vlan_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.vlan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayNextHopStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayNextHopStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 vlan = 2;
  if (this->_internal_vlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vlan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  return target;
}

size_t UnderlayNextHopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // int32 vlan = 2;
  if (this->_internal_vlan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayNextHopStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnderlayNextHopStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayNextHopStatus::GetClassData() const { return &_class_data_; }


void UnderlayNextHopStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnderlayNextHopStatus*>(&to_msg);
  auto& from = static_cast<const UnderlayNextHopStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_vlan() != 0) {
    _this->_internal_set_vlan(from._internal_vlan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayNextHopStatus::CopyFrom(const UnderlayNextHopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayNextHopStatus::IsInitialized() const {
  return true;
}

void UnderlayNextHopStatus::InternalSwap(UnderlayNextHopStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayNextHopStatus, _impl_.vlan_)
      + sizeof(UnderlayNextHopStatus::_impl_.vlan_)
      - PROTOBUF_FIELD_OFFSET(UnderlayNextHopStatus, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayNextHopStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[6]);
}

// ===================================================================

class OverlayNextHopStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& tunnel_ip(const OverlayNextHopStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
OverlayNextHopStatus::_Internal::tunnel_ip(const OverlayNextHopStatus* msg) {
  return *msg->_impl_.tunnel_ip_;
}
void OverlayNextHopStatus::clear_tunnel_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.tunnel_ip_ != nullptr) {
    delete _impl_.tunnel_ip_;
  }
  _impl_.tunnel_ip_ = nullptr;
}
OverlayNextHopStatus::OverlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
}
OverlayNextHopStatus::OverlayNextHopStatus(const OverlayNextHopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverlayNextHopStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tunnel_ip_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tunnel_ip()) {
    _this->_impl_.tunnel_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.tunnel_ip_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
}

inline void OverlayNextHopStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tunnel_ip_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OverlayNextHopStatus::~OverlayNextHopStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverlayNextHopStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tunnel_ip_;
}

void OverlayNextHopStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverlayNextHopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tunnel_ip_ != nullptr) {
    delete _impl_.tunnel_ip_;
  }
  _impl_.tunnel_ip_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayNextHopStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlayNextHopStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
  if (this->_internal_has_tunnel_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tunnel_ip(this),
        _Internal::tunnel_ip(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  return target;
}

size_t OverlayNextHopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
  if (this->_internal_has_tunnel_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tunnel_ip_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayNextHopStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverlayNextHopStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayNextHopStatus::GetClassData() const { return &_class_data_; }


void OverlayNextHopStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverlayNextHopStatus*>(&to_msg);
  auto& from = static_cast<const OverlayNextHopStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tunnel_ip()) {
    _this->_internal_mutable_tunnel_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_tunnel_ip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayNextHopStatus::CopyFrom(const OverlayNextHopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayNextHopStatus::IsInitialized() const {
  return true;
}

void OverlayNextHopStatus::InternalSwap(OverlayNextHopStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tunnel_ip_, other->_impl_.tunnel_ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayNextHopStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[7]);
}

// ===================================================================

class NextHopLookup::_Internal {
 public:
};

NextHopLookup::NextHopLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopLookup)
}
NextHopLookup::NextHopLookup(const NextHopLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopLookup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gettype_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_gettype();
  switch (from.gettype_case()) {
    case kType: {
      _this->_internal_set_type(from._internal_type());
      break;
    }
    case kNhNameRef: {
      _this->_internal_set_nh_name_ref(from._internal_nh_name_ref());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopLookup)
}

inline void NextHopLookup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gettype_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_gettype();
}

NextHopLookup::~NextHopLookup() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopLookup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_gettype()) {
    clear_gettype();
  }
}

void NextHopLookup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopLookup::clear_gettype() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  switch (gettype_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kNhNameRef: {
      _impl_.gettype_.nh_name_ref_.Destroy();
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GETTYPE_NOT_SET;
}


void NextHopLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_gettype();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopLookup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::NextHopType>(val));
        } else
          goto handle_unusual;
        continue;
      // string nh_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nh_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.NextHopLookup.nh_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopLookup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string nh_name_ref = 2;
  if (_internal_has_nh_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nh_name_ref().data(), static_cast<int>(this->_internal_nh_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.NextHopLookup.nh_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nh_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopLookup)
  return target;
}

size_t NextHopLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (gettype_case()) {
    // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
    case kType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
      break;
    }
    // string nh_name_ref = 2;
    case kNhNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nh_name_ref());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopLookup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopLookup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopLookup::GetClassData() const { return &_class_data_; }


void NextHopLookup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopLookup*>(&to_msg);
  auto& from = static_cast<const NextHopLookup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.gettype_case()) {
    case kType: {
      _this->_internal_set_type(from._internal_type());
      break;
    }
    case kNhNameRef: {
      _this->_internal_set_nh_name_ref(from._internal_nh_name_ref());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopLookup::CopyFrom(const NextHopLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopLookup::IsInitialized() const {
  return true;
}

void NextHopLookup::InternalSwap(NextHopLookup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gettype_, other->_impl_.gettype_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopLookup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[8]);
}

// ===================================================================

class NextHopGroup::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec& spec(const NextHopGroup* msg);
  static const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus& status(const NextHopGroup* msg);
};

const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec&
NextHopGroup::_Internal::spec(const NextHopGroup* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus&
NextHopGroup::_Internal::status(const NextHopGroup* msg) {
  return *msg->_impl_.status_;
}
NextHopGroup::NextHopGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroup)
}
NextHopGroup::NextHopGroup(const NextHopGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroup)
}

inline void NextHopGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NextHopGroup::~NextHopGroup() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void NextHopGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.NextHopGroup.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.NextHopGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroup)
  return target;
}

size_t NextHopGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroup::GetClassData() const { return &_class_data_; }


void NextHopGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopGroup*>(&to_msg);
  auto& from = static_cast<const NextHopGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::NextHopGroupSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::NextHopGroupStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroup::CopyFrom(const NextHopGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroup::IsInitialized() const {
  return true;
}

void NextHopGroup::InternalSwap(NextHopGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextHopGroup, _impl_.status_)
      + sizeof(NextHopGroup::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(NextHopGroup, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[9]);
}

// ===================================================================

class NextHopGroupSpec::_Internal {
 public:
};

NextHopGroupSpec::NextHopGroupSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
}
NextHopGroupSpec::NextHopGroupSpec(const NextHopGroupSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopGroupSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
}

inline void NextHopGroupSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NextHopGroupSpec::~NextHopGroupSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopGroupSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
}

void NextHopGroupSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroupSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::NextHopGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroupSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  return target;
}

size_t NextHopGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroupSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopGroupSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroupSpec::GetClassData() const { return &_class_data_; }


void NextHopGroupSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopGroupSpec*>(&to_msg);
  auto& from = static_cast<const NextHopGroupSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroupSpec::CopyFrom(const NextHopGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroupSpec::IsInitialized() const {
  return true;
}

void NextHopGroupSpec::InternalSwap(NextHopGroupSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroupSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[10]);
}

// ===================================================================

class NextHopGroupStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const NextHopGroupStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
NextHopGroupStatus::_Internal::hw_handle(const NextHopGroupStatus* msg) {
  return *msg->_impl_.hw_handle_;
}
void NextHopGroupStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
}
NextHopGroupStatus::NextHopGroupStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
}
NextHopGroupStatus::NextHopGroupStatus(const NextHopGroupStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopGroupStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.hw_handle_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    _this->_impl_.hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.hw_handle_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
}

inline void NextHopGroupStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , decltype(_impl_.hw_handle_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NextHopGroupStatus::~NextHopGroupStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopGroupStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.hw_handle_;
}

void NextHopGroupStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopGroupStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroupStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroupStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
  if (this->_internal_has_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hw_handle(this),
        _Internal::hw_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  return target;
}

size_t NextHopGroupStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroupStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopGroupStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroupStatus::GetClassData() const { return &_class_data_; }


void NextHopGroupStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopGroupStatus*>(&to_msg);
  auto& from = static_cast<const NextHopGroupStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  if (from._internal_has_hw_handle()) {
    _this->_internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_hw_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroupStatus::CopyFrom(const NextHopGroupStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroupStatus::IsInitialized() const {
  return true;
}

void NextHopGroupStatus::InternalSwap(NextHopGroupStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  swap(_impl_.hw_handle_, other->_impl_.hw_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroupStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[11]);
}

// ===================================================================

class NextHopGroupLookup::_Internal {
 public:
};

NextHopGroupLookup::NextHopGroupLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
}
NextHopGroupLookup::NextHopGroupLookup(const NextHopGroupLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextHopGroupLookup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gettype_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_gettype();
  switch (from.gettype_case()) {
    case kType: {
      _this->_internal_set_type(from._internal_type());
      break;
    }
    case kNhGroupNameRef: {
      _this->_internal_set_nh_group_name_ref(from._internal_nh_group_name_ref());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
}

inline void NextHopGroupLookup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gettype_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_gettype();
}

NextHopGroupLookup::~NextHopGroupLookup() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextHopGroupLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_gettype()) {
    clear_gettype();
  }
}

void NextHopGroupLookup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextHopGroupLookup::clear_gettype() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  switch (gettype_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kNhGroupNameRef: {
      _impl_.gettype_.nh_group_name_ref_.Destroy();
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GETTYPE_NOT_SET;
}


void NextHopGroupLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_gettype();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroupLookup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::NextHopGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // string nh_group_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nh_group_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.NextHopGroupLookup.nh_group_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroupLookup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string nh_group_name_ref = 2;
  if (_internal_has_nh_group_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nh_group_name_ref().data(), static_cast<int>(this->_internal_nh_group_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.NextHopGroupLookup.nh_group_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nh_group_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  return target;
}

size_t NextHopGroupLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (gettype_case()) {
    // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
    case kType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
      break;
    }
    // string nh_group_name_ref = 2;
    case kNhGroupNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nh_group_name_ref());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroupLookup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextHopGroupLookup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroupLookup::GetClassData() const { return &_class_data_; }


void NextHopGroupLookup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextHopGroupLookup*>(&to_msg);
  auto& from = static_cast<const NextHopGroupLookup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.gettype_case()) {
    case kType: {
      _this->_internal_set_type(from._internal_type());
      break;
    }
    case kNhGroupNameRef: {
      _this->_internal_set_nh_group_name_ref(from._internal_nh_group_name_ref());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroupLookup::CopyFrom(const NextHopGroupLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroupLookup::IsInitialized() const {
  return true;
}

void NextHopGroupLookup::InternalSwap(NextHopGroupLookup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gettype_, other->_impl_.gettype_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroupLookup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHop*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHop >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::IPNextHopSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::IPNextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::IPNextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopLookup*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroup*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
