// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpc.proto

#include "vpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR Vpc::Vpc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VpcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VpcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VpcDefaultTypeInternal() {}
  union {
    Vpc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VpcDefaultTypeInternal _Vpc_default_instance_;
PROTOBUF_CONSTEXPR VpcSpec::VpcSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ingress_v4_security_policy_name_ref_)*/{}
  , /*decltype(_impl_.ingress_v6_security_policy_name_ref_)*/{}
  , /*decltype(_impl_.egress_v4_security_policy_name_ref_)*/{}
  , /*decltype(_impl_.egress_v6_security_policy_name_ref_)*/{}
  , /*decltype(_impl_.v4_route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v6_route_table_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.virtual_router_mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fabric_encap_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.tos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VpcSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VpcSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VpcSpecDefaultTypeInternal() {}
  union {
    VpcSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VpcSpecDefaultTypeInternal _VpcSpec_default_instance_;
PROTOBUF_CONSTEXPR VpcStatus::VpcStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hw_handle_)*/nullptr
  , /*decltype(_impl_.bd_hw_handle_)*/nullptr
  , /*decltype(_impl_.subnet_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VpcStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VpcStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VpcStatusDefaultTypeInternal() {}
  union {
    VpcStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VpcStatusDefaultTypeInternal _VpcStatus_default_instance_;
PROTOBUF_CONSTEXPR VPCPeer::VPCPeer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VPCPeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VPCPeerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VPCPeerDefaultTypeInternal() {}
  union {
    VPCPeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VPCPeerDefaultTypeInternal _VPCPeer_default_instance_;
PROTOBUF_CONSTEXPR VPCPeerSpec::VPCPeerSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vpc1_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vpc2_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VPCPeerSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VPCPeerSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VPCPeerSpecDefaultTypeInternal() {}
  union {
    VPCPeerSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VPCPeerSpecDefaultTypeInternal _VPCPeerSpec_default_instance_;
PROTOBUF_CONSTEXPR VPCPeerStatus::VPCPeerStatus(
    ::_pbi::ConstantInitialized) {}
struct VPCPeerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VPCPeerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VPCPeerStatusDefaultTypeInternal() {}
  union {
    VPCPeerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VPCPeerStatusDefaultTypeInternal _VPCPeerStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_vpc_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_vpc_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vpc_2eproto = nullptr;

const uint32_t TableStruct_vpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.v4_route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.v6_route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.ingress_v4_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.ingress_v6_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.egress_v4_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.egress_v6_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.virtual_router_mac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.fabric_encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _impl_.tos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, _impl_.hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, _impl_.bd_hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, _impl_.subnet_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, _impl_.vpc1_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, _impl_.vpc2_name_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Vpc)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VpcSpec)},
  { 25, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VpcStatus)},
  { 34, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeer)},
  { 43, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeerSpec)},
  { 51, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeerStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_Vpc_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_VpcSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_VpcStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_VPCPeer_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_VPCPeerSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_VPCPeerStatus_default_instance_._instance,
};

const char descriptor_table_protodef_vpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tvpc.proto\022\036opi_api.network.cloud.v1alp"
  "ha1\032\022networktypes.proto\032\031google/api/reso"
  "urce.proto\"\272\001\n\003Vpc\022\014\n\004name\030\001 \001(\t\0225\n\004spec"
  "\030\002 \001(\0132\'.opi_api.network.cloud.v1alpha1."
  "VpcSpec\0229\n\006status\030\003 \001(\0132).opi_api.networ"
  "k.cloud.v1alpha1.VpcStatus:3\352A0\n\"opi_api"
  ".network.cloud.v1alpha1/vpc\022\nvpcs/{vpc}\""
  "\241\003\n\007VpcSpec\0225\n\004type\030\001 \001(\0162\'.opi_api.netw"
  "ork.cloud.v1alpha1.VPCType\022\037\n\027v4_route_t"
  "able_name_ref\030\002 \001(\t\022\037\n\027v6_route_table_na"
  "me_ref\030\003 \001(\t\022+\n#ingress_v4_security_poli"
  "cy_name_ref\030\004 \003(\t\022+\n#ingress_v6_security"
  "_policy_name_ref\030\005 \003(\t\022*\n\"egress_v4_secu"
  "rity_policy_name_ref\030\006 \003(\t\022*\n\"egress_v6_"
  "security_policy_name_ref\030\007 \003(\t\022\032\n\022virtua"
  "l_router_mac\030\010 \001(\014\022B\n\014fabric_encap\030\t \001(\013"
  "2,.opi_api.network.opinetcommon.v1alpha1"
  ".Encap\022\013\n\003tos\030\n \001(\005\"\254\001\n\tVpcStatus\022B\n\thw_"
  "handle\030\001 \001(\0132/.opi_api.network.opinetcom"
  "mon.v1alpha1.HwHandle\022E\n\014bd_hw_handle\030\002 "
  "\001(\0132/.opi_api.network.opinetcommon.v1alp"
  "ha1.HwHandle\022\024\n\014subnet_count\030\003 \001(\005\"\322\001\n\007V"
  "PCPeer\022\014\n\004name\030\001 \001(\t\0229\n\004spec\030\002 \001(\0132+.opi"
  "_api.network.cloud.v1alpha1.VPCPeerSpec\022"
  "=\n\006status\030\003 \001(\0132-.opi_api.network.cloud."
  "v1alpha1.VPCPeerStatus:\?\352A<\n&opi_api.net"
  "work.cloud.v1alpha1/vpcpeer\022\022vpcpeers/{v"
  "pcpeer}\";\n\013VPCPeerSpec\022\025\n\rvpc1_name_ref\030"
  "\001 \001(\t\022\025\n\rvpc2_name_ref\030\002 \001(\t\"\017\n\rVPCPeerS"
  "tatus*e\n\007VPCType\022\030\n\024VPC_TYPE_UNSPECIFIED"
  "\020\000\022\025\n\021VPC_TYPE_UNDERLAY\020\001\022\023\n\017VPC_TYPE_TE"
  "NANT\020\002\022\024\n\020VPC_TYPE_CONTROL\020\003Bi\n\036opi_api."
  "network.cloud.v1alpha1B\010VpcProtoP\001Z;gith"
  "ub.com/opiproject/opi-api/network/cloud/"
  "v1alpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_vpc_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_vpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vpc_2eproto = {
    false, false, 1383, descriptor_table_protodef_vpc_2eproto,
    "vpc.proto",
    &descriptor_table_vpc_2eproto_once, descriptor_table_vpc_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_vpc_2eproto::offsets,
    file_level_metadata_vpc_2eproto, file_level_enum_descriptors_vpc_2eproto,
    file_level_service_descriptors_vpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vpc_2eproto_getter() {
  return &descriptor_table_vpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vpc_2eproto(&descriptor_table_vpc_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPCType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vpc_2eproto);
  return file_level_enum_descriptors_vpc_2eproto[0];
}
bool VPCType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vpc::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::VpcSpec& spec(const Vpc* msg);
  static const ::opi_api::network::cloud::v1alpha1::VpcStatus& status(const Vpc* msg);
};

const ::opi_api::network::cloud::v1alpha1::VpcSpec&
Vpc::_Internal::spec(const Vpc* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::VpcStatus&
Vpc::_Internal::status(const Vpc* msg) {
  return *msg->_impl_.status_;
}
Vpc::Vpc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Vpc)
}
Vpc::Vpc(const Vpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vpc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::VpcSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::VpcStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Vpc)
}

inline void Vpc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vpc::~Vpc() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Vpc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vpc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Vpc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vpc::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Vpc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vpc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.Vpc.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VpcStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vpc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Vpc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.Vpc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VpcStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Vpc)
  return target;
}

size_t Vpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Vpc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.VpcStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vpc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vpc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vpc::GetClassData() const { return &_class_data_; }


void Vpc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vpc*>(&to_msg);
  auto& from = static_cast<const Vpc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Vpc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::VpcSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::VpcStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vpc::CopyFrom(const Vpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Vpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vpc::IsInitialized() const {
  return true;
}

void Vpc::InternalSwap(Vpc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vpc, _impl_.status_)
      + sizeof(Vpc::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Vpc, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vpc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[0]);
}

// ===================================================================

class VpcSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& fabric_encap(const VpcSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::Encap&
VpcSpec::_Internal::fabric_encap(const VpcSpec* msg) {
  return *msg->_impl_.fabric_encap_;
}
void VpcSpec::clear_fabric_encap() {
  if (GetArenaForAllocation() == nullptr && _impl_.fabric_encap_ != nullptr) {
    delete _impl_.fabric_encap_;
  }
  _impl_.fabric_encap_ = nullptr;
}
VpcSpec::VpcSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VpcSpec)
}
VpcSpec::VpcSpec(const VpcSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VpcSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ingress_v4_security_policy_name_ref_){from._impl_.ingress_v4_security_policy_name_ref_}
    , decltype(_impl_.ingress_v6_security_policy_name_ref_){from._impl_.ingress_v6_security_policy_name_ref_}
    , decltype(_impl_.egress_v4_security_policy_name_ref_){from._impl_.egress_v4_security_policy_name_ref_}
    , decltype(_impl_.egress_v6_security_policy_name_ref_){from._impl_.egress_v6_security_policy_name_ref_}
    , decltype(_impl_.v4_route_table_name_ref_){}
    , decltype(_impl_.v6_route_table_name_ref_){}
    , decltype(_impl_.virtual_router_mac_){}
    , decltype(_impl_.fabric_encap_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.tos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.v4_route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v4_route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v4_route_table_name_ref().empty()) {
    _this->_impl_.v4_route_table_name_ref_.Set(from._internal_v4_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.v6_route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v6_route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v6_route_table_name_ref().empty()) {
    _this->_impl_.v6_route_table_name_ref_.Set(from._internal_v6_route_table_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.virtual_router_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_router_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_virtual_router_mac().empty()) {
    _this->_impl_.virtual_router_mac_.Set(from._internal_virtual_router_mac(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fabric_encap()) {
    _this->_impl_.fabric_encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from._impl_.fabric_encap_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tos_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tos_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VpcSpec)
}

inline void VpcSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ingress_v4_security_policy_name_ref_){arena}
    , decltype(_impl_.ingress_v6_security_policy_name_ref_){arena}
    , decltype(_impl_.egress_v4_security_policy_name_ref_){arena}
    , decltype(_impl_.egress_v6_security_policy_name_ref_){arena}
    , decltype(_impl_.v4_route_table_name_ref_){}
    , decltype(_impl_.v6_route_table_name_ref_){}
    , decltype(_impl_.virtual_router_mac_){}
    , decltype(_impl_.fabric_encap_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.tos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.v4_route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v4_route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.v6_route_table_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v6_route_table_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.virtual_router_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_router_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VpcSpec::~VpcSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VpcSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VpcSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ingress_v4_security_policy_name_ref_.~RepeatedPtrField();
  _impl_.ingress_v6_security_policy_name_ref_.~RepeatedPtrField();
  _impl_.egress_v4_security_policy_name_ref_.~RepeatedPtrField();
  _impl_.egress_v6_security_policy_name_ref_.~RepeatedPtrField();
  _impl_.v4_route_table_name_ref_.Destroy();
  _impl_.v6_route_table_name_ref_.Destroy();
  _impl_.virtual_router_mac_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fabric_encap_;
}

void VpcSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VpcSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ingress_v4_security_policy_name_ref_.Clear();
  _impl_.ingress_v6_security_policy_name_ref_.Clear();
  _impl_.egress_v4_security_policy_name_ref_.Clear();
  _impl_.egress_v6_security_policy_name_ref_.Clear();
  _impl_.v4_route_table_name_ref_.ClearToEmpty();
  _impl_.v6_route_table_name_ref_.ClearToEmpty();
  _impl_.virtual_router_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fabric_encap_ != nullptr) {
    delete _impl_.fabric_encap_;
  }
  _impl_.fabric_encap_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tos_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VpcSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.VPCType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::VPCType>(val));
        } else
          goto handle_unusual;
        continue;
      // string v4_route_table_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_v4_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string v6_route_table_name_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_v6_route_table_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ingress_v4_security_policy_name_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ingress_v4_security_policy_name_ref();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_name_ref"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ingress_v6_security_policy_name_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ingress_v6_security_policy_name_ref();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_name_ref"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string egress_v4_security_policy_name_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_egress_v4_security_policy_name_ref();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_name_ref"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string egress_v6_security_policy_name_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_egress_v6_security_policy_name_ref();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_name_ref"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes virtual_router_mac = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_virtual_router_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_fabric_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VpcSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.VPCType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string v4_route_table_name_ref = 2;
  if (!this->_internal_v4_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v4_route_table_name_ref().data(), static_cast<int>(this->_internal_v4_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_v4_route_table_name_ref(), target);
  }

  // string v6_route_table_name_ref = 3;
  if (!this->_internal_v6_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v6_route_table_name_ref().data(), static_cast<int>(this->_internal_v6_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_v6_route_table_name_ref(), target);
  }

  // repeated string ingress_v4_security_policy_name_ref = 4;
  for (int i = 0, n = this->_internal_ingress_v4_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_ingress_v4_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_name_ref");
    target = stream->WriteString(4, s, target);
  }

  // repeated string ingress_v6_security_policy_name_ref = 5;
  for (int i = 0, n = this->_internal_ingress_v6_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_ingress_v6_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_name_ref");
    target = stream->WriteString(5, s, target);
  }

  // repeated string egress_v4_security_policy_name_ref = 6;
  for (int i = 0, n = this->_internal_egress_v4_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_egress_v4_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_name_ref");
    target = stream->WriteString(6, s, target);
  }

  // repeated string egress_v6_security_policy_name_ref = 7;
  for (int i = 0, n = this->_internal_egress_v6_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_egress_v6_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_name_ref");
    target = stream->WriteString(7, s, target);
  }

  // bytes virtual_router_mac = 8;
  if (!this->_internal_virtual_router_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_virtual_router_mac(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 9;
  if (this->_internal_has_fabric_encap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::fabric_encap(this),
        _Internal::fabric_encap(this).GetCachedSize(), target, stream);
  }

  // int32 tos = 10;
  if (this->_internal_tos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VpcSpec)
  return target;
}

size_t VpcSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ingress_v4_security_policy_name_ref = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ingress_v4_security_policy_name_ref_.size());
  for (int i = 0, n = _impl_.ingress_v4_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ingress_v4_security_policy_name_ref_.Get(i));
  }

  // repeated string ingress_v6_security_policy_name_ref = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ingress_v6_security_policy_name_ref_.size());
  for (int i = 0, n = _impl_.ingress_v6_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ingress_v6_security_policy_name_ref_.Get(i));
  }

  // repeated string egress_v4_security_policy_name_ref = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.egress_v4_security_policy_name_ref_.size());
  for (int i = 0, n = _impl_.egress_v4_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.egress_v4_security_policy_name_ref_.Get(i));
  }

  // repeated string egress_v6_security_policy_name_ref = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.egress_v6_security_policy_name_ref_.size());
  for (int i = 0, n = _impl_.egress_v6_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.egress_v6_security_policy_name_ref_.Get(i));
  }

  // string v4_route_table_name_ref = 2;
  if (!this->_internal_v4_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v4_route_table_name_ref());
  }

  // string v6_route_table_name_ref = 3;
  if (!this->_internal_v6_route_table_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v6_route_table_name_ref());
  }

  // bytes virtual_router_mac = 8;
  if (!this->_internal_virtual_router_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_virtual_router_mac());
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 9;
  if (this->_internal_has_fabric_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fabric_encap_);
  }

  // .opi_api.network.cloud.v1alpha1.VPCType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 tos = 10;
  if (this->_internal_tos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VpcSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VpcSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VpcSpec::GetClassData() const { return &_class_data_; }


void VpcSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VpcSpec*>(&to_msg);
  auto& from = static_cast<const VpcSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ingress_v4_security_policy_name_ref_.MergeFrom(from._impl_.ingress_v4_security_policy_name_ref_);
  _this->_impl_.ingress_v6_security_policy_name_ref_.MergeFrom(from._impl_.ingress_v6_security_policy_name_ref_);
  _this->_impl_.egress_v4_security_policy_name_ref_.MergeFrom(from._impl_.egress_v4_security_policy_name_ref_);
  _this->_impl_.egress_v6_security_policy_name_ref_.MergeFrom(from._impl_.egress_v6_security_policy_name_ref_);
  if (!from._internal_v4_route_table_name_ref().empty()) {
    _this->_internal_set_v4_route_table_name_ref(from._internal_v4_route_table_name_ref());
  }
  if (!from._internal_v6_route_table_name_ref().empty()) {
    _this->_internal_set_v6_route_table_name_ref(from._internal_v6_route_table_name_ref());
  }
  if (!from._internal_virtual_router_mac().empty()) {
    _this->_internal_set_virtual_router_mac(from._internal_virtual_router_mac());
  }
  if (from._internal_has_fabric_encap()) {
    _this->_internal_mutable_fabric_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(
        from._internal_fabric_encap());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_tos() != 0) {
    _this->_internal_set_tos(from._internal_tos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VpcSpec::CopyFrom(const VpcSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpcSpec::IsInitialized() const {
  return true;
}

void VpcSpec::InternalSwap(VpcSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ingress_v4_security_policy_name_ref_.InternalSwap(&other->_impl_.ingress_v4_security_policy_name_ref_);
  _impl_.ingress_v6_security_policy_name_ref_.InternalSwap(&other->_impl_.ingress_v6_security_policy_name_ref_);
  _impl_.egress_v4_security_policy_name_ref_.InternalSwap(&other->_impl_.egress_v4_security_policy_name_ref_);
  _impl_.egress_v6_security_policy_name_ref_.InternalSwap(&other->_impl_.egress_v6_security_policy_name_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v4_route_table_name_ref_, lhs_arena,
      &other->_impl_.v4_route_table_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v6_route_table_name_ref_, lhs_arena,
      &other->_impl_.v6_route_table_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.virtual_router_mac_, lhs_arena,
      &other->_impl_.virtual_router_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VpcSpec, _impl_.tos_)
      + sizeof(VpcSpec::_impl_.tos_)
      - PROTOBUF_FIELD_OFFSET(VpcSpec, _impl_.fabric_encap_)>(
          reinterpret_cast<char*>(&_impl_.fabric_encap_),
          reinterpret_cast<char*>(&other->_impl_.fabric_encap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VpcSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[1]);
}

// ===================================================================

class VpcStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const VpcStatus* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& bd_hw_handle(const VpcStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
VpcStatus::_Internal::hw_handle(const VpcStatus* msg) {
  return *msg->_impl_.hw_handle_;
}
const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
VpcStatus::_Internal::bd_hw_handle(const VpcStatus* msg) {
  return *msg->_impl_.bd_hw_handle_;
}
void VpcStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
}
void VpcStatus::clear_bd_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.bd_hw_handle_ != nullptr) {
    delete _impl_.bd_hw_handle_;
  }
  _impl_.bd_hw_handle_ = nullptr;
}
VpcStatus::VpcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VpcStatus)
}
VpcStatus::VpcStatus(const VpcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VpcStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.bd_hw_handle_){nullptr}
    , decltype(_impl_.subnet_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    _this->_impl_.hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.hw_handle_);
  }
  if (from._internal_has_bd_hw_handle()) {
    _this->_impl_.bd_hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.bd_hw_handle_);
  }
  _this->_impl_.subnet_count_ = from._impl_.subnet_count_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VpcStatus)
}

inline void VpcStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.bd_hw_handle_){nullptr}
    , decltype(_impl_.subnet_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VpcStatus::~VpcStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VpcStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VpcStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hw_handle_;
  if (this != internal_default_instance()) delete _impl_.bd_hw_handle_;
}

void VpcStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VpcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bd_hw_handle_ != nullptr) {
    delete _impl_.bd_hw_handle_;
  }
  _impl_.bd_hw_handle_ = nullptr;
  _impl_.subnet_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VpcStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bd_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subnet_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.subnet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VpcStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hw_handle(this),
        _Internal::hw_handle(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
  if (this->_internal_has_bd_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bd_hw_handle(this),
        _Internal::bd_hw_handle(this).GetCachedSize(), target, stream);
  }

  // int32 subnet_count = 3;
  if (this->_internal_subnet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_subnet_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VpcStatus)
  return target;
}

size_t VpcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_handle_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
  if (this->_internal_has_bd_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bd_hw_handle_);
  }

  // int32 subnet_count = 3;
  if (this->_internal_subnet_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subnet_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VpcStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VpcStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VpcStatus::GetClassData() const { return &_class_data_; }


void VpcStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VpcStatus*>(&to_msg);
  auto& from = static_cast<const VpcStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hw_handle()) {
    _this->_internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_hw_handle());
  }
  if (from._internal_has_bd_hw_handle()) {
    _this->_internal_mutable_bd_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_bd_hw_handle());
  }
  if (from._internal_subnet_count() != 0) {
    _this->_internal_set_subnet_count(from._internal_subnet_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VpcStatus::CopyFrom(const VpcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpcStatus::IsInitialized() const {
  return true;
}

void VpcStatus::InternalSwap(VpcStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VpcStatus, _impl_.subnet_count_)
      + sizeof(VpcStatus::_impl_.subnet_count_)
      - PROTOBUF_FIELD_OFFSET(VpcStatus, _impl_.hw_handle_)>(
          reinterpret_cast<char*>(&_impl_.hw_handle_),
          reinterpret_cast<char*>(&other->_impl_.hw_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VpcStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[2]);
}

// ===================================================================

class VPCPeer::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec& spec(const VPCPeer* msg);
  static const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus& status(const VPCPeer* msg);
};

const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec&
VPCPeer::_Internal::spec(const VPCPeer* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus&
VPCPeer::_Internal::status(const VPCPeer* msg) {
  return *msg->_impl_.status_;
}
VPCPeer::VPCPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeer)
}
VPCPeer::VPCPeer(const VPCPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VPCPeer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::VPCPeerSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::VPCPeerStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeer)
}

inline void VPCPeer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VPCPeer::~VPCPeer() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VPCPeer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VPCPeer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void VPCPeer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VPCPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPCPeer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VPCPeer.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VPCPeer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VPCPeer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VPCPeer)
  return target;
}

size_t VPCPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VPCPeer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeer::GetClassData() const { return &_class_data_; }


void VPCPeer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VPCPeer*>(&to_msg);
  auto& from = static_cast<const VPCPeer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::VPCPeerSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::VPCPeerStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VPCPeer::CopyFrom(const VPCPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPCPeer::IsInitialized() const {
  return true;
}

void VPCPeer::InternalSwap(VPCPeer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPCPeer, _impl_.status_)
      + sizeof(VPCPeer::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(VPCPeer, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPCPeer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[3]);
}

// ===================================================================

class VPCPeerSpec::_Internal {
 public:
};

VPCPeerSpec::VPCPeerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
}
VPCPeerSpec::VPCPeerSpec(const VPCPeerSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VPCPeerSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc1_name_ref_){}
    , decltype(_impl_.vpc2_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vpc1_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc1_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vpc1_name_ref().empty()) {
    _this->_impl_.vpc1_name_ref_.Set(from._internal_vpc1_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vpc2_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc2_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vpc2_name_ref().empty()) {
    _this->_impl_.vpc2_name_ref_.Set(from._internal_vpc2_name_ref(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
}

inline void VPCPeerSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vpc1_name_ref_){}
    , decltype(_impl_.vpc2_name_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vpc1_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc1_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vpc2_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vpc2_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VPCPeerSpec::~VPCPeerSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VPCPeerSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vpc1_name_ref_.Destroy();
  _impl_.vpc2_name_ref_.Destroy();
}

void VPCPeerSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VPCPeerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vpc1_name_ref_.ClearToEmpty();
  _impl_.vpc2_name_ref_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPCPeerSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vpc1_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vpc1_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // string vpc2_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vpc2_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_name_ref"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VPCPeerSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vpc1_name_ref = 1;
  if (!this->_internal_vpc1_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpc1_name_ref().data(), static_cast<int>(this->_internal_vpc1_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vpc1_name_ref(), target);
  }

  // string vpc2_name_ref = 2;
  if (!this->_internal_vpc2_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpc2_name_ref().data(), static_cast<int>(this->_internal_vpc2_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vpc2_name_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  return target;
}

size_t VPCPeerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vpc1_name_ref = 1;
  if (!this->_internal_vpc1_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpc1_name_ref());
  }

  // string vpc2_name_ref = 2;
  if (!this->_internal_vpc2_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpc2_name_ref());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeerSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VPCPeerSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeerSpec::GetClassData() const { return &_class_data_; }


void VPCPeerSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VPCPeerSpec*>(&to_msg);
  auto& from = static_cast<const VPCPeerSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vpc1_name_ref().empty()) {
    _this->_internal_set_vpc1_name_ref(from._internal_vpc1_name_ref());
  }
  if (!from._internal_vpc2_name_ref().empty()) {
    _this->_internal_set_vpc2_name_ref(from._internal_vpc2_name_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VPCPeerSpec::CopyFrom(const VPCPeerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPCPeerSpec::IsInitialized() const {
  return true;
}

void VPCPeerSpec::InternalSwap(VPCPeerSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vpc1_name_ref_, lhs_arena,
      &other->_impl_.vpc1_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vpc2_name_ref_, lhs_arena,
      &other->_impl_.vpc2_name_ref_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VPCPeerSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[4]);
}

// ===================================================================

class VPCPeerStatus::_Internal {
 public:
};

VPCPeerStatus::VPCPeerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeerStatus)
}
VPCPeerStatus::VPCPeerStatus(const VPCPeerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VPCPeerStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeerStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeerStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VPCPeerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Vpc*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Vpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Vpc >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VpcSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VpcSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VpcSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VpcStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VpcStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VpcStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeer*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeerSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeerSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeerSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeerStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeerStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
