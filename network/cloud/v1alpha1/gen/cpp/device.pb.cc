// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#include "device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR DeviceCapabilities::DeviceCapabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routing_capabilties_)*/nullptr
  , /*decltype(_impl_.network_policy_capabilities_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCapabilitiesDefaultTypeInternal() {}
  union {
    DeviceCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCapabilitiesDefaultTypeInternal _DeviceCapabilities_default_instance_;
PROTOBUF_CONSTEXPR DeviceCapabilitiesDynamicRouting::DeviceCapabilitiesDynamicRouting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.underlay_bgp_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceCapabilitiesDynamicRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCapabilitiesDynamicRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCapabilitiesDynamicRoutingDefaultTypeInternal() {}
  union {
    DeviceCapabilitiesDynamicRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCapabilitiesDynamicRoutingDefaultTypeInternal _DeviceCapabilitiesDynamicRouting_default_instance_;
PROTOBUF_CONSTEXPR DeviceCapabilitiesNetworkPolicy::DeviceCapabilitiesNetworkPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compact_rules_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceCapabilitiesNetworkPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCapabilitiesNetworkPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCapabilitiesNetworkPolicyDefaultTypeInternal() {}
  union {
    DeviceCapabilitiesNetworkPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCapabilitiesNetworkPolicyDefaultTypeInternal _DeviceCapabilitiesNetworkPolicy_default_instance_;
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
PROTOBUF_CONSTEXPR DeviceSpec::DeviceSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mac_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.systemname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv4_address_)*/nullptr
  , /*decltype(_impl_.ipv6_address_)*/nullptr
  , /*decltype(_impl_.gateway_ip_)*/nullptr
  , /*decltype(_impl_.pcie_functions_)*/nullptr
  , /*decltype(_impl_.mgmt_network_spec_)*/nullptr
  , /*decltype(_impl_.overlay_routing_enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceSpecDefaultTypeInternal() {}
  union {
    DeviceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceSpecDefaultTypeInternal _DeviceSpec_default_instance_;
PROTOBUF_CONSTEXPR PCIeFunctionsSpec::PCIeFunctionsSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pf_count_)*/0
  , /*decltype(_impl_.vf_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PCIeFunctionsSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCIeFunctionsSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCIeFunctionsSpecDefaultTypeInternal() {}
  union {
    PCIeFunctionsSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCIeFunctionsSpecDefaultTypeInternal _PCIeFunctionsSpec_default_instance_;
PROTOBUF_CONSTEXPR MgmtNetworkSpec::MgmtNetworkSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gateway_mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lldp_mgmt_ip_)*/nullptr
  , /*decltype(_impl_.mgmt_ip_)*/nullptr
  , /*decltype(_impl_.gateway_ip_)*/nullptr
  , /*decltype(_impl_.vlan_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MgmtNetworkSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MgmtNetworkSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MgmtNetworkSpecDefaultTypeInternal() {}
  union {
    MgmtNetworkSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MgmtNetworkSpecDefaultTypeInternal _MgmtNetworkSpec_default_instance_;
PROTOBUF_CONSTEXPR DeviceStatus::DeviceStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.critical_events_)*/{}
  , /*decltype(_impl_.alerts_)*/{}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_mac_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chip_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pipeline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pcie_port_count_)*/0
  , /*decltype(_impl_.port_count_)*/0
  , /*decltype(_impl_.host_if_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
PROTOBUF_CONSTEXPR SystemEvent::SystemEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemEventDefaultTypeInternal() {}
  union {
    SystemEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemEventDefaultTypeInternal _SystemEvent_default_instance_;
PROTOBUF_CONSTEXPR SystemAlert::SystemAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alert_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alert_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemAlertDefaultTypeInternal() {}
  union {
    SystemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemAlertDefaultTypeInternal _SystemAlert_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_device_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_device_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_device_2eproto = nullptr;

const uint32_t TableStruct_device_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilities, _impl_.routing_capabilties_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilities, _impl_.network_policy_capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting, _impl_.underlay_bgp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy, _impl_.compact_rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.ipv4_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.mac_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.gateway_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.pcie_functions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.overlay_routing_enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.systemname_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _impl_.mgmt_network_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec, _impl_.pf_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec, _impl_.vf_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _impl_.lldp_mgmt_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _impl_.mgmt_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _impl_.vlan_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _impl_.gateway_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _impl_.gateway_mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.system_mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.vendor_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.chip_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.os_version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.pcie_port_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.port_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.host_if_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.pipeline_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.critical_events_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _impl_.alerts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemEvent, _impl_.event_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemEvent, _impl_.event_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemAlert, _impl_.alert_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemAlert, _impl_.alert_description_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceCapabilities)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting)},
  { 15, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy)},
  { 22, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Device)},
  { 31, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceSpec)},
  { 45, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec)},
  { 53, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec)},
  { 64, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceStatus)},
  { 81, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SystemEvent)},
  { 89, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SystemAlert)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_DeviceCapabilities_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_DeviceCapabilitiesDynamicRouting_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_DeviceCapabilitiesNetworkPolicy_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_Device_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_DeviceSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PCIeFunctionsSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_MgmtNetworkSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_DeviceStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SystemEvent_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SystemAlert_default_instance_._instance,
};

const char descriptor_table_protodef_device_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014device.proto\022\036opi_api.network.cloud.v1"
  "alpha1\032\022networktypes.proto\032\037google/proto"
  "buf/timestamp.proto\032\031google/api/resource"
  ".proto\"\331\001\n\022DeviceCapabilities\022]\n\023routing"
  "_capabilties\030\001 \001(\0132@.opi_api.network.clo"
  "ud.v1alpha1.DeviceCapabilitiesDynamicRou"
  "ting\022d\n\033network_policy_capabilities\030\002 \001("
  "\0132\?.opi_api.network.cloud.v1alpha1.Devic"
  "eCapabilitiesNetworkPolicy\"8\n DeviceCapa"
  "bilitiesDynamicRouting\022\024\n\014underlay_bgp\030\001"
  " \001(\010\"8\n\037DeviceCapabilitiesNetworkPolicy\022"
  "\025\n\rcompact_rules\030\001 \001(\010\"\314\001\n\006Device\022\014\n\004nam"
  "e\030\001 \001(\t\0228\n\004spec\030\002 \001(\0132*.opi_api.network."
  "cloud.v1alpha1.DeviceSpec\022<\n\006status\030\003 \001("
  "\0132,.opi_api.network.cloud.v1alpha1.Devic"
  "eStatus:<\352A9\n%opi_api.network.cloud.v1al"
  "pha1/device\022\020devices/{device}\"\300\003\n\nDevice"
  "Spec\022F\n\014ipv4_address\030\001 \001(\01320.opi_api.net"
  "work.opinetcommon.v1alpha1.IPAddress\022F\n\014"
  "ipv6_address\030\002 \001(\01320.opi_api.network.opi"
  "netcommon.v1alpha1.IPAddress\022\020\n\010mac_addr"
  "\030\003 \001(\014\022D\n\ngateway_ip\030\004 \001(\01320.opi_api.net"
  "work.opinetcommon.v1alpha1.IPAddress\022I\n\016"
  "pcie_functions\030\005 \001(\01321.opi_api.network.c"
  "loud.v1alpha1.PCIeFunctionsSpec\022\037\n\027overl"
  "ay_routing_enabled\030\006 \001(\010\022\022\n\nsystemname\030\007"
  " \001(\t\022J\n\021mgmt_network_spec\030\010 \001(\0132/.opi_ap"
  "i.network.cloud.v1alpha1.MgmtNetworkSpec"
  "\"7\n\021PCIeFunctionsSpec\022\020\n\010pf_count\030\001 \001(\005\022"
  "\020\n\010vf_count\030\002 \001(\005\"\205\002\n\017MgmtNetworkSpec\022F\n"
  "\014lldp_mgmt_ip\030\001 \001(\01320.opi_api.network.op"
  "inetcommon.v1alpha1.IPAddress\022A\n\007mgmt_ip"
  "\030\002 \001(\01320.opi_api.network.opinetcommon.v1"
  "alpha1.IPAddress\022\014\n\004vlan\030\003 \001(\005\022D\n\ngatewa"
  "y_ip\030\004 \001(\01320.opi_api.network.opinetcommo"
  "n.v1alpha1.IPAddress\022\023\n\013gateway_mac\030\005 \001("
  "\014\"\322\002\n\014DeviceStatus\022\023\n\013description\030\001 \001(\t\022"
  "\032\n\022system_mac_address\030\002 \001(\014\022\021\n\tvendor_id"
  "\030\003 \001(\t\022\021\n\tchip_type\030\004 \001(\t\022\022\n\nos_version\030"
  "\005 \001(\t\022\027\n\017pcie_port_count\030\006 \001(\005\022\022\n\nport_c"
  "ount\030\007 \001(\005\022\025\n\rhost_if_count\030\010 \001(\005\022\020\n\010pip"
  "eline\030\t \001(\t\022D\n\017critical_events\030\n \003(\0132+.o"
  "pi_api.network.cloud.v1alpha1.SystemEven"
  "t\022;\n\006alerts\030\013 \003(\0132+.opi_api.network.clou"
  "d.v1alpha1.SystemAlert\"X\n\013SystemEvent\022.\n"
  "\nevent_time\030\001 \001(\0132\032.google.protobuf.Time"
  "stamp\022\031\n\021event_description\030\002 \001(\t\"X\n\013Syst"
  "emAlert\022.\n\nalert_time\030\001 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\031\n\021alert_description\030\002 \001"
  "(\tBl\n\036opi_api.network.cloud.v1alpha1B\013De"
  "viceProtoP\001Z;github.com/opiproject/opi-a"
  "pi/network/cloud/v1alpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_device_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_device_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_device_2eproto = {
    false, false, 2080, descriptor_table_protodef_device_2eproto,
    "device.proto",
    &descriptor_table_device_2eproto_once, descriptor_table_device_2eproto_deps, 3, 10,
    schemas, file_default_instances, TableStruct_device_2eproto::offsets,
    file_level_metadata_device_2eproto, file_level_enum_descriptors_device_2eproto,
    file_level_service_descriptors_device_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_device_2eproto_getter() {
  return &descriptor_table_device_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_device_2eproto(&descriptor_table_device_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class DeviceCapabilities::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting& routing_capabilties(const DeviceCapabilities* msg);
  static const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy& network_policy_capabilities(const DeviceCapabilities* msg);
};

const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting&
DeviceCapabilities::_Internal::routing_capabilties(const DeviceCapabilities* msg) {
  return *msg->_impl_.routing_capabilties_;
}
const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy&
DeviceCapabilities::_Internal::network_policy_capabilities(const DeviceCapabilities* msg) {
  return *msg->_impl_.network_policy_capabilities_;
}
DeviceCapabilities::DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
}
DeviceCapabilities::DeviceCapabilities(const DeviceCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceCapabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routing_capabilties_){nullptr}
    , decltype(_impl_.network_policy_capabilities_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_capabilties()) {
    _this->_impl_.routing_capabilties_ = new ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting(*from._impl_.routing_capabilties_);
  }
  if (from._internal_has_network_policy_capabilities()) {
    _this->_impl_.network_policy_capabilities_ = new ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy(*from._impl_.network_policy_capabilities_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
}

inline void DeviceCapabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routing_capabilties_){nullptr}
    , decltype(_impl_.network_policy_capabilities_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceCapabilities::~DeviceCapabilities() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_capabilties_;
  if (this != internal_default_instance()) delete _impl_.network_policy_capabilities_;
}

void DeviceCapabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.routing_capabilties_ != nullptr) {
    delete _impl_.routing_capabilties_;
  }
  _impl_.routing_capabilties_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.network_policy_capabilities_ != nullptr) {
    delete _impl_.network_policy_capabilities_;
  }
  _impl_.network_policy_capabilities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_capabilties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_policy_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
  if (this->_internal_has_routing_capabilties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::routing_capabilties(this),
        _Internal::routing_capabilties(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
  if (this->_internal_has_network_policy_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::network_policy_capabilities(this),
        _Internal::network_policy_capabilities(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  return target;
}

size_t DeviceCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
  if (this->_internal_has_routing_capabilties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_capabilties_);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
  if (this->_internal_has_network_policy_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.network_policy_capabilities_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCapabilities::GetClassData() const { return &_class_data_; }


void DeviceCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceCapabilities*>(&to_msg);
  auto& from = static_cast<const DeviceCapabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_routing_capabilties()) {
    _this->_internal_mutable_routing_capabilties()->::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting::MergeFrom(
        from._internal_routing_capabilties());
  }
  if (from._internal_has_network_policy_capabilities()) {
    _this->_internal_mutable_network_policy_capabilities()->::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy::MergeFrom(
        from._internal_network_policy_capabilities());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCapabilities::CopyFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilities::IsInitialized() const {
  return true;
}

void DeviceCapabilities::InternalSwap(DeviceCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceCapabilities, _impl_.network_policy_capabilities_)
      + sizeof(DeviceCapabilities::_impl_.network_policy_capabilities_)
      - PROTOBUF_FIELD_OFFSET(DeviceCapabilities, _impl_.routing_capabilties_)>(
          reinterpret_cast<char*>(&_impl_.routing_capabilties_),
          reinterpret_cast<char*>(&other->_impl_.routing_capabilties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCapabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[0]);
}

// ===================================================================

class DeviceCapabilitiesDynamicRouting::_Internal {
 public:
};

DeviceCapabilitiesDynamicRouting::DeviceCapabilitiesDynamicRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
}
DeviceCapabilitiesDynamicRouting::DeviceCapabilitiesDynamicRouting(const DeviceCapabilitiesDynamicRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceCapabilitiesDynamicRouting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.underlay_bgp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.underlay_bgp_ = from._impl_.underlay_bgp_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
}

inline void DeviceCapabilitiesDynamicRouting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.underlay_bgp_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceCapabilitiesDynamicRouting::~DeviceCapabilitiesDynamicRouting() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCapabilitiesDynamicRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceCapabilitiesDynamicRouting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceCapabilitiesDynamicRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.underlay_bgp_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCapabilitiesDynamicRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool underlay_bgp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.underlay_bgp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilitiesDynamicRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool underlay_bgp = 1;
  if (this->_internal_underlay_bgp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_underlay_bgp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  return target;
}

size_t DeviceCapabilitiesDynamicRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool underlay_bgp = 1;
  if (this->_internal_underlay_bgp() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCapabilitiesDynamicRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceCapabilitiesDynamicRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCapabilitiesDynamicRouting::GetClassData() const { return &_class_data_; }


void DeviceCapabilitiesDynamicRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceCapabilitiesDynamicRouting*>(&to_msg);
  auto& from = static_cast<const DeviceCapabilitiesDynamicRouting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_underlay_bgp() != 0) {
    _this->_internal_set_underlay_bgp(from._internal_underlay_bgp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCapabilitiesDynamicRouting::CopyFrom(const DeviceCapabilitiesDynamicRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilitiesDynamicRouting::IsInitialized() const {
  return true;
}

void DeviceCapabilitiesDynamicRouting::InternalSwap(DeviceCapabilitiesDynamicRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.underlay_bgp_, other->_impl_.underlay_bgp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCapabilitiesDynamicRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[1]);
}

// ===================================================================

class DeviceCapabilitiesNetworkPolicy::_Internal {
 public:
};

DeviceCapabilitiesNetworkPolicy::DeviceCapabilitiesNetworkPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
}
DeviceCapabilitiesNetworkPolicy::DeviceCapabilitiesNetworkPolicy(const DeviceCapabilitiesNetworkPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceCapabilitiesNetworkPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compact_rules_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.compact_rules_ = from._impl_.compact_rules_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
}

inline void DeviceCapabilitiesNetworkPolicy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compact_rules_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceCapabilitiesNetworkPolicy::~DeviceCapabilitiesNetworkPolicy() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCapabilitiesNetworkPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceCapabilitiesNetworkPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceCapabilitiesNetworkPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compact_rules_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCapabilitiesNetworkPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compact_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compact_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilitiesNetworkPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compact_rules = 1;
  if (this->_internal_compact_rules() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_compact_rules(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  return target;
}

size_t DeviceCapabilitiesNetworkPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool compact_rules = 1;
  if (this->_internal_compact_rules() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCapabilitiesNetworkPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceCapabilitiesNetworkPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCapabilitiesNetworkPolicy::GetClassData() const { return &_class_data_; }


void DeviceCapabilitiesNetworkPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceCapabilitiesNetworkPolicy*>(&to_msg);
  auto& from = static_cast<const DeviceCapabilitiesNetworkPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compact_rules() != 0) {
    _this->_internal_set_compact_rules(from._internal_compact_rules());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCapabilitiesNetworkPolicy::CopyFrom(const DeviceCapabilitiesNetworkPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilitiesNetworkPolicy::IsInitialized() const {
  return true;
}

void DeviceCapabilitiesNetworkPolicy::InternalSwap(DeviceCapabilitiesNetworkPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.compact_rules_, other->_impl_.compact_rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCapabilitiesNetworkPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[2]);
}

// ===================================================================

class Device::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::DeviceSpec& spec(const Device* msg);
  static const ::opi_api::network::cloud::v1alpha1::DeviceStatus& status(const Device* msg);
};

const ::opi_api::network::cloud::v1alpha1::DeviceSpec&
Device::_Internal::spec(const Device* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::DeviceStatus&
Device::_Internal::status(const Device* msg) {
  return *msg->_impl_.status_;
}
Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Device* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::DeviceSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::DeviceStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Device)
}

inline void Device::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Device::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.Device.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.Device.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }


void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Device*>(&to_msg);
  auto& from = static_cast<const Device&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Device)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::DeviceSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::DeviceStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, _impl_.status_)
      + sizeof(Device::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Device, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[3]);
}

// ===================================================================

class DeviceSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ipv4_address(const DeviceSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ipv6_address(const DeviceSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& gateway_ip(const DeviceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec& pcie_functions(const DeviceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec& mgmt_network_spec(const DeviceSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
DeviceSpec::_Internal::ipv4_address(const DeviceSpec* msg) {
  return *msg->_impl_.ipv4_address_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
DeviceSpec::_Internal::ipv6_address(const DeviceSpec* msg) {
  return *msg->_impl_.ipv6_address_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
DeviceSpec::_Internal::gateway_ip(const DeviceSpec* msg) {
  return *msg->_impl_.gateway_ip_;
}
const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec&
DeviceSpec::_Internal::pcie_functions(const DeviceSpec* msg) {
  return *msg->_impl_.pcie_functions_;
}
const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec&
DeviceSpec::_Internal::mgmt_network_spec(const DeviceSpec* msg) {
  return *msg->_impl_.mgmt_network_spec_;
}
void DeviceSpec::clear_ipv4_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.ipv4_address_ != nullptr) {
    delete _impl_.ipv4_address_;
  }
  _impl_.ipv4_address_ = nullptr;
}
void DeviceSpec::clear_ipv6_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.ipv6_address_ != nullptr) {
    delete _impl_.ipv6_address_;
  }
  _impl_.ipv6_address_ = nullptr;
}
void DeviceSpec::clear_gateway_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.gateway_ip_ != nullptr) {
    delete _impl_.gateway_ip_;
  }
  _impl_.gateway_ip_ = nullptr;
}
DeviceSpec::DeviceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceSpec)
}
DeviceSpec::DeviceSpec(const DeviceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mac_addr_){}
    , decltype(_impl_.systemname_){}
    , decltype(_impl_.ipv4_address_){nullptr}
    , decltype(_impl_.ipv6_address_){nullptr}
    , decltype(_impl_.gateway_ip_){nullptr}
    , decltype(_impl_.pcie_functions_){nullptr}
    , decltype(_impl_.mgmt_network_spec_){nullptr}
    , decltype(_impl_.overlay_routing_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mac_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_addr().empty()) {
    _this->_impl_.mac_addr_.Set(from._internal_mac_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.systemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.systemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_systemname().empty()) {
    _this->_impl_.systemname_.Set(from._internal_systemname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ipv4_address()) {
    _this->_impl_.ipv4_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.ipv4_address_);
  }
  if (from._internal_has_ipv6_address()) {
    _this->_impl_.ipv6_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.ipv6_address_);
  }
  if (from._internal_has_gateway_ip()) {
    _this->_impl_.gateway_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.gateway_ip_);
  }
  if (from._internal_has_pcie_functions()) {
    _this->_impl_.pcie_functions_ = new ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec(*from._impl_.pcie_functions_);
  }
  if (from._internal_has_mgmt_network_spec()) {
    _this->_impl_.mgmt_network_spec_ = new ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec(*from._impl_.mgmt_network_spec_);
  }
  _this->_impl_.overlay_routing_enabled_ = from._impl_.overlay_routing_enabled_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceSpec)
}

inline void DeviceSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mac_addr_){}
    , decltype(_impl_.systemname_){}
    , decltype(_impl_.ipv4_address_){nullptr}
    , decltype(_impl_.ipv6_address_){nullptr}
    , decltype(_impl_.gateway_ip_){nullptr}
    , decltype(_impl_.pcie_functions_){nullptr}
    , decltype(_impl_.mgmt_network_spec_){nullptr}
    , decltype(_impl_.overlay_routing_enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mac_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.systemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.systemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceSpec::~DeviceSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mac_addr_.Destroy();
  _impl_.systemname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ipv4_address_;
  if (this != internal_default_instance()) delete _impl_.ipv6_address_;
  if (this != internal_default_instance()) delete _impl_.gateway_ip_;
  if (this != internal_default_instance()) delete _impl_.pcie_functions_;
  if (this != internal_default_instance()) delete _impl_.mgmt_network_spec_;
}

void DeviceSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mac_addr_.ClearToEmpty();
  _impl_.systemname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ipv4_address_ != nullptr) {
    delete _impl_.ipv4_address_;
  }
  _impl_.ipv4_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ipv6_address_ != nullptr) {
    delete _impl_.ipv6_address_;
  }
  _impl_.ipv6_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gateway_ip_ != nullptr) {
    delete _impl_.gateway_ip_;
  }
  _impl_.gateway_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pcie_functions_ != nullptr) {
    delete _impl_.pcie_functions_;
  }
  _impl_.pcie_functions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mgmt_network_spec_ != nullptr) {
    delete _impl_.mgmt_network_spec_;
  }
  _impl_.mgmt_network_spec_ = nullptr;
  _impl_.overlay_routing_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv4_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv6_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gateway_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcie_functions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool overlay_routing_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.overlay_routing_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string systemname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_systemname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceSpec.systemname"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mgmt_network_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 1;
  if (this->_internal_has_ipv4_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ipv4_address(this),
        _Internal::ipv4_address(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 2;
  if (this->_internal_has_ipv6_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ipv6_address(this),
        _Internal::ipv6_address(this).GetCachedSize(), target, stream);
  }

  // bytes mac_addr = 3;
  if (!this->_internal_mac_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mac_addr(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  if (this->_internal_has_gateway_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gateway_ip(this),
        _Internal::gateway_ip(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 5;
  if (this->_internal_has_pcie_functions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pcie_functions(this),
        _Internal::pcie_functions(this).GetCachedSize(), target, stream);
  }

  // bool overlay_routing_enabled = 6;
  if (this->_internal_overlay_routing_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_overlay_routing_enabled(), target);
  }

  // string systemname = 7;
  if (!this->_internal_systemname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_systemname().data(), static_cast<int>(this->_internal_systemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceSpec.systemname");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_systemname(), target);
  }

  // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 8;
  if (this->_internal_has_mgmt_network_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::mgmt_network_spec(this),
        _Internal::mgmt_network_spec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceSpec)
  return target;
}

size_t DeviceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mac_addr = 3;
  if (!this->_internal_mac_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_addr());
  }

  // string systemname = 7;
  if (!this->_internal_systemname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_systemname());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 1;
  if (this->_internal_has_ipv4_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ipv4_address_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 2;
  if (this->_internal_has_ipv6_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ipv6_address_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  if (this->_internal_has_gateway_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gateway_ip_);
  }

  // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 5;
  if (this->_internal_has_pcie_functions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pcie_functions_);
  }

  // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 8;
  if (this->_internal_has_mgmt_network_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mgmt_network_spec_);
  }

  // bool overlay_routing_enabled = 6;
  if (this->_internal_overlay_routing_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceSpec::GetClassData() const { return &_class_data_; }


void DeviceSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceSpec*>(&to_msg);
  auto& from = static_cast<const DeviceSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_addr().empty()) {
    _this->_internal_set_mac_addr(from._internal_mac_addr());
  }
  if (!from._internal_systemname().empty()) {
    _this->_internal_set_systemname(from._internal_systemname());
  }
  if (from._internal_has_ipv4_address()) {
    _this->_internal_mutable_ipv4_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_ipv4_address());
  }
  if (from._internal_has_ipv6_address()) {
    _this->_internal_mutable_ipv6_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_ipv6_address());
  }
  if (from._internal_has_gateway_ip()) {
    _this->_internal_mutable_gateway_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_gateway_ip());
  }
  if (from._internal_has_pcie_functions()) {
    _this->_internal_mutable_pcie_functions()->::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec::MergeFrom(
        from._internal_pcie_functions());
  }
  if (from._internal_has_mgmt_network_spec()) {
    _this->_internal_mutable_mgmt_network_spec()->::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec::MergeFrom(
        from._internal_mgmt_network_spec());
  }
  if (from._internal_overlay_routing_enabled() != 0) {
    _this->_internal_set_overlay_routing_enabled(from._internal_overlay_routing_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceSpec::CopyFrom(const DeviceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSpec::IsInitialized() const {
  return true;
}

void DeviceSpec::InternalSwap(DeviceSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_addr_, lhs_arena,
      &other->_impl_.mac_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.systemname_, lhs_arena,
      &other->_impl_.systemname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceSpec, _impl_.overlay_routing_enabled_)
      + sizeof(DeviceSpec::_impl_.overlay_routing_enabled_)
      - PROTOBUF_FIELD_OFFSET(DeviceSpec, _impl_.ipv4_address_)>(
          reinterpret_cast<char*>(&_impl_.ipv4_address_),
          reinterpret_cast<char*>(&other->_impl_.ipv4_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[4]);
}

// ===================================================================

class PCIeFunctionsSpec::_Internal {
 public:
};

PCIeFunctionsSpec::PCIeFunctionsSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
}
PCIeFunctionsSpec::PCIeFunctionsSpec(const PCIeFunctionsSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PCIeFunctionsSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pf_count_){}
    , decltype(_impl_.vf_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pf_count_, &from._impl_.pf_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vf_count_) -
    reinterpret_cast<char*>(&_impl_.pf_count_)) + sizeof(_impl_.vf_count_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
}

inline void PCIeFunctionsSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pf_count_){0}
    , decltype(_impl_.vf_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PCIeFunctionsSpec::~PCIeFunctionsSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCIeFunctionsSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCIeFunctionsSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PCIeFunctionsSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pf_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vf_count_) -
      reinterpret_cast<char*>(&_impl_.pf_count_)) + sizeof(_impl_.vf_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCIeFunctionsSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pf_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pf_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vf_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vf_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCIeFunctionsSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pf_count = 1;
  if (this->_internal_pf_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pf_count(), target);
  }

  // int32 vf_count = 2;
  if (this->_internal_vf_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vf_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  return target;
}

size_t PCIeFunctionsSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pf_count = 1;
  if (this->_internal_pf_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pf_count());
  }

  // int32 vf_count = 2;
  if (this->_internal_vf_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vf_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCIeFunctionsSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PCIeFunctionsSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCIeFunctionsSpec::GetClassData() const { return &_class_data_; }


void PCIeFunctionsSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PCIeFunctionsSpec*>(&to_msg);
  auto& from = static_cast<const PCIeFunctionsSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pf_count() != 0) {
    _this->_internal_set_pf_count(from._internal_pf_count());
  }
  if (from._internal_vf_count() != 0) {
    _this->_internal_set_vf_count(from._internal_vf_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCIeFunctionsSpec::CopyFrom(const PCIeFunctionsSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCIeFunctionsSpec::IsInitialized() const {
  return true;
}

void PCIeFunctionsSpec::InternalSwap(PCIeFunctionsSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCIeFunctionsSpec, _impl_.vf_count_)
      + sizeof(PCIeFunctionsSpec::_impl_.vf_count_)
      - PROTOBUF_FIELD_OFFSET(PCIeFunctionsSpec, _impl_.pf_count_)>(
          reinterpret_cast<char*>(&_impl_.pf_count_),
          reinterpret_cast<char*>(&other->_impl_.pf_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCIeFunctionsSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[5]);
}

// ===================================================================

class MgmtNetworkSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& lldp_mgmt_ip(const MgmtNetworkSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& mgmt_ip(const MgmtNetworkSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& gateway_ip(const MgmtNetworkSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MgmtNetworkSpec::_Internal::lldp_mgmt_ip(const MgmtNetworkSpec* msg) {
  return *msg->_impl_.lldp_mgmt_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MgmtNetworkSpec::_Internal::mgmt_ip(const MgmtNetworkSpec* msg) {
  return *msg->_impl_.mgmt_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MgmtNetworkSpec::_Internal::gateway_ip(const MgmtNetworkSpec* msg) {
  return *msg->_impl_.gateway_ip_;
}
void MgmtNetworkSpec::clear_lldp_mgmt_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.lldp_mgmt_ip_ != nullptr) {
    delete _impl_.lldp_mgmt_ip_;
  }
  _impl_.lldp_mgmt_ip_ = nullptr;
}
void MgmtNetworkSpec::clear_mgmt_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.mgmt_ip_ != nullptr) {
    delete _impl_.mgmt_ip_;
  }
  _impl_.mgmt_ip_ = nullptr;
}
void MgmtNetworkSpec::clear_gateway_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.gateway_ip_ != nullptr) {
    delete _impl_.gateway_ip_;
  }
  _impl_.gateway_ip_ = nullptr;
}
MgmtNetworkSpec::MgmtNetworkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
}
MgmtNetworkSpec::MgmtNetworkSpec(const MgmtNetworkSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MgmtNetworkSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gateway_mac_){}
    , decltype(_impl_.lldp_mgmt_ip_){nullptr}
    , decltype(_impl_.mgmt_ip_){nullptr}
    , decltype(_impl_.gateway_ip_){nullptr}
    , decltype(_impl_.vlan_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gateway_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gateway_mac().empty()) {
    _this->_impl_.gateway_mac_.Set(from._internal_gateway_mac(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lldp_mgmt_ip()) {
    _this->_impl_.lldp_mgmt_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.lldp_mgmt_ip_);
  }
  if (from._internal_has_mgmt_ip()) {
    _this->_impl_.mgmt_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.mgmt_ip_);
  }
  if (from._internal_has_gateway_ip()) {
    _this->_impl_.gateway_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.gateway_ip_);
  }
  _this->_impl_.vlan_ = from._impl_.vlan_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
}

inline void MgmtNetworkSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gateway_mac_){}
    , decltype(_impl_.lldp_mgmt_ip_){nullptr}
    , decltype(_impl_.mgmt_ip_){nullptr}
    , decltype(_impl_.gateway_ip_){nullptr}
    , decltype(_impl_.vlan_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gateway_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MgmtNetworkSpec::~MgmtNetworkSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MgmtNetworkSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gateway_mac_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lldp_mgmt_ip_;
  if (this != internal_default_instance()) delete _impl_.mgmt_ip_;
  if (this != internal_default_instance()) delete _impl_.gateway_ip_;
}

void MgmtNetworkSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MgmtNetworkSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gateway_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.lldp_mgmt_ip_ != nullptr) {
    delete _impl_.lldp_mgmt_ip_;
  }
  _impl_.lldp_mgmt_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mgmt_ip_ != nullptr) {
    delete _impl_.mgmt_ip_;
  }
  _impl_.mgmt_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gateway_ip_ != nullptr) {
    delete _impl_.gateway_ip_;
  }
  _impl_.gateway_ip_ = nullptr;
  _impl_.vlan_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MgmtNetworkSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lldp_mgmt_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mgmt_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vlan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gateway_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gateway_mac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gateway_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MgmtNetworkSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
  if (this->_internal_has_lldp_mgmt_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lldp_mgmt_ip(this),
        _Internal::lldp_mgmt_ip(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
  if (this->_internal_has_mgmt_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mgmt_ip(this),
        _Internal::mgmt_ip(this).GetCachedSize(), target, stream);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_vlan(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  if (this->_internal_has_gateway_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gateway_ip(this),
        _Internal::gateway_ip(this).GetCachedSize(), target, stream);
  }

  // bytes gateway_mac = 5;
  if (!this->_internal_gateway_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_gateway_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  return target;
}

size_t MgmtNetworkSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gateway_mac = 5;
  if (!this->_internal_gateway_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gateway_mac());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
  if (this->_internal_has_lldp_mgmt_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lldp_mgmt_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
  if (this->_internal_has_mgmt_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mgmt_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  if (this->_internal_has_gateway_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gateway_ip_);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MgmtNetworkSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MgmtNetworkSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MgmtNetworkSpec::GetClassData() const { return &_class_data_; }


void MgmtNetworkSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MgmtNetworkSpec*>(&to_msg);
  auto& from = static_cast<const MgmtNetworkSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gateway_mac().empty()) {
    _this->_internal_set_gateway_mac(from._internal_gateway_mac());
  }
  if (from._internal_has_lldp_mgmt_ip()) {
    _this->_internal_mutable_lldp_mgmt_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_lldp_mgmt_ip());
  }
  if (from._internal_has_mgmt_ip()) {
    _this->_internal_mutable_mgmt_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_mgmt_ip());
  }
  if (from._internal_has_gateway_ip()) {
    _this->_internal_mutable_gateway_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_gateway_ip());
  }
  if (from._internal_vlan() != 0) {
    _this->_internal_set_vlan(from._internal_vlan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MgmtNetworkSpec::CopyFrom(const MgmtNetworkSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgmtNetworkSpec::IsInitialized() const {
  return true;
}

void MgmtNetworkSpec::InternalSwap(MgmtNetworkSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gateway_mac_, lhs_arena,
      &other->_impl_.gateway_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MgmtNetworkSpec, _impl_.vlan_)
      + sizeof(MgmtNetworkSpec::_impl_.vlan_)
      - PROTOBUF_FIELD_OFFSET(MgmtNetworkSpec, _impl_.lldp_mgmt_ip_)>(
          reinterpret_cast<char*>(&_impl_.lldp_mgmt_ip_),
          reinterpret_cast<char*>(&other->_impl_.lldp_mgmt_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MgmtNetworkSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[6]);
}

// ===================================================================

class DeviceStatus::_Internal {
 public:
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.critical_events_){from._impl_.critical_events_}
    , decltype(_impl_.alerts_){from._impl_.alerts_}
    , decltype(_impl_.description_){}
    , decltype(_impl_.system_mac_address_){}
    , decltype(_impl_.vendor_id_){}
    , decltype(_impl_.chip_type_){}
    , decltype(_impl_.os_version_){}
    , decltype(_impl_.pipeline_){}
    , decltype(_impl_.pcie_port_count_){}
    , decltype(_impl_.port_count_){}
    , decltype(_impl_.host_if_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.system_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system_mac_address().empty()) {
    _this->_impl_.system_mac_address_.Set(from._internal_system_mac_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor_id().empty()) {
    _this->_impl_.vendor_id_.Set(from._internal_vendor_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chip_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chip_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chip_type().empty()) {
    _this->_impl_.chip_type_.Set(from._internal_chip_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_version().empty()) {
    _this->_impl_.os_version_.Set(from._internal_os_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pipeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pipeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pipeline().empty()) {
    _this->_impl_.pipeline_.Set(from._internal_pipeline(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pcie_port_count_, &from._impl_.pcie_port_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.host_if_count_) -
    reinterpret_cast<char*>(&_impl_.pcie_port_count_)) + sizeof(_impl_.host_if_count_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceStatus)
}

inline void DeviceStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.critical_events_){arena}
    , decltype(_impl_.alerts_){arena}
    , decltype(_impl_.description_){}
    , decltype(_impl_.system_mac_address_){}
    , decltype(_impl_.vendor_id_){}
    , decltype(_impl_.chip_type_){}
    , decltype(_impl_.os_version_){}
    , decltype(_impl_.pipeline_){}
    , decltype(_impl_.pcie_port_count_){0}
    , decltype(_impl_.port_count_){0}
    , decltype(_impl_.host_if_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.system_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chip_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chip_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pipeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pipeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.critical_events_.~RepeatedPtrField();
  _impl_.alerts_.~RepeatedPtrField();
  _impl_.description_.Destroy();
  _impl_.system_mac_address_.Destroy();
  _impl_.vendor_id_.Destroy();
  _impl_.chip_type_.Destroy();
  _impl_.os_version_.Destroy();
  _impl_.pipeline_.Destroy();
}

void DeviceStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.critical_events_.Clear();
  _impl_.alerts_.Clear();
  _impl_.description_.ClearToEmpty();
  _impl_.system_mac_address_.ClearToEmpty();
  _impl_.vendor_id_.ClearToEmpty();
  _impl_.chip_type_.ClearToEmpty();
  _impl_.os_version_.ClearToEmpty();
  _impl_.pipeline_.ClearToEmpty();
  ::memset(&_impl_.pcie_port_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.host_if_count_) -
      reinterpret_cast<char*>(&_impl_.pcie_port_count_)) + sizeof(_impl_.host_if_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.description"));
        } else
          goto handle_unusual;
        continue;
      // bytes system_mac_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_system_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vendor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vendor_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id"));
        } else
          goto handle_unusual;
        continue;
      // string chip_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chip_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type"));
        } else
          goto handle_unusual;
        continue;
      // string os_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_os_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.os_version"));
        } else
          goto handle_unusual;
        continue;
      // int32 pcie_port_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.pcie_port_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.port_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 host_if_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.host_if_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pipeline = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_pipeline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline"));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_critical_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alerts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // bytes system_mac_address = 2;
  if (!this->_internal_system_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_system_mac_address(), target);
  }

  // string vendor_id = 3;
  if (!this->_internal_vendor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_id().data(), static_cast<int>(this->_internal_vendor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor_id(), target);
  }

  // string chip_type = 4;
  if (!this->_internal_chip_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chip_type().data(), static_cast<int>(this->_internal_chip_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chip_type(), target);
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.os_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_os_version(), target);
  }

  // int32 pcie_port_count = 6;
  if (this->_internal_pcie_port_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_pcie_port_count(), target);
  }

  // int32 port_count = 7;
  if (this->_internal_port_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_port_count(), target);
  }

  // int32 host_if_count = 8;
  if (this->_internal_host_if_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_host_if_count(), target);
  }

  // string pipeline = 9;
  if (!this->_internal_pipeline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline().data(), static_cast<int>(this->_internal_pipeline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_pipeline(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_critical_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_critical_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alerts_size()); i < n; i++) {
    const auto& repfield = this->_internal_alerts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
  total_size += 1UL * this->_internal_critical_events_size();
  for (const auto& msg : this->_impl_.critical_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
  total_size += 1UL * this->_internal_alerts_size();
  for (const auto& msg : this->_impl_.alerts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bytes system_mac_address = 2;
  if (!this->_internal_system_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_system_mac_address());
  }

  // string vendor_id = 3;
  if (!this->_internal_vendor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_id());
  }

  // string chip_type = 4;
  if (!this->_internal_chip_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chip_type());
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_version());
  }

  // string pipeline = 9;
  if (!this->_internal_pipeline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline());
  }

  // int32 pcie_port_count = 6;
  if (this->_internal_pcie_port_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pcie_port_count());
  }

  // int32 port_count = 7;
  if (this->_internal_port_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port_count());
  }

  // int32 host_if_count = 8;
  if (this->_internal_host_if_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_host_if_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStatus::GetClassData() const { return &_class_data_; }


void DeviceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceStatus*>(&to_msg);
  auto& from = static_cast<const DeviceStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.critical_events_.MergeFrom(from._impl_.critical_events_);
  _this->_impl_.alerts_.MergeFrom(from._impl_.alerts_);
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_system_mac_address().empty()) {
    _this->_internal_set_system_mac_address(from._internal_system_mac_address());
  }
  if (!from._internal_vendor_id().empty()) {
    _this->_internal_set_vendor_id(from._internal_vendor_id());
  }
  if (!from._internal_chip_type().empty()) {
    _this->_internal_set_chip_type(from._internal_chip_type());
  }
  if (!from._internal_os_version().empty()) {
    _this->_internal_set_os_version(from._internal_os_version());
  }
  if (!from._internal_pipeline().empty()) {
    _this->_internal_set_pipeline(from._internal_pipeline());
  }
  if (from._internal_pcie_port_count() != 0) {
    _this->_internal_set_pcie_port_count(from._internal_pcie_port_count());
  }
  if (from._internal_port_count() != 0) {
    _this->_internal_set_port_count(from._internal_port_count());
  }
  if (from._internal_host_if_count() != 0) {
    _this->_internal_set_host_if_count(from._internal_host_if_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.critical_events_.InternalSwap(&other->_impl_.critical_events_);
  _impl_.alerts_.InternalSwap(&other->_impl_.alerts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.system_mac_address_, lhs_arena,
      &other->_impl_.system_mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_id_, lhs_arena,
      &other->_impl_.vendor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chip_type_, lhs_arena,
      &other->_impl_.chip_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_version_, lhs_arena,
      &other->_impl_.os_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pipeline_, lhs_arena,
      &other->_impl_.pipeline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, _impl_.host_if_count_)
      + sizeof(DeviceStatus::_impl_.host_if_count_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, _impl_.pcie_port_count_)>(
          reinterpret_cast<char*>(&_impl_.pcie_port_count_),
          reinterpret_cast<char*>(&other->_impl_.pcie_port_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[7]);
}

// ===================================================================

class SystemEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_time(const SystemEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemEvent::_Internal::event_time(const SystemEvent* msg) {
  return *msg->_impl_.event_time_;
}
void SystemEvent::clear_event_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_time_ != nullptr) {
    delete _impl_.event_time_;
  }
  _impl_.event_time_ = nullptr;
}
SystemEvent::SystemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SystemEvent)
}
SystemEvent::SystemEvent(const SystemEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_description_){}
    , decltype(_impl_.event_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_description().empty()) {
    _this->_impl_.event_description_.Set(from._internal_event_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event_time()) {
    _this->_impl_.event_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.event_time_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SystemEvent)
}

inline void SystemEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_description_){}
    , decltype(_impl_.event_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemEvent::~SystemEvent() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SystemEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_time_;
}

void SystemEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_time_ != nullptr) {
    delete _impl_.event_time_;
  }
  _impl_.event_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp event_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SystemEvent.event_description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp event_time = 1;
  if (this->_internal_has_event_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event_time(this),
        _Internal::event_time(this).GetCachedSize(), target, stream);
  }

  // string event_description = 2;
  if (!this->_internal_event_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_description().data(), static_cast<int>(this->_internal_event_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SystemEvent.event_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SystemEvent)
  return target;
}

size_t SystemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_description = 2;
  if (!this->_internal_event_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_description());
  }

  // .google.protobuf.Timestamp event_time = 1;
  if (this->_internal_has_event_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemEvent::GetClassData() const { return &_class_data_; }


void SystemEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemEvent*>(&to_msg);
  auto& from = static_cast<const SystemEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_description().empty()) {
    _this->_internal_set_event_description(from._internal_event_description());
  }
  if (from._internal_has_event_time()) {
    _this->_internal_mutable_event_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_event_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemEvent::CopyFrom(const SystemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemEvent::IsInitialized() const {
  return true;
}

void SystemEvent::InternalSwap(SystemEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_description_, lhs_arena,
      &other->_impl_.event_description_, rhs_arena
  );
  swap(_impl_.event_time_, other->_impl_.event_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[8]);
}

// ===================================================================

class SystemAlert::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& alert_time(const SystemAlert* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemAlert::_Internal::alert_time(const SystemAlert* msg) {
  return *msg->_impl_.alert_time_;
}
void SystemAlert::clear_alert_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.alert_time_ != nullptr) {
    delete _impl_.alert_time_;
  }
  _impl_.alert_time_ = nullptr;
}
SystemAlert::SystemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SystemAlert)
}
SystemAlert::SystemAlert(const SystemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alert_description_){}
    , decltype(_impl_.alert_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alert_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alert_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alert_description().empty()) {
    _this->_impl_.alert_description_.Set(from._internal_alert_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_alert_time()) {
    _this->_impl_.alert_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.alert_time_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SystemAlert)
}

inline void SystemAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alert_description_){}
    , decltype(_impl_.alert_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.alert_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alert_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemAlert::~SystemAlert() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SystemAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alert_description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.alert_time_;
}

void SystemAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alert_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.alert_time_ != nullptr) {
    delete _impl_.alert_time_;
  }
  _impl_.alert_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp alert_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_alert_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alert_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_alert_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SystemAlert.alert_description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp alert_time = 1;
  if (this->_internal_has_alert_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::alert_time(this),
        _Internal::alert_time(this).GetCachedSize(), target, stream);
  }

  // string alert_description = 2;
  if (!this->_internal_alert_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alert_description().data(), static_cast<int>(this->_internal_alert_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SystemAlert.alert_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alert_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SystemAlert)
  return target;
}

size_t SystemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alert_description = 2;
  if (!this->_internal_alert_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alert_description());
  }

  // .google.protobuf.Timestamp alert_time = 1;
  if (this->_internal_has_alert_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alert_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemAlert::GetClassData() const { return &_class_data_; }


void SystemAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemAlert*>(&to_msg);
  auto& from = static_cast<const SystemAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alert_description().empty()) {
    _this->_internal_set_alert_description(from._internal_alert_description());
  }
  if (from._internal_has_alert_time()) {
    _this->_internal_mutable_alert_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_alert_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemAlert::CopyFrom(const SystemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemAlert::IsInitialized() const {
  return true;
}

void SystemAlert::InternalSwap(SystemAlert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alert_description_, lhs_arena,
      &other->_impl_.alert_description_, rhs_arena
  );
  swap(_impl_.alert_time_, other->_impl_.alert_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceCapabilities*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Device*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SystemEvent*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SystemEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SystemEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SystemAlert*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SystemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SystemAlert >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
