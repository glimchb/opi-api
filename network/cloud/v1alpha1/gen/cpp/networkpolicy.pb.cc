// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkpolicy.proto

#include "networkpolicy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR SecurityPolicy::SecurityPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityPolicyDefaultTypeInternal() {}
  union {
    SecurityPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityPolicyDefaultTypeInternal _SecurityPolicy_default_instance_;
PROTOBUF_CONSTEXPR SecurityPolicySpec::SecurityPolicySpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.address_family_)*/0
  , /*decltype(_impl_.stateless_)*/false
  , /*decltype(_impl_.default_security_action_)*/0
  , /*decltype(_impl_.rule_format_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityPolicySpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityPolicySpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityPolicySpecDefaultTypeInternal() {}
  union {
    SecurityPolicySpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityPolicySpecDefaultTypeInternal _SecurityPolicySpec_default_instance_;
PROTOBUF_CONSTEXPR SecurityRuleInfo::SecurityRuleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rule_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attrs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityRuleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityRuleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityRuleInfoDefaultTypeInternal() {}
  union {
    SecurityRuleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityRuleInfoDefaultTypeInternal _SecurityRuleInfo_default_instance_;
PROTOBUF_CONSTEXPR SecurityRuleAttrs::SecurityRuleAttrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_)*/nullptr
  , /*decltype(_impl_.alg_spec_)*/nullptr
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.terminating_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityRuleAttrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityRuleAttrsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityRuleAttrsDefaultTypeInternal() {}
  union {
    SecurityRuleAttrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityRuleAttrsDefaultTypeInternal _SecurityRuleAttrs_default_instance_;
PROTOBUF_CONSTEXPR FTPOptions::FTPOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allow_ip_mismatch_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FTPOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTPOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTPOptionsDefaultTypeInternal() {}
  union {
    FTPOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTPOptionsDefaultTypeInternal _FTPOptions_default_instance_;
PROTOBUF_CONSTEXPR DNSOptions::DNSOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drop_multi_query_messages_)*/false
  , /*decltype(_impl_.drop_large_domain_name_ref_)*/false
  , /*decltype(_impl_.drop_long_label_messages_)*/false
  , /*decltype(_impl_.drop_multi_zone_messages_)*/false
  , /*decltype(_impl_.response_timeout_)*/0
  , /*decltype(_impl_.max_message_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DNSOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DNSOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DNSOptionsDefaultTypeInternal() {}
  union {
    DNSOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DNSOptionsDefaultTypeInternal _DNSOptions_default_instance_;
PROTOBUF_CONSTEXPR MSRPCOptions::MSRPCOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.program_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MSRPCOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MSRPCOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MSRPCOptionsDefaultTypeInternal() {}
  union {
    MSRPCOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MSRPCOptionsDefaultTypeInternal _MSRPCOptions_default_instance_;
PROTOBUF_CONSTEXPR SunRPCOptions::SunRPCOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.program_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SunRPCOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SunRPCOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SunRPCOptionsDefaultTypeInternal() {}
  union {
    SunRPCOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SunRPCOptionsDefaultTypeInternal _SunRPCOptions_default_instance_;
PROTOBUF_CONSTEXPR ALGSpec::ALGSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alg_type_)*/0
  , /*decltype(_impl_.idle_timeout_)*/0
  , /*decltype(_impl_.alg_options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ALGSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ALGSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ALGSpecDefaultTypeInternal() {}
  union {
    ALGSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ALGSpecDefaultTypeInternal _ALGSpec_default_instance_;
PROTOBUF_CONSTEXPR SecurityPolicyStatus::SecurityPolicyStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hw_pool_handle_)*/nullptr
  , /*decltype(_impl_.hw_handle_)*/nullptr
  , /*decltype(_impl_.rule_count_)*/0
  , /*decltype(_impl_.vpc_count_)*/0
  , /*decltype(_impl_.subnet_count_)*/0
  , /*decltype(_impl_.vnic_count_)*/0
  , /*decltype(_impl_.policy_base_address_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityPolicyStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityPolicyStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityPolicyStatusDefaultTypeInternal() {}
  union {
    SecurityPolicyStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityPolicyStatusDefaultTypeInternal _SecurityPolicyStatus_default_instance_;
PROTOBUF_CONSTEXPR SecurityRule::SecurityRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityRuleDefaultTypeInternal() {}
  union {
    SecurityRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityRuleDefaultTypeInternal _SecurityRule_default_instance_;
PROTOBUF_CONSTEXPR SecurityRuleSpec::SecurityRuleSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.security_policy_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attrs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityRuleSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityRuleSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityRuleSpecDefaultTypeInternal() {}
  union {
    SecurityRuleSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityRuleSpecDefaultTypeInternal _SecurityRuleSpec_default_instance_;
PROTOBUF_CONSTEXPR SecurityRuleStatus::SecurityRuleStatus(
    ::_pbi::ConstantInitialized) {}
struct SecurityRuleStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityRuleStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityRuleStatusDefaultTypeInternal() {}
  union {
    SecurityRuleStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityRuleStatusDefaultTypeInternal _SecurityRuleStatus_default_instance_;
PROTOBUF_CONSTEXPR SecurityProfile::SecurityProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityProfileDefaultTypeInternal() {}
  union {
    SecurityProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityProfileDefaultTypeInternal _SecurityProfile_default_instance_;
PROTOBUF_CONSTEXPR SecurityProfileSpec::SecurityProfileSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_tracking_enable_)*/false
  , /*decltype(_impl_.rule_stats_enable_)*/false
  , /*decltype(_impl_.default_firewall_action_)*/0
  , /*decltype(_impl_.tcp_idle_timeout_)*/0
  , /*decltype(_impl_.udp_idle_timeout_)*/0
  , /*decltype(_impl_.icmp_idle_timeout_)*/0
  , /*decltype(_impl_.other_idle_timeout_)*/0
  , /*decltype(_impl_.tcp_connection_setup_timeout_)*/0
  , /*decltype(_impl_.tcp_half_close_timeout_)*/0
  , /*decltype(_impl_.tcp_close_timeout_)*/0
  , /*decltype(_impl_.tcp_dorp_timeout_)*/0
  , /*decltype(_impl_.udp_drop_timeout_)*/0
  , /*decltype(_impl_.icmp_drop_timeout_)*/0
  , /*decltype(_impl_.other_drop_timeout_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityProfileSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityProfileSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityProfileSpecDefaultTypeInternal() {}
  union {
    SecurityProfileSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityProfileSpecDefaultTypeInternal _SecurityProfileSpec_default_instance_;
PROTOBUF_CONSTEXPR SecurityProfileStatus::SecurityProfileStatus(
    ::_pbi::ConstantInitialized) {}
struct SecurityProfileStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityProfileStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityProfileStatusDefaultTypeInternal() {}
  union {
    SecurityProfileStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityProfileStatusDefaultTypeInternal _SecurityProfileStatus_default_instance_;
PROTOBUF_CONSTEXPR PolicyLookupMatch::PolicyLookupMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_tags_)*/{}
  , /*decltype(_impl_._source_tags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.destination_tags_)*/{}
  , /*decltype(_impl_._destination_tags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.source_ip_)*/nullptr
  , /*decltype(_impl_.destination_ip_)*/nullptr
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.source_port_)*/0
  , /*decltype(_impl_.destination_port_)*/0
  , /*decltype(_impl_.icmp_type_)*/0
  , /*decltype(_impl_.icmp_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PolicyLookupMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyLookupMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyLookupMatchDefaultTypeInternal() {}
  union {
    PolicyLookupMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyLookupMatchDefaultTypeInternal _PolicyLookupMatch_default_instance_;
PROTOBUF_CONSTEXPR SecurityPolicyLookupRequest_VnicLookupInfo::SecurityPolicyLookupRequest_VnicLookupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnic_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_direction_)*/0
  , /*decltype(_impl_.address_family_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecurityPolicyLookupRequest_VnicLookupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityPolicyLookupRequest_VnicLookupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityPolicyLookupRequest_VnicLookupInfoDefaultTypeInternal() {}
  union {
    SecurityPolicyLookupRequest_VnicLookupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityPolicyLookupRequest_VnicLookupInfoDefaultTypeInternal _SecurityPolicyLookupRequest_VnicLookupInfo_default_instance_;
PROTOBUF_CONSTEXPR SecurityPolicyLookupRequest::SecurityPolicyLookupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_fields_)*/nullptr
  , /*decltype(_impl_.lookup_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SecurityPolicyLookupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityPolicyLookupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityPolicyLookupRequestDefaultTypeInternal() {}
  union {
    SecurityPolicyLookupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityPolicyLookupRequestDefaultTypeInternal _SecurityPolicyLookupRequest_default_instance_;
PROTOBUF_CONSTEXPR PolicyLookupResult::PolicyLookupResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rule_hw_handle_)*/nullptr
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.alg_type_)*/0
  , /*decltype(_impl_.terminating_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PolicyLookupResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyLookupResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyLookupResultDefaultTypeInternal() {}
  union {
    PolicyLookupResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyLookupResultDefaultTypeInternal _PolicyLookupResult_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_networkpolicy_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_networkpolicy_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_networkpolicy_2eproto = nullptr;

const uint32_t TableStruct_networkpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicy, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicy, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicy, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _impl_.address_family_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _impl_.stateless_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _impl_.default_security_action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _impl_.rules_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec, _impl_.rule_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleInfo, _impl_.rule_name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleInfo, _impl_.attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs, _impl_.match_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs, _impl_.terminating_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs, _impl_.alg_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::FTPOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::FTPOptions, _impl_.allow_ip_mismatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _impl_.drop_multi_query_messages_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _impl_.drop_large_domain_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _impl_.drop_long_label_messages_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _impl_.drop_multi_zone_messages_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _impl_.response_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DNSOptions, _impl_.max_message_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MSRPCOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MSRPCOptions, _impl_.program_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SunRPCOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SunRPCOptions, _impl_.program_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ALGSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ALGSpec, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ALGSpec, _impl_.alg_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ALGSpec, _impl_.idle_timeout_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ALGSpec, _impl_.alg_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.rule_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.vpc_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.subnet_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.vnic_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.hw_pool_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus, _impl_.policy_base_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRule, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRule, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRule, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleSpec, _impl_.security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleSpec, _impl_.attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityRuleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfile, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfile, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfile, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.connection_tracking_enable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.rule_stats_enable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.default_firewall_action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.tcp_idle_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.udp_idle_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.icmp_idle_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.other_idle_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.tcp_connection_setup_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.tcp_half_close_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.tcp_close_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.tcp_dorp_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.udp_drop_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.icmp_drop_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec, _impl_.other_drop_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityProfileStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.source_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.source_tags_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.destination_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.destination_tags_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.source_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.destination_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.icmp_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch, _impl_.icmp_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo, _impl_.vnic_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo, _impl_.policy_direction_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo, _impl_.address_family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest, _impl_.match_fields_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest, _impl_.lookup_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupResult, _impl_.rule_hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupResult, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupResult, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupResult, _impl_.alg_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PolicyLookupResult, _impl_.terminating_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityPolicy)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec)},
  { 21, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityRuleInfo)},
  { 29, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs)},
  { 40, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::FTPOptions)},
  { 47, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DNSOptions)},
  { 59, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::MSRPCOptions)},
  { 66, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SunRPCOptions)},
  { 73, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::ALGSpec)},
  { 86, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus)},
  { 99, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityRule)},
  { 108, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityRuleSpec)},
  { 116, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityRuleStatus)},
  { 122, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityProfile)},
  { 131, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec)},
  { 151, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityProfileStatus)},
  { 157, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch)},
  { 172, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo)},
  { 181, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest)},
  { 191, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PolicyLookupResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_SecurityPolicy_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityPolicySpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityRuleInfo_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityRuleAttrs_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_FTPOptions_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_DNSOptions_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_MSRPCOptions_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SunRPCOptions_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_ALGSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityPolicyStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityRule_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityRuleSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityRuleStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityProfile_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityProfileSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityProfileStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PolicyLookupMatch_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityPolicyLookupRequest_VnicLookupInfo_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_SecurityPolicyLookupRequest_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PolicyLookupResult_default_instance_._instance,
};

const char descriptor_table_protodef_networkpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023networkpolicy.proto\022\036opi_api.network.c"
  "loud.v1alpha1\032\022networktypes.proto\032\031googl"
  "e/api/resource.proto\"\374\001\n\016SecurityPolicy\022"
  "\014\n\004name\030\001 \001(\t\022@\n\004spec\030\002 \001(\01322.opi_api.ne"
  "twork.cloud.v1alpha1.SecurityPolicySpec\022"
  "D\n\006status\030\003 \001(\01324.opi_api.network.cloud."
  "v1alpha1.SecurityPolicyStatus:T\352AQ\n-opi_"
  "api.network.cloud.v1alpha1/securitypolic"
  "y\022 securitypolicys/{securitypolicy}\"\222\003\n\022"
  "SecurityPolicySpec\022@\n\004type\030\001 \001(\01622.opi_a"
  "pi.network.cloud.v1alpha1.SecurityPolicy"
  "Type\022C\n\016address_family\030\002 \001(\0162+.opi_api.n"
  "etwork.opinetcommon.v1alpha1.IpAf\022\021\n\tsta"
  "teless\030\003 \001(\010\022Z\n\027default_security_action\030"
  "\004 \001(\01629.opi_api.network.opinetcommon.v1a"
  "lpha1.SecurityRuleAction\022\?\n\005rules\030\005 \003(\0132"
  "0.opi_api.network.cloud.v1alpha1.Securit"
  "yRuleInfo\022E\n\013rule_format\030\006 \001(\01620.opi_api"
  ".network.cloud.v1alpha1.PolicyRuleFormat"
  "\"g\n\020SecurityRuleInfo\022\021\n\trule_name\030\001 \001(\t\022"
  "@\n\005attrs\030\002 \001(\01321.opi_api.network.cloud.v"
  "1alpha1.SecurityRuleAttrs\"\201\002\n\021SecurityRu"
  "leAttrs\022\020\n\010priority\030\001 \001(\005\022\?\n\005match\030\002 \001(\013"
  "20.opi_api.network.opinetcommon.v1alpha1"
  ".RuleMatch\022I\n\006action\030\003 \001(\01629.opi_api.net"
  "work.opinetcommon.v1alpha1.SecurityRuleA"
  "ction\022\023\n\013terminating\030\004 \001(\010\0229\n\010alg_spec\030\005"
  " \001(\0132\'.opi_api.network.cloud.v1alpha1.AL"
  "GSpec\"\'\n\nFTPOptions\022\031\n\021allow_ip_mismatch"
  "\030\001 \001(\010\"\315\001\n\nDNSOptions\022!\n\031drop_multi_quer"
  "y_messages\030\001 \001(\010\022\"\n\032drop_large_domain_na"
  "me_ref\030\002 \001(\010\022 \n\030drop_long_label_messages"
  "\030\003 \001(\010\022 \n\030drop_multi_zone_messages\030\004 \001(\010"
  "\022\030\n\020response_timeout\030\005 \001(\005\022\032\n\022max_messag"
  "e_length\030\006 \001(\005\"\"\n\014MSRPCOptions\022\022\n\nprogra"
  "m_id\030\001 \003(\014\"#\n\rSunRPCOptions\022\022\n\nprogram_i"
  "d\030\001 \003(\014\"\377\002\n\007ALGSpec\0229\n\010alg_type\030\001 \001(\0162\'."
  "opi_api.network.cloud.v1alpha1.ALGType\022\024"
  "\n\014idle_timeout\030\002 \001(\005\022A\n\013ftp_options\030\003 \001("
  "\0132*.opi_api.network.cloud.v1alpha1.FTPOp"
  "tionsH\000\022A\n\013dns_options\030\004 \001(\0132*.opi_api.n"
  "etwork.cloud.v1alpha1.DNSOptionsH\000\022E\n\rms"
  "rpc_options\030\005 \001(\0132,.opi_api.network.clou"
  "d.v1alpha1.MSRPCOptionsH\000\022G\n\016sunrpc_opti"
  "ons\030\006 \001(\0132-.opi_api.network.cloud.v1alph"
  "a1.SunRPCOptionsH\000B\r\n\013alg_options\"\221\002\n\024Se"
  "curityPolicyStatus\022\022\n\nrule_count\030\001 \001(\005\022\021"
  "\n\tvpc_count\030\002 \001(\005\022\024\n\014subnet_count\030\003 \001(\005\022"
  "\022\n\nvnic_count\030\004 \001(\005\022G\n\016hw_pool_handle\030\005 "
  "\001(\0132/.opi_api.network.opinetcommon.v1alp"
  "ha1.HwHandle\022B\n\thw_handle\030\006 \001(\0132/.opi_ap"
  "i.network.opinetcommon.v1alpha1.HwHandle"
  "\022\033\n\023policy_base_address\030\007 \001(\004\"\360\001\n\014Securi"
  "tyRule\022\014\n\004name\030\001 \001(\t\022>\n\004spec\030\002 \001(\01320.opi"
  "_api.network.cloud.v1alpha1.SecurityRule"
  "Spec\022B\n\006status\030\003 \001(\01322.opi_api.network.c"
  "loud.v1alpha1.SecurityRuleStatus:N\352AK\n+o"
  "pi_api.network.cloud.v1alpha1/securityru"
  "le\022\034securityrules/{securityrule}\"v\n\020Secu"
  "rityRuleSpec\022 \n\030security_policy_name_ref"
  "\030\001 \001(\t\022@\n\005attrs\030\002 \001(\01321.opi_api.network."
  "cloud.v1alpha1.SecurityRuleAttrs\"\024\n\022Secu"
  "rityRuleStatus\"\202\002\n\017SecurityProfile\022\014\n\004na"
  "me\030\001 \001(\t\022A\n\004spec\030\002 \001(\01323.opi_api.network"
  ".cloud.v1alpha1.SecurityProfileSpec\022E\n\006s"
  "tatus\030\003 \001(\01325.opi_api.network.cloud.v1al"
  "pha1.SecurityProfileStatus:W\352AT\n.opi_api"
  ".network.cloud.v1alpha1/securityprofile\022"
  "\"securityprofiles/{securityprofile}\"\347\003\n\023"
  "SecurityProfileSpec\022\"\n\032connection_tracki"
  "ng_enable\030\001 \001(\010\022\031\n\021rule_stats_enable\030\002 \001"
  "(\010\022Z\n\027default_firewall_action\030\003 \001(\01629.op"
  "i_api.network.opinetcommon.v1alpha1.Secu"
  "rityRuleAction\022\030\n\020tcp_idle_timeout\030\004 \001(\005"
  "\022\030\n\020udp_idle_timeout\030\005 \001(\005\022\031\n\021icmp_idle_"
  "timeout\030\006 \001(\005\022\032\n\022other_idle_timeout\030\007 \001("
  "\005\022$\n\034tcp_connection_setup_timeout\030\010 \001(\005\022"
  "\036\n\026tcp_half_close_timeout\030\t \001(\005\022\031\n\021tcp_c"
  "lose_timeout\030\n \001(\005\022\030\n\020tcp_dorp_timeout\030\013"
  " \001(\005\022\030\n\020udp_drop_timeout\030\014 \001(\005\022\031\n\021icmp_d"
  "rop_timeout\030\r \001(\005\022\032\n\022other_drop_timeout\030"
  "\016 \001(\005\"\027\n\025SecurityProfileStatus\"\270\002\n\021Polic"
  "yLookupMatch\022C\n\tsource_ip\030\001 \001(\01320.opi_ap"
  "i.network.opinetcommon.v1alpha1.IPAddres"
  "s\022\023\n\013source_tags\030\002 \003(\r\022H\n\016destination_ip"
  "\030\003 \001(\01320.opi_api.network.opinetcommon.v1"
  "alpha1.IPAddress\022\030\n\020destination_tags\030\004 \003"
  "(\r\022\020\n\010protocol\030\005 \001(\005\022\023\n\013source_port\030\006 \001("
  "\005\022\030\n\020destination_port\030\007 \001(\005\022\021\n\ticmp_type"
  "\030\010 \001(\005\022\021\n\ticmp_code\030\t \001(\005\"\263\003\n\033SecurityPo"
  "licyLookupRequest\022\031\n\017policy_name_ref\030\001 \001"
  "(\tH\000\022f\n\020vnic_lookup_info\030\002 \001(\0132J.opi_api"
  ".network.cloud.v1alpha1.SecurityPolicyLo"
  "okupRequest.VnicLookupInfoH\000\022G\n\014match_fi"
  "elds\030\003 \001(\01321.opi_api.network.cloud.v1alp"
  "ha1.PolicyLookupMatch\032\270\001\n\016VnicLookupInfo"
  "\022\025\n\rvnic_name_ref\030\001 \001(\t\022J\n\020policy_direct"
  "ion\030\002 \001(\01620.opi_api.network.opinetcommon"
  ".v1alpha1.PolicyDir\022C\n\016address_family\030\003 "
  "\001(\0162+.opi_api.network.opinetcommon.v1alp"
  "ha1.IpAfB\r\n\013lookup_info\"\212\002\n\022PolicyLookup"
  "Result\022G\n\016rule_hw_handle\030\001 \001(\0132/.opi_api"
  ".network.opinetcommon.v1alpha1.HwHandle\022"
  "\020\n\010priority\030\002 \001(\005\022I\n\006action\030\003 \001(\01629.opi_"
  "api.network.opinetcommon.v1alpha1.Securi"
  "tyRuleAction\0229\n\010alg_type\030\004 \001(\0162\'.opi_api"
  ".network.cloud.v1alpha1.ALGType\022\023\n\013termi"
  "nating\030\005 \001(\010*~\n\022SecurityPolicyType\022$\n SE"
  "CURITY_POLICY_TYPE_UNSPECIFIED\020\000\022!\n\035SECU"
  "RITY_POLICY_TYPE_UNDERLAY\020\001\022\037\n\033SECURITY_"
  "POLICY_TYPE_TENANT\020\002*\226\001\n\007ALGType\022\030\n\024ALG_"
  "TYPE_UNSPECIFIED\020\000\022\021\n\rALG_TYPE_TFTP\020\001\022\020\n"
  "\014ALG_TYPE_FTP\020\002\022\020\n\014ALG_TYPE_DNS\020\003\022\023\n\017ALG"
  "_TYPE_SUNRPC\020\004\022\022\n\016ALG_TYPE_MSRPC\020\005\022\021\n\rAL"
  "G_TYPE_RTSP\020\006*x\n\020PolicyRuleFormat\022\"\n\036POL"
  "ICY_RULE_FORMAT_UNSPECIFIED\020\000\022 \n\034POLICY_"
  "RULE_FORMAT_FLATTENED\020\001\022\036\n\032POLICY_RULE_F"
  "ORMAT_COMPACT\020\002Bs\n\036opi_api.network.cloud"
  ".v1alpha1B\022NetworkPolicyProtoP\001Z;github."
  "com/opiproject/opi-api/network/cloud/v1a"
  "lpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_networkpolicy_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_networkpolicy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_networkpolicy_2eproto = {
    false, false, 4820, descriptor_table_protodef_networkpolicy_2eproto,
    "networkpolicy.proto",
    &descriptor_table_networkpolicy_2eproto_once, descriptor_table_networkpolicy_2eproto_deps, 2, 20,
    schemas, file_default_instances, TableStruct_networkpolicy_2eproto::offsets,
    file_level_metadata_networkpolicy_2eproto, file_level_enum_descriptors_networkpolicy_2eproto,
    file_level_service_descriptors_networkpolicy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_networkpolicy_2eproto_getter() {
  return &descriptor_table_networkpolicy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_networkpolicy_2eproto(&descriptor_table_networkpolicy_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityPolicyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkpolicy_2eproto);
  return file_level_enum_descriptors_networkpolicy_2eproto[0];
}
bool SecurityPolicyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ALGType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkpolicy_2eproto);
  return file_level_enum_descriptors_networkpolicy_2eproto[1];
}
bool ALGType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyRuleFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkpolicy_2eproto);
  return file_level_enum_descriptors_networkpolicy_2eproto[2];
}
bool PolicyRuleFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SecurityPolicy::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec& spec(const SecurityPolicy* msg);
  static const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus& status(const SecurityPolicy* msg);
};

const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec&
SecurityPolicy::_Internal::spec(const SecurityPolicy* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus&
SecurityPolicy::_Internal::status(const SecurityPolicy* msg) {
  return *msg->_impl_.status_;
}
SecurityPolicy::SecurityPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicy)
}
SecurityPolicy::SecurityPolicy(const SecurityPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicy)
}

inline void SecurityPolicy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityPolicy::~SecurityPolicy() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SecurityPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityPolicy.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityPolicySpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityPolicyStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityPolicy.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityPolicySpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  return target;
}

size_t SecurityPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.SecurityPolicySpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityPolicy::GetClassData() const { return &_class_data_; }


void SecurityPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityPolicy*>(&to_msg);
  auto& from = static_cast<const SecurityPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::SecurityPolicySpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityPolicy::CopyFrom(const SecurityPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityPolicy::IsInitialized() const {
  return true;
}

void SecurityPolicy::InternalSwap(SecurityPolicy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityPolicy, _impl_.status_)
      + sizeof(SecurityPolicy::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SecurityPolicy, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[0]);
}

// ===================================================================

class SecurityPolicySpec::_Internal {
 public:
};

SecurityPolicySpec::SecurityPolicySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
}
SecurityPolicySpec::SecurityPolicySpec(const SecurityPolicySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityPolicySpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.address_family_){}
    , decltype(_impl_.stateless_){}
    , decltype(_impl_.default_security_action_){}
    , decltype(_impl_.rule_format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rule_format_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.rule_format_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
}

inline void SecurityPolicySpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.address_family_){0}
    , decltype(_impl_.stateless_){false}
    , decltype(_impl_.default_security_action_){0}
    , decltype(_impl_.rule_format_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SecurityPolicySpec::~SecurityPolicySpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityPolicySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
}

void SecurityPolicySpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityPolicySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rule_format_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.rule_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityPolicySpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::SecurityPolicyType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_address_family(static_cast<::opi_api::network::opinetcommon::v1alpha1::IpAf>(val));
        } else
          goto handle_unusual;
        continue;
      // bool stateless = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stateless_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_security_action(static_cast<::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rule_format(static_cast<::opi_api::network::cloud::v1alpha1::PolicyRuleFormat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityPolicySpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 2;
  if (this->_internal_address_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_address_family(), target);
  }

  // bool stateless = 3;
  if (this->_internal_stateless() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_stateless(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 4;
  if (this->_internal_default_security_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_default_security_action(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 6;
  if (this->_internal_rule_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_rule_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  return target;
}

size_t SecurityPolicySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 5;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 2;
  if (this->_internal_address_family() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_address_family());
  }

  // bool stateless = 3;
  if (this->_internal_stateless() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 4;
  if (this->_internal_default_security_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_default_security_action());
  }

  // .opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 6;
  if (this->_internal_rule_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rule_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityPolicySpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityPolicySpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityPolicySpec::GetClassData() const { return &_class_data_; }


void SecurityPolicySpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityPolicySpec*>(&to_msg);
  auto& from = static_cast<const SecurityPolicySpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_address_family() != 0) {
    _this->_internal_set_address_family(from._internal_address_family());
  }
  if (from._internal_stateless() != 0) {
    _this->_internal_set_stateless(from._internal_stateless());
  }
  if (from._internal_default_security_action() != 0) {
    _this->_internal_set_default_security_action(from._internal_default_security_action());
  }
  if (from._internal_rule_format() != 0) {
    _this->_internal_set_rule_format(from._internal_rule_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityPolicySpec::CopyFrom(const SecurityPolicySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityPolicySpec::IsInitialized() const {
  return true;
}

void SecurityPolicySpec::InternalSwap(SecurityPolicySpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityPolicySpec, _impl_.rule_format_)
      + sizeof(SecurityPolicySpec::_impl_.rule_format_)
      - PROTOBUF_FIELD_OFFSET(SecurityPolicySpec, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityPolicySpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[1]);
}

// ===================================================================

class SecurityRuleInfo::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& attrs(const SecurityRuleInfo* msg);
};

const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs&
SecurityRuleInfo::_Internal::attrs(const SecurityRuleInfo* msg) {
  return *msg->_impl_.attrs_;
}
SecurityRuleInfo::SecurityRuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
}
SecurityRuleInfo::SecurityRuleInfo(const SecurityRuleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityRuleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_name_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rule_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rule_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rule_name().empty()) {
    _this->_impl_.rule_name_.Set(from._internal_rule_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attrs()) {
    _this->_impl_.attrs_ = new ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs(*from._impl_.attrs_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
}

inline void SecurityRuleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_name_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rule_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rule_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityRuleInfo::~SecurityRuleInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityRuleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rule_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attrs_;
}

void SecurityRuleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityRuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rule_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attrs_ != nullptr) {
    delete _impl_.attrs_;
  }
  _impl_.attrs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityRuleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rule_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rule_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityRuleInfo.rule_name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityRuleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rule_name = 1;
  if (!this->_internal_rule_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rule_name().data(), static_cast<int>(this->_internal_rule_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityRuleInfo.rule_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rule_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attrs(this),
        _Internal::attrs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  return target;
}

size_t SecurityRuleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rule_name = 1;
  if (!this->_internal_rule_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rule_name());
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attrs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityRuleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityRuleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityRuleInfo::GetClassData() const { return &_class_data_; }


void SecurityRuleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityRuleInfo*>(&to_msg);
  auto& from = static_cast<const SecurityRuleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rule_name().empty()) {
    _this->_internal_set_rule_name(from._internal_rule_name());
  }
  if (from._internal_has_attrs()) {
    _this->_internal_mutable_attrs()->::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs::MergeFrom(
        from._internal_attrs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityRuleInfo::CopyFrom(const SecurityRuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityRuleInfo::IsInitialized() const {
  return true;
}

void SecurityRuleInfo::InternalSwap(SecurityRuleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rule_name_, lhs_arena,
      &other->_impl_.rule_name_, rhs_arena
  );
  swap(_impl_.attrs_, other->_impl_.attrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityRuleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[2]);
}

// ===================================================================

class SecurityRuleAttrs::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch& match(const SecurityRuleAttrs* msg);
  static const ::opi_api::network::cloud::v1alpha1::ALGSpec& alg_spec(const SecurityRuleAttrs* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch&
SecurityRuleAttrs::_Internal::match(const SecurityRuleAttrs* msg) {
  return *msg->_impl_.match_;
}
const ::opi_api::network::cloud::v1alpha1::ALGSpec&
SecurityRuleAttrs::_Internal::alg_spec(const SecurityRuleAttrs* msg) {
  return *msg->_impl_.alg_spec_;
}
void SecurityRuleAttrs::clear_match() {
  if (GetArenaForAllocation() == nullptr && _impl_.match_ != nullptr) {
    delete _impl_.match_;
  }
  _impl_.match_ = nullptr;
}
SecurityRuleAttrs::SecurityRuleAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
}
SecurityRuleAttrs::SecurityRuleAttrs(const SecurityRuleAttrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityRuleAttrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_){nullptr}
    , decltype(_impl_.alg_spec_){nullptr}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.terminating_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match()) {
    _this->_impl_.match_ = new ::opi_api::network::opinetcommon::v1alpha1::RuleMatch(*from._impl_.match_);
  }
  if (from._internal_has_alg_spec()) {
    _this->_impl_.alg_spec_ = new ::opi_api::network::cloud::v1alpha1::ALGSpec(*from._impl_.alg_spec_);
  }
  ::memcpy(&_impl_.priority_, &from._impl_.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.terminating_) -
    reinterpret_cast<char*>(&_impl_.priority_)) + sizeof(_impl_.terminating_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
}

inline void SecurityRuleAttrs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_){nullptr}
    , decltype(_impl_.alg_spec_){nullptr}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.terminating_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SecurityRuleAttrs::~SecurityRuleAttrs() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityRuleAttrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.match_;
  if (this != internal_default_instance()) delete _impl_.alg_spec_;
}

void SecurityRuleAttrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityRuleAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.match_ != nullptr) {
    delete _impl_.match_;
  }
  _impl_.match_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.alg_spec_ != nullptr) {
    delete _impl_.alg_spec_;
  }
  _impl_.alg_spec_ = nullptr;
  ::memset(&_impl_.priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.terminating_) -
      reinterpret_cast<char*>(&_impl_.priority_)) + sizeof(_impl_.terminating_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityRuleAttrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RuleMatch match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction>(val));
        } else
          goto handle_unusual;
        continue;
      // bool terminating = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.terminating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.ALGSpec alg_spec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_alg_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityRuleAttrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 priority = 1;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_priority(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RuleMatch match = 2;
  if (this->_internal_has_match()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::match(this),
        _Internal::match(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // bool terminating = 4;
  if (this->_internal_terminating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_terminating(), target);
  }

  // .opi_api.network.cloud.v1alpha1.ALGSpec alg_spec = 5;
  if (this->_internal_has_alg_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::alg_spec(this),
        _Internal::alg_spec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  return target;
}

size_t SecurityRuleAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.RuleMatch match = 2;
  if (this->_internal_has_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.match_);
  }

  // .opi_api.network.cloud.v1alpha1.ALGSpec alg_spec = 5;
  if (this->_internal_has_alg_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alg_spec_);
  }

  // int32 priority = 1;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  // bool terminating = 4;
  if (this->_internal_terminating() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityRuleAttrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityRuleAttrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityRuleAttrs::GetClassData() const { return &_class_data_; }


void SecurityRuleAttrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityRuleAttrs*>(&to_msg);
  auto& from = static_cast<const SecurityRuleAttrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match()) {
    _this->_internal_mutable_match()->::opi_api::network::opinetcommon::v1alpha1::RuleMatch::MergeFrom(
        from._internal_match());
  }
  if (from._internal_has_alg_spec()) {
    _this->_internal_mutable_alg_spec()->::opi_api::network::cloud::v1alpha1::ALGSpec::MergeFrom(
        from._internal_alg_spec());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_terminating() != 0) {
    _this->_internal_set_terminating(from._internal_terminating());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityRuleAttrs::CopyFrom(const SecurityRuleAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityRuleAttrs::IsInitialized() const {
  return true;
}

void SecurityRuleAttrs::InternalSwap(SecurityRuleAttrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityRuleAttrs, _impl_.terminating_)
      + sizeof(SecurityRuleAttrs::_impl_.terminating_)
      - PROTOBUF_FIELD_OFFSET(SecurityRuleAttrs, _impl_.match_)>(
          reinterpret_cast<char*>(&_impl_.match_),
          reinterpret_cast<char*>(&other->_impl_.match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityRuleAttrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[3]);
}

// ===================================================================

class FTPOptions::_Internal {
 public:
};

FTPOptions::FTPOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.FTPOptions)
}
FTPOptions::FTPOptions(const FTPOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FTPOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allow_ip_mismatch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.allow_ip_mismatch_ = from._impl_.allow_ip_mismatch_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.FTPOptions)
}

inline void FTPOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allow_ip_mismatch_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FTPOptions::~FTPOptions() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.FTPOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FTPOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FTPOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FTPOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.FTPOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allow_ip_mismatch_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FTPOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool allow_ip_mismatch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.allow_ip_mismatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FTPOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.FTPOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_ip_mismatch = 1;
  if (this->_internal_allow_ip_mismatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_ip_mismatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.FTPOptions)
  return target;
}

size_t FTPOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.FTPOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_ip_mismatch = 1;
  if (this->_internal_allow_ip_mismatch() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FTPOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FTPOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FTPOptions::GetClassData() const { return &_class_data_; }


void FTPOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FTPOptions*>(&to_msg);
  auto& from = static_cast<const FTPOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.FTPOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_allow_ip_mismatch() != 0) {
    _this->_internal_set_allow_ip_mismatch(from._internal_allow_ip_mismatch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FTPOptions::CopyFrom(const FTPOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.FTPOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTPOptions::IsInitialized() const {
  return true;
}

void FTPOptions::InternalSwap(FTPOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.allow_ip_mismatch_, other->_impl_.allow_ip_mismatch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FTPOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[4]);
}

// ===================================================================

class DNSOptions::_Internal {
 public:
};

DNSOptions::DNSOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DNSOptions)
}
DNSOptions::DNSOptions(const DNSOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DNSOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_multi_query_messages_){}
    , decltype(_impl_.drop_large_domain_name_ref_){}
    , decltype(_impl_.drop_long_label_messages_){}
    , decltype(_impl_.drop_multi_zone_messages_){}
    , decltype(_impl_.response_timeout_){}
    , decltype(_impl_.max_message_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.drop_multi_query_messages_, &from._impl_.drop_multi_query_messages_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_message_length_) -
    reinterpret_cast<char*>(&_impl_.drop_multi_query_messages_)) + sizeof(_impl_.max_message_length_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DNSOptions)
}

inline void DNSOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drop_multi_query_messages_){false}
    , decltype(_impl_.drop_large_domain_name_ref_){false}
    , decltype(_impl_.drop_long_label_messages_){false}
    , decltype(_impl_.drop_multi_zone_messages_){false}
    , decltype(_impl_.response_timeout_){0}
    , decltype(_impl_.max_message_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DNSOptions::~DNSOptions() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DNSOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DNSOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DNSOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DNSOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DNSOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.drop_multi_query_messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_message_length_) -
      reinterpret_cast<char*>(&_impl_.drop_multi_query_messages_)) + sizeof(_impl_.max_message_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool drop_multi_query_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.drop_multi_query_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool drop_large_domain_name_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.drop_large_domain_name_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool drop_long_label_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.drop_long_label_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool drop_multi_zone_messages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.drop_multi_zone_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 response_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.response_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_message_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.max_message_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DNSOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DNSOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool drop_multi_query_messages = 1;
  if (this->_internal_drop_multi_query_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_drop_multi_query_messages(), target);
  }

  // bool drop_large_domain_name_ref = 2;
  if (this->_internal_drop_large_domain_name_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_drop_large_domain_name_ref(), target);
  }

  // bool drop_long_label_messages = 3;
  if (this->_internal_drop_long_label_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_drop_long_label_messages(), target);
  }

  // bool drop_multi_zone_messages = 4;
  if (this->_internal_drop_multi_zone_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_drop_multi_zone_messages(), target);
  }

  // int32 response_timeout = 5;
  if (this->_internal_response_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_response_timeout(), target);
  }

  // int32 max_message_length = 6;
  if (this->_internal_max_message_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_message_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DNSOptions)
  return target;
}

size_t DNSOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DNSOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool drop_multi_query_messages = 1;
  if (this->_internal_drop_multi_query_messages() != 0) {
    total_size += 1 + 1;
  }

  // bool drop_large_domain_name_ref = 2;
  if (this->_internal_drop_large_domain_name_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool drop_long_label_messages = 3;
  if (this->_internal_drop_long_label_messages() != 0) {
    total_size += 1 + 1;
  }

  // bool drop_multi_zone_messages = 4;
  if (this->_internal_drop_multi_zone_messages() != 0) {
    total_size += 1 + 1;
  }

  // int32 response_timeout = 5;
  if (this->_internal_response_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_timeout());
  }

  // int32 max_message_length = 6;
  if (this->_internal_max_message_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_message_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DNSOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DNSOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DNSOptions::GetClassData() const { return &_class_data_; }


void DNSOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DNSOptions*>(&to_msg);
  auto& from = static_cast<const DNSOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DNSOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_drop_multi_query_messages() != 0) {
    _this->_internal_set_drop_multi_query_messages(from._internal_drop_multi_query_messages());
  }
  if (from._internal_drop_large_domain_name_ref() != 0) {
    _this->_internal_set_drop_large_domain_name_ref(from._internal_drop_large_domain_name_ref());
  }
  if (from._internal_drop_long_label_messages() != 0) {
    _this->_internal_set_drop_long_label_messages(from._internal_drop_long_label_messages());
  }
  if (from._internal_drop_multi_zone_messages() != 0) {
    _this->_internal_set_drop_multi_zone_messages(from._internal_drop_multi_zone_messages());
  }
  if (from._internal_response_timeout() != 0) {
    _this->_internal_set_response_timeout(from._internal_response_timeout());
  }
  if (from._internal_max_message_length() != 0) {
    _this->_internal_set_max_message_length(from._internal_max_message_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DNSOptions::CopyFrom(const DNSOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DNSOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSOptions::IsInitialized() const {
  return true;
}

void DNSOptions::InternalSwap(DNSOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DNSOptions, _impl_.max_message_length_)
      + sizeof(DNSOptions::_impl_.max_message_length_)
      - PROTOBUF_FIELD_OFFSET(DNSOptions, _impl_.drop_multi_query_messages_)>(
          reinterpret_cast<char*>(&_impl_.drop_multi_query_messages_),
          reinterpret_cast<char*>(&other->_impl_.drop_multi_query_messages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[5]);
}

// ===================================================================

class MSRPCOptions::_Internal {
 public:
};

MSRPCOptions::MSRPCOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.MSRPCOptions)
}
MSRPCOptions::MSRPCOptions(const MSRPCOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MSRPCOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.program_id_){from._impl_.program_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.MSRPCOptions)
}

inline void MSRPCOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.program_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MSRPCOptions::~MSRPCOptions() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MSRPCOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.program_id_.~RepeatedPtrField();
}

void MSRPCOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MSRPCOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.program_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSRPCOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes program_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_program_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSRPCOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes program_id = 1;
  for (int i = 0, n = this->_internal_program_id_size(); i < n; i++) {
    const auto& s = this->_internal_program_id(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  return target;
}

size_t MSRPCOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes program_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.program_id_.size());
  for (int i = 0, n = _impl_.program_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.program_id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSRPCOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MSRPCOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSRPCOptions::GetClassData() const { return &_class_data_; }


void MSRPCOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MSRPCOptions*>(&to_msg);
  auto& from = static_cast<const MSRPCOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.program_id_.MergeFrom(from._impl_.program_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSRPCOptions::CopyFrom(const MSRPCOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.MSRPCOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSRPCOptions::IsInitialized() const {
  return true;
}

void MSRPCOptions::InternalSwap(MSRPCOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.program_id_.InternalSwap(&other->_impl_.program_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSRPCOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[6]);
}

// ===================================================================

class SunRPCOptions::_Internal {
 public:
};

SunRPCOptions::SunRPCOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SunRPCOptions)
}
SunRPCOptions::SunRPCOptions(const SunRPCOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SunRPCOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.program_id_){from._impl_.program_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SunRPCOptions)
}

inline void SunRPCOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.program_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SunRPCOptions::~SunRPCOptions() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SunRPCOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.program_id_.~RepeatedPtrField();
}

void SunRPCOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SunRPCOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.program_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SunRPCOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes program_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_program_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SunRPCOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes program_id = 1;
  for (int i = 0, n = this->_internal_program_id_size(); i < n; i++) {
    const auto& s = this->_internal_program_id(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  return target;
}

size_t SunRPCOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes program_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.program_id_.size());
  for (int i = 0, n = _impl_.program_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.program_id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SunRPCOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SunRPCOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SunRPCOptions::GetClassData() const { return &_class_data_; }


void SunRPCOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SunRPCOptions*>(&to_msg);
  auto& from = static_cast<const SunRPCOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.program_id_.MergeFrom(from._impl_.program_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SunRPCOptions::CopyFrom(const SunRPCOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SunRPCOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SunRPCOptions::IsInitialized() const {
  return true;
}

void SunRPCOptions::InternalSwap(SunRPCOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.program_id_.InternalSwap(&other->_impl_.program_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SunRPCOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[7]);
}

// ===================================================================

class ALGSpec::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::FTPOptions& ftp_options(const ALGSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::DNSOptions& dns_options(const ALGSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::MSRPCOptions& msrpc_options(const ALGSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::SunRPCOptions& sunrpc_options(const ALGSpec* msg);
};

const ::opi_api::network::cloud::v1alpha1::FTPOptions&
ALGSpec::_Internal::ftp_options(const ALGSpec* msg) {
  return *msg->_impl_.alg_options_.ftp_options_;
}
const ::opi_api::network::cloud::v1alpha1::DNSOptions&
ALGSpec::_Internal::dns_options(const ALGSpec* msg) {
  return *msg->_impl_.alg_options_.dns_options_;
}
const ::opi_api::network::cloud::v1alpha1::MSRPCOptions&
ALGSpec::_Internal::msrpc_options(const ALGSpec* msg) {
  return *msg->_impl_.alg_options_.msrpc_options_;
}
const ::opi_api::network::cloud::v1alpha1::SunRPCOptions&
ALGSpec::_Internal::sunrpc_options(const ALGSpec* msg) {
  return *msg->_impl_.alg_options_.sunrpc_options_;
}
void ALGSpec::set_allocated_ftp_options(::opi_api::network::cloud::v1alpha1::FTPOptions* ftp_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_alg_options();
  if (ftp_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ftp_options);
    if (message_arena != submessage_arena) {
      ftp_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftp_options, submessage_arena);
    }
    set_has_ftp_options();
    _impl_.alg_options_.ftp_options_ = ftp_options;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.ftp_options)
}
void ALGSpec::set_allocated_dns_options(::opi_api::network::cloud::v1alpha1::DNSOptions* dns_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_alg_options();
  if (dns_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dns_options);
    if (message_arena != submessage_arena) {
      dns_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_options, submessage_arena);
    }
    set_has_dns_options();
    _impl_.alg_options_.dns_options_ = dns_options;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.dns_options)
}
void ALGSpec::set_allocated_msrpc_options(::opi_api::network::cloud::v1alpha1::MSRPCOptions* msrpc_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_alg_options();
  if (msrpc_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msrpc_options);
    if (message_arena != submessage_arena) {
      msrpc_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msrpc_options, submessage_arena);
    }
    set_has_msrpc_options();
    _impl_.alg_options_.msrpc_options_ = msrpc_options;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.msrpc_options)
}
void ALGSpec::set_allocated_sunrpc_options(::opi_api::network::cloud::v1alpha1::SunRPCOptions* sunrpc_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_alg_options();
  if (sunrpc_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sunrpc_options);
    if (message_arena != submessage_arena) {
      sunrpc_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sunrpc_options, submessage_arena);
    }
    set_has_sunrpc_options();
    _impl_.alg_options_.sunrpc_options_ = sunrpc_options;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.sunrpc_options)
}
ALGSpec::ALGSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.ALGSpec)
}
ALGSpec::ALGSpec(const ALGSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ALGSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alg_type_){}
    , decltype(_impl_.idle_timeout_){}
    , decltype(_impl_.alg_options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.alg_type_, &from._impl_.alg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.idle_timeout_) -
    reinterpret_cast<char*>(&_impl_.alg_type_)) + sizeof(_impl_.idle_timeout_));
  clear_has_alg_options();
  switch (from.alg_options_case()) {
    case kFtpOptions: {
      _this->_internal_mutable_ftp_options()->::opi_api::network::cloud::v1alpha1::FTPOptions::MergeFrom(
          from._internal_ftp_options());
      break;
    }
    case kDnsOptions: {
      _this->_internal_mutable_dns_options()->::opi_api::network::cloud::v1alpha1::DNSOptions::MergeFrom(
          from._internal_dns_options());
      break;
    }
    case kMsrpcOptions: {
      _this->_internal_mutable_msrpc_options()->::opi_api::network::cloud::v1alpha1::MSRPCOptions::MergeFrom(
          from._internal_msrpc_options());
      break;
    }
    case kSunrpcOptions: {
      _this->_internal_mutable_sunrpc_options()->::opi_api::network::cloud::v1alpha1::SunRPCOptions::MergeFrom(
          from._internal_sunrpc_options());
      break;
    }
    case ALG_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.ALGSpec)
}

inline void ALGSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alg_type_){0}
    , decltype(_impl_.idle_timeout_){0}
    , decltype(_impl_.alg_options_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_alg_options();
}

ALGSpec::~ALGSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.ALGSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ALGSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_alg_options()) {
    clear_alg_options();
  }
}

void ALGSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ALGSpec::clear_alg_options() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.ALGSpec)
  switch (alg_options_case()) {
    case kFtpOptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.alg_options_.ftp_options_;
      }
      break;
    }
    case kDnsOptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.alg_options_.dns_options_;
      }
      break;
    }
    case kMsrpcOptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.alg_options_.msrpc_options_;
      }
      break;
    }
    case kSunrpcOptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.alg_options_.sunrpc_options_;
      }
      break;
    }
    case ALG_OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ALG_OPTIONS_NOT_SET;
}


void ALGSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.ALGSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.alg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.idle_timeout_) -
      reinterpret_cast<char*>(&_impl_.alg_type_)) + sizeof(_impl_.idle_timeout_));
  clear_alg_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ALGSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alg_type(static_cast<::opi_api::network::cloud::v1alpha1::ALGType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 idle_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.idle_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.FTPOptions ftp_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ftp_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DNSOptions dns_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MSRPCOptions msrpc_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msrpc_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SunRPCOptions sunrpc_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sunrpc_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ALGSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.ALGSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 1;
  if (this->_internal_alg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_alg_type(), target);
  }

  // int32 idle_timeout = 2;
  if (this->_internal_idle_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_idle_timeout(), target);
  }

  // .opi_api.network.cloud.v1alpha1.FTPOptions ftp_options = 3;
  if (_internal_has_ftp_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ftp_options(this),
        _Internal::ftp_options(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.DNSOptions dns_options = 4;
  if (_internal_has_dns_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dns_options(this),
        _Internal::dns_options(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.MSRPCOptions msrpc_options = 5;
  if (_internal_has_msrpc_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::msrpc_options(this),
        _Internal::msrpc_options(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.SunRPCOptions sunrpc_options = 6;
  if (_internal_has_sunrpc_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sunrpc_options(this),
        _Internal::sunrpc_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.ALGSpec)
  return target;
}

size_t ALGSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.ALGSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 1;
  if (this->_internal_alg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_alg_type());
  }

  // int32 idle_timeout = 2;
  if (this->_internal_idle_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idle_timeout());
  }

  switch (alg_options_case()) {
    // .opi_api.network.cloud.v1alpha1.FTPOptions ftp_options = 3;
    case kFtpOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.alg_options_.ftp_options_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.DNSOptions dns_options = 4;
    case kDnsOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.alg_options_.dns_options_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.MSRPCOptions msrpc_options = 5;
    case kMsrpcOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.alg_options_.msrpc_options_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.SunRPCOptions sunrpc_options = 6;
    case kSunrpcOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.alg_options_.sunrpc_options_);
      break;
    }
    case ALG_OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ALGSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ALGSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ALGSpec::GetClassData() const { return &_class_data_; }


void ALGSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ALGSpec*>(&to_msg);
  auto& from = static_cast<const ALGSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.ALGSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_alg_type() != 0) {
    _this->_internal_set_alg_type(from._internal_alg_type());
  }
  if (from._internal_idle_timeout() != 0) {
    _this->_internal_set_idle_timeout(from._internal_idle_timeout());
  }
  switch (from.alg_options_case()) {
    case kFtpOptions: {
      _this->_internal_mutable_ftp_options()->::opi_api::network::cloud::v1alpha1::FTPOptions::MergeFrom(
          from._internal_ftp_options());
      break;
    }
    case kDnsOptions: {
      _this->_internal_mutable_dns_options()->::opi_api::network::cloud::v1alpha1::DNSOptions::MergeFrom(
          from._internal_dns_options());
      break;
    }
    case kMsrpcOptions: {
      _this->_internal_mutable_msrpc_options()->::opi_api::network::cloud::v1alpha1::MSRPCOptions::MergeFrom(
          from._internal_msrpc_options());
      break;
    }
    case kSunrpcOptions: {
      _this->_internal_mutable_sunrpc_options()->::opi_api::network::cloud::v1alpha1::SunRPCOptions::MergeFrom(
          from._internal_sunrpc_options());
      break;
    }
    case ALG_OPTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ALGSpec::CopyFrom(const ALGSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.ALGSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ALGSpec::IsInitialized() const {
  return true;
}

void ALGSpec::InternalSwap(ALGSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ALGSpec, _impl_.idle_timeout_)
      + sizeof(ALGSpec::_impl_.idle_timeout_)
      - PROTOBUF_FIELD_OFFSET(ALGSpec, _impl_.alg_type_)>(
          reinterpret_cast<char*>(&_impl_.alg_type_),
          reinterpret_cast<char*>(&other->_impl_.alg_type_));
  swap(_impl_.alg_options_, other->_impl_.alg_options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ALGSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[8]);
}

// ===================================================================

class SecurityPolicyStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_pool_handle(const SecurityPolicyStatus* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const SecurityPolicyStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
SecurityPolicyStatus::_Internal::hw_pool_handle(const SecurityPolicyStatus* msg) {
  return *msg->_impl_.hw_pool_handle_;
}
const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
SecurityPolicyStatus::_Internal::hw_handle(const SecurityPolicyStatus* msg) {
  return *msg->_impl_.hw_handle_;
}
void SecurityPolicyStatus::clear_hw_pool_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_pool_handle_ != nullptr) {
    delete _impl_.hw_pool_handle_;
  }
  _impl_.hw_pool_handle_ = nullptr;
}
void SecurityPolicyStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
}
SecurityPolicyStatus::SecurityPolicyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
}
SecurityPolicyStatus::SecurityPolicyStatus(const SecurityPolicyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityPolicyStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_pool_handle_){nullptr}
    , decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.rule_count_){}
    , decltype(_impl_.vpc_count_){}
    , decltype(_impl_.subnet_count_){}
    , decltype(_impl_.vnic_count_){}
    , decltype(_impl_.policy_base_address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_pool_handle()) {
    _this->_impl_.hw_pool_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.hw_pool_handle_);
  }
  if (from._internal_has_hw_handle()) {
    _this->_impl_.hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.hw_handle_);
  }
  ::memcpy(&_impl_.rule_count_, &from._impl_.rule_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.policy_base_address_) -
    reinterpret_cast<char*>(&_impl_.rule_count_)) + sizeof(_impl_.policy_base_address_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
}

inline void SecurityPolicyStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hw_pool_handle_){nullptr}
    , decltype(_impl_.hw_handle_){nullptr}
    , decltype(_impl_.rule_count_){0}
    , decltype(_impl_.vpc_count_){0}
    , decltype(_impl_.subnet_count_){0}
    , decltype(_impl_.vnic_count_){0}
    , decltype(_impl_.policy_base_address_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SecurityPolicyStatus::~SecurityPolicyStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityPolicyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hw_pool_handle_;
  if (this != internal_default_instance()) delete _impl_.hw_handle_;
}

void SecurityPolicyStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityPolicyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hw_pool_handle_ != nullptr) {
    delete _impl_.hw_pool_handle_;
  }
  _impl_.hw_pool_handle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hw_handle_ != nullptr) {
    delete _impl_.hw_handle_;
  }
  _impl_.hw_handle_ = nullptr;
  ::memset(&_impl_.rule_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.policy_base_address_) -
      reinterpret_cast<char*>(&_impl_.rule_count_)) + sizeof(_impl_.policy_base_address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityPolicyStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rule_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rule_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vpc_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vpc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subnet_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.subnet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vnic_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vnic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_pool_handle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_pool_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 policy_base_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.policy_base_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityPolicyStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rule_count = 1;
  if (this->_internal_rule_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rule_count(), target);
  }

  // int32 vpc_count = 2;
  if (this->_internal_vpc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vpc_count(), target);
  }

  // int32 subnet_count = 3;
  if (this->_internal_subnet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_subnet_count(), target);
  }

  // int32 vnic_count = 4;
  if (this->_internal_vnic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_vnic_count(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_pool_handle = 5;
  if (this->_internal_has_hw_pool_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hw_pool_handle(this),
        _Internal::hw_pool_handle(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 6;
  if (this->_internal_has_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::hw_handle(this),
        _Internal::hw_handle(this).GetCachedSize(), target, stream);
  }

  // uint64 policy_base_address = 7;
  if (this->_internal_policy_base_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_policy_base_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  return target;
}

size_t SecurityPolicyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_pool_handle = 5;
  if (this->_internal_has_hw_pool_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_pool_handle_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 6;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_handle_);
  }

  // int32 rule_count = 1;
  if (this->_internal_rule_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rule_count());
  }

  // int32 vpc_count = 2;
  if (this->_internal_vpc_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vpc_count());
  }

  // int32 subnet_count = 3;
  if (this->_internal_subnet_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subnet_count());
  }

  // int32 vnic_count = 4;
  if (this->_internal_vnic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vnic_count());
  }

  // uint64 policy_base_address = 7;
  if (this->_internal_policy_base_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_policy_base_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityPolicyStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityPolicyStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityPolicyStatus::GetClassData() const { return &_class_data_; }


void SecurityPolicyStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityPolicyStatus*>(&to_msg);
  auto& from = static_cast<const SecurityPolicyStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hw_pool_handle()) {
    _this->_internal_mutable_hw_pool_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_hw_pool_handle());
  }
  if (from._internal_has_hw_handle()) {
    _this->_internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_hw_handle());
  }
  if (from._internal_rule_count() != 0) {
    _this->_internal_set_rule_count(from._internal_rule_count());
  }
  if (from._internal_vpc_count() != 0) {
    _this->_internal_set_vpc_count(from._internal_vpc_count());
  }
  if (from._internal_subnet_count() != 0) {
    _this->_internal_set_subnet_count(from._internal_subnet_count());
  }
  if (from._internal_vnic_count() != 0) {
    _this->_internal_set_vnic_count(from._internal_vnic_count());
  }
  if (from._internal_policy_base_address() != 0) {
    _this->_internal_set_policy_base_address(from._internal_policy_base_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityPolicyStatus::CopyFrom(const SecurityPolicyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityPolicyStatus::IsInitialized() const {
  return true;
}

void SecurityPolicyStatus::InternalSwap(SecurityPolicyStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityPolicyStatus, _impl_.policy_base_address_)
      + sizeof(SecurityPolicyStatus::_impl_.policy_base_address_)
      - PROTOBUF_FIELD_OFFSET(SecurityPolicyStatus, _impl_.hw_pool_handle_)>(
          reinterpret_cast<char*>(&_impl_.hw_pool_handle_),
          reinterpret_cast<char*>(&other->_impl_.hw_pool_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityPolicyStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[9]);
}

// ===================================================================

class SecurityRule::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec& spec(const SecurityRule* msg);
  static const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus& status(const SecurityRule* msg);
};

const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec&
SecurityRule::_Internal::spec(const SecurityRule* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus&
SecurityRule::_Internal::status(const SecurityRule* msg) {
  return *msg->_impl_.status_;
}
SecurityRule::SecurityRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityRule)
}
SecurityRule::SecurityRule(const SecurityRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityRule)
}

inline void SecurityRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityRule::~SecurityRule() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SecurityRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityRule::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityRule.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityRuleSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityRuleStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityRule.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityRule)
  return target;
}

size_t SecurityRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityRule::GetClassData() const { return &_class_data_; }


void SecurityRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityRule*>(&to_msg);
  auto& from = static_cast<const SecurityRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::SecurityRuleSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::SecurityRuleStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityRule::CopyFrom(const SecurityRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityRule::IsInitialized() const {
  return true;
}

void SecurityRule::InternalSwap(SecurityRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityRule, _impl_.status_)
      + sizeof(SecurityRule::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SecurityRule, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[10]);
}

// ===================================================================

class SecurityRuleSpec::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& attrs(const SecurityRuleSpec* msg);
};

const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs&
SecurityRuleSpec::_Internal::attrs(const SecurityRuleSpec* msg) {
  return *msg->_impl_.attrs_;
}
SecurityRuleSpec::SecurityRuleSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
}
SecurityRuleSpec::SecurityRuleSpec(const SecurityRuleSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityRuleSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.security_policy_name_ref_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.security_policy_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.security_policy_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_security_policy_name_ref().empty()) {
    _this->_impl_.security_policy_name_ref_.Set(from._internal_security_policy_name_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attrs()) {
    _this->_impl_.attrs_ = new ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs(*from._impl_.attrs_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
}

inline void SecurityRuleSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.security_policy_name_ref_){}
    , decltype(_impl_.attrs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.security_policy_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.security_policy_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityRuleSpec::~SecurityRuleSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityRuleSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.security_policy_name_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attrs_;
}

void SecurityRuleSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityRuleSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.security_policy_name_ref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attrs_ != nullptr) {
    delete _impl_.attrs_;
  }
  _impl_.attrs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityRuleSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string security_policy_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_security_policy_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityRuleSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string security_policy_name_ref = 1;
  if (!this->_internal_security_policy_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_policy_name_ref().data(), static_cast<int>(this->_internal_security_policy_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_security_policy_name_ref(), target);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attrs(this),
        _Internal::attrs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  return target;
}

size_t SecurityRuleSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string security_policy_name_ref = 1;
  if (!this->_internal_security_policy_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_policy_name_ref());
  }

  // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attrs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityRuleSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityRuleSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityRuleSpec::GetClassData() const { return &_class_data_; }


void SecurityRuleSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityRuleSpec*>(&to_msg);
  auto& from = static_cast<const SecurityRuleSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_security_policy_name_ref().empty()) {
    _this->_internal_set_security_policy_name_ref(from._internal_security_policy_name_ref());
  }
  if (from._internal_has_attrs()) {
    _this->_internal_mutable_attrs()->::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs::MergeFrom(
        from._internal_attrs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityRuleSpec::CopyFrom(const SecurityRuleSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityRuleSpec::IsInitialized() const {
  return true;
}

void SecurityRuleSpec::InternalSwap(SecurityRuleSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.security_policy_name_ref_, lhs_arena,
      &other->_impl_.security_policy_name_ref_, rhs_arena
  );
  swap(_impl_.attrs_, other->_impl_.attrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityRuleSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[11]);
}

// ===================================================================

class SecurityRuleStatus::_Internal {
 public:
};

SecurityRuleStatus::SecurityRuleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleStatus)
}
SecurityRuleStatus::SecurityRuleStatus(const SecurityRuleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SecurityRuleStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityRuleStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityRuleStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityRuleStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SecurityRuleStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[12]);
}

// ===================================================================

class SecurityProfile::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec& spec(const SecurityProfile* msg);
  static const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus& status(const SecurityProfile* msg);
};

const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec&
SecurityProfile::_Internal::spec(const SecurityProfile* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus&
SecurityProfile::_Internal::status(const SecurityProfile* msg) {
  return *msg->_impl_.status_;
}
SecurityProfile::SecurityProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityProfile)
}
SecurityProfile::SecurityProfile(const SecurityProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityProfile)
}

inline void SecurityProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityProfile::~SecurityProfile() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SecurityProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityProfile.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityProfileSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityProfileStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityProfile.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityProfileSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityProfileStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityProfile)
  return target;
}

size_t SecurityProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.SecurityProfileSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityProfileStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityProfile::GetClassData() const { return &_class_data_; }


void SecurityProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityProfile*>(&to_msg);
  auto& from = static_cast<const SecurityProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::SecurityProfileSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::SecurityProfileStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityProfile::CopyFrom(const SecurityProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityProfile::IsInitialized() const {
  return true;
}

void SecurityProfile::InternalSwap(SecurityProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityProfile, _impl_.status_)
      + sizeof(SecurityProfile::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SecurityProfile, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[13]);
}

// ===================================================================

class SecurityProfileSpec::_Internal {
 public:
};

SecurityProfileSpec::SecurityProfileSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
}
SecurityProfileSpec::SecurityProfileSpec(const SecurityProfileSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityProfileSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_tracking_enable_){}
    , decltype(_impl_.rule_stats_enable_){}
    , decltype(_impl_.default_firewall_action_){}
    , decltype(_impl_.tcp_idle_timeout_){}
    , decltype(_impl_.udp_idle_timeout_){}
    , decltype(_impl_.icmp_idle_timeout_){}
    , decltype(_impl_.other_idle_timeout_){}
    , decltype(_impl_.tcp_connection_setup_timeout_){}
    , decltype(_impl_.tcp_half_close_timeout_){}
    , decltype(_impl_.tcp_close_timeout_){}
    , decltype(_impl_.tcp_dorp_timeout_){}
    , decltype(_impl_.udp_drop_timeout_){}
    , decltype(_impl_.icmp_drop_timeout_){}
    , decltype(_impl_.other_drop_timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.connection_tracking_enable_, &from._impl_.connection_tracking_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.other_drop_timeout_) -
    reinterpret_cast<char*>(&_impl_.connection_tracking_enable_)) + sizeof(_impl_.other_drop_timeout_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
}

inline void SecurityProfileSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_tracking_enable_){false}
    , decltype(_impl_.rule_stats_enable_){false}
    , decltype(_impl_.default_firewall_action_){0}
    , decltype(_impl_.tcp_idle_timeout_){0}
    , decltype(_impl_.udp_idle_timeout_){0}
    , decltype(_impl_.icmp_idle_timeout_){0}
    , decltype(_impl_.other_idle_timeout_){0}
    , decltype(_impl_.tcp_connection_setup_timeout_){0}
    , decltype(_impl_.tcp_half_close_timeout_){0}
    , decltype(_impl_.tcp_close_timeout_){0}
    , decltype(_impl_.tcp_dorp_timeout_){0}
    , decltype(_impl_.udp_drop_timeout_){0}
    , decltype(_impl_.icmp_drop_timeout_){0}
    , decltype(_impl_.other_drop_timeout_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SecurityProfileSpec::~SecurityProfileSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityProfileSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SecurityProfileSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityProfileSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.connection_tracking_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.other_drop_timeout_) -
      reinterpret_cast<char*>(&_impl_.connection_tracking_enable_)) + sizeof(_impl_.other_drop_timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityProfileSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connection_tracking_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connection_tracking_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rule_stats_enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rule_stats_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_firewall_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_firewall_action(static_cast<::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 tcp_idle_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tcp_idle_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udp_idle_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.udp_idle_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 icmp_idle_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.icmp_idle_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 other_idle_timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.other_idle_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcp_connection_setup_timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tcp_connection_setup_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcp_half_close_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tcp_half_close_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcp_close_timeout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.tcp_close_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcp_dorp_timeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.tcp_dorp_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udp_drop_timeout = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.udp_drop_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 icmp_drop_timeout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.icmp_drop_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 other_drop_timeout = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.other_drop_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityProfileSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connection_tracking_enable = 1;
  if (this->_internal_connection_tracking_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_connection_tracking_enable(), target);
  }

  // bool rule_stats_enable = 2;
  if (this->_internal_rule_stats_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_rule_stats_enable(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_firewall_action = 3;
  if (this->_internal_default_firewall_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_default_firewall_action(), target);
  }

  // int32 tcp_idle_timeout = 4;
  if (this->_internal_tcp_idle_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tcp_idle_timeout(), target);
  }

  // int32 udp_idle_timeout = 5;
  if (this->_internal_udp_idle_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_udp_idle_timeout(), target);
  }

  // int32 icmp_idle_timeout = 6;
  if (this->_internal_icmp_idle_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_icmp_idle_timeout(), target);
  }

  // int32 other_idle_timeout = 7;
  if (this->_internal_other_idle_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_other_idle_timeout(), target);
  }

  // int32 tcp_connection_setup_timeout = 8;
  if (this->_internal_tcp_connection_setup_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tcp_connection_setup_timeout(), target);
  }

  // int32 tcp_half_close_timeout = 9;
  if (this->_internal_tcp_half_close_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_tcp_half_close_timeout(), target);
  }

  // int32 tcp_close_timeout = 10;
  if (this->_internal_tcp_close_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tcp_close_timeout(), target);
  }

  // int32 tcp_dorp_timeout = 11;
  if (this->_internal_tcp_dorp_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tcp_dorp_timeout(), target);
  }

  // int32 udp_drop_timeout = 12;
  if (this->_internal_udp_drop_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_udp_drop_timeout(), target);
  }

  // int32 icmp_drop_timeout = 13;
  if (this->_internal_icmp_drop_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_icmp_drop_timeout(), target);
  }

  // int32 other_drop_timeout = 14;
  if (this->_internal_other_drop_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_other_drop_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  return target;
}

size_t SecurityProfileSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connection_tracking_enable = 1;
  if (this->_internal_connection_tracking_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool rule_stats_enable = 2;
  if (this->_internal_rule_stats_enable() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_firewall_action = 3;
  if (this->_internal_default_firewall_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_default_firewall_action());
  }

  // int32 tcp_idle_timeout = 4;
  if (this->_internal_tcp_idle_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tcp_idle_timeout());
  }

  // int32 udp_idle_timeout = 5;
  if (this->_internal_udp_idle_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udp_idle_timeout());
  }

  // int32 icmp_idle_timeout = 6;
  if (this->_internal_icmp_idle_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icmp_idle_timeout());
  }

  // int32 other_idle_timeout = 7;
  if (this->_internal_other_idle_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_other_idle_timeout());
  }

  // int32 tcp_connection_setup_timeout = 8;
  if (this->_internal_tcp_connection_setup_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tcp_connection_setup_timeout());
  }

  // int32 tcp_half_close_timeout = 9;
  if (this->_internal_tcp_half_close_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tcp_half_close_timeout());
  }

  // int32 tcp_close_timeout = 10;
  if (this->_internal_tcp_close_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tcp_close_timeout());
  }

  // int32 tcp_dorp_timeout = 11;
  if (this->_internal_tcp_dorp_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tcp_dorp_timeout());
  }

  // int32 udp_drop_timeout = 12;
  if (this->_internal_udp_drop_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udp_drop_timeout());
  }

  // int32 icmp_drop_timeout = 13;
  if (this->_internal_icmp_drop_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icmp_drop_timeout());
  }

  // int32 other_drop_timeout = 14;
  if (this->_internal_other_drop_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_other_drop_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityProfileSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityProfileSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityProfileSpec::GetClassData() const { return &_class_data_; }


void SecurityProfileSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityProfileSpec*>(&to_msg);
  auto& from = static_cast<const SecurityProfileSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connection_tracking_enable() != 0) {
    _this->_internal_set_connection_tracking_enable(from._internal_connection_tracking_enable());
  }
  if (from._internal_rule_stats_enable() != 0) {
    _this->_internal_set_rule_stats_enable(from._internal_rule_stats_enable());
  }
  if (from._internal_default_firewall_action() != 0) {
    _this->_internal_set_default_firewall_action(from._internal_default_firewall_action());
  }
  if (from._internal_tcp_idle_timeout() != 0) {
    _this->_internal_set_tcp_idle_timeout(from._internal_tcp_idle_timeout());
  }
  if (from._internal_udp_idle_timeout() != 0) {
    _this->_internal_set_udp_idle_timeout(from._internal_udp_idle_timeout());
  }
  if (from._internal_icmp_idle_timeout() != 0) {
    _this->_internal_set_icmp_idle_timeout(from._internal_icmp_idle_timeout());
  }
  if (from._internal_other_idle_timeout() != 0) {
    _this->_internal_set_other_idle_timeout(from._internal_other_idle_timeout());
  }
  if (from._internal_tcp_connection_setup_timeout() != 0) {
    _this->_internal_set_tcp_connection_setup_timeout(from._internal_tcp_connection_setup_timeout());
  }
  if (from._internal_tcp_half_close_timeout() != 0) {
    _this->_internal_set_tcp_half_close_timeout(from._internal_tcp_half_close_timeout());
  }
  if (from._internal_tcp_close_timeout() != 0) {
    _this->_internal_set_tcp_close_timeout(from._internal_tcp_close_timeout());
  }
  if (from._internal_tcp_dorp_timeout() != 0) {
    _this->_internal_set_tcp_dorp_timeout(from._internal_tcp_dorp_timeout());
  }
  if (from._internal_udp_drop_timeout() != 0) {
    _this->_internal_set_udp_drop_timeout(from._internal_udp_drop_timeout());
  }
  if (from._internal_icmp_drop_timeout() != 0) {
    _this->_internal_set_icmp_drop_timeout(from._internal_icmp_drop_timeout());
  }
  if (from._internal_other_drop_timeout() != 0) {
    _this->_internal_set_other_drop_timeout(from._internal_other_drop_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityProfileSpec::CopyFrom(const SecurityProfileSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityProfileSpec::IsInitialized() const {
  return true;
}

void SecurityProfileSpec::InternalSwap(SecurityProfileSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityProfileSpec, _impl_.other_drop_timeout_)
      + sizeof(SecurityProfileSpec::_impl_.other_drop_timeout_)
      - PROTOBUF_FIELD_OFFSET(SecurityProfileSpec, _impl_.connection_tracking_enable_)>(
          reinterpret_cast<char*>(&_impl_.connection_tracking_enable_),
          reinterpret_cast<char*>(&other->_impl_.connection_tracking_enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityProfileSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[14]);
}

// ===================================================================

class SecurityProfileStatus::_Internal {
 public:
};

SecurityProfileStatus::SecurityProfileStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityProfileStatus)
}
SecurityProfileStatus::SecurityProfileStatus(const SecurityProfileStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SecurityProfileStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityProfileStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityProfileStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityProfileStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SecurityProfileStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[15]);
}

// ===================================================================

class PolicyLookupMatch::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& source_ip(const PolicyLookupMatch* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& destination_ip(const PolicyLookupMatch* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
PolicyLookupMatch::_Internal::source_ip(const PolicyLookupMatch* msg) {
  return *msg->_impl_.source_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
PolicyLookupMatch::_Internal::destination_ip(const PolicyLookupMatch* msg) {
  return *msg->_impl_.destination_ip_;
}
void PolicyLookupMatch::clear_source_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_ip_ != nullptr) {
    delete _impl_.source_ip_;
  }
  _impl_.source_ip_ = nullptr;
}
void PolicyLookupMatch::clear_destination_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ip_ != nullptr) {
    delete _impl_.destination_ip_;
  }
  _impl_.destination_ip_ = nullptr;
}
PolicyLookupMatch::PolicyLookupMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
}
PolicyLookupMatch::PolicyLookupMatch(const PolicyLookupMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PolicyLookupMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_tags_){from._impl_.source_tags_}
    , /*decltype(_impl_._source_tags_cached_byte_size_)*/{0}
    , decltype(_impl_.destination_tags_){from._impl_.destination_tags_}
    , /*decltype(_impl_._destination_tags_cached_byte_size_)*/{0}
    , decltype(_impl_.source_ip_){nullptr}
    , decltype(_impl_.destination_ip_){nullptr}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.source_port_){}
    , decltype(_impl_.destination_port_){}
    , decltype(_impl_.icmp_type_){}
    , decltype(_impl_.icmp_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_ip()) {
    _this->_impl_.source_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.source_ip_);
  }
  if (from._internal_has_destination_ip()) {
    _this->_impl_.destination_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from._impl_.destination_ip_);
  }
  ::memcpy(&_impl_.protocol_, &from._impl_.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.icmp_code_) -
    reinterpret_cast<char*>(&_impl_.protocol_)) + sizeof(_impl_.icmp_code_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
}

inline void PolicyLookupMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_tags_){arena}
    , /*decltype(_impl_._source_tags_cached_byte_size_)*/{0}
    , decltype(_impl_.destination_tags_){arena}
    , /*decltype(_impl_._destination_tags_cached_byte_size_)*/{0}
    , decltype(_impl_.source_ip_){nullptr}
    , decltype(_impl_.destination_ip_){nullptr}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.source_port_){0}
    , decltype(_impl_.destination_port_){0}
    , decltype(_impl_.icmp_type_){0}
    , decltype(_impl_.icmp_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PolicyLookupMatch::~PolicyLookupMatch() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolicyLookupMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_tags_.~RepeatedField();
  _impl_.destination_tags_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.source_ip_;
  if (this != internal_default_instance()) delete _impl_.destination_ip_;
}

void PolicyLookupMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolicyLookupMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_tags_.Clear();
  _impl_.destination_tags_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.source_ip_ != nullptr) {
    delete _impl_.source_ip_;
  }
  _impl_.source_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ip_ != nullptr) {
    delete _impl_.destination_ip_;
  }
  _impl_.destination_ip_ = nullptr;
  ::memset(&_impl_.protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.icmp_code_) -
      reinterpret_cast<char*>(&_impl_.protocol_)) + sizeof(_impl_.icmp_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyLookupMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress source_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 source_tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_source_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_source_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress destination_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 destination_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_destination_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_destination_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 source_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.source_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 destination_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.destination_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 icmp_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.icmp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 icmp_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.icmp_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyLookupMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress source_ip = 1;
  if (this->_internal_has_source_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_ip(this),
        _Internal::source_ip(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 source_tags = 2;
  {
    int byte_size = _impl_._source_tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_source_tags(), byte_size, target);
    }
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress destination_ip = 3;
  if (this->_internal_has_destination_ip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::destination_ip(this),
        _Internal::destination_ip(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 destination_tags = 4;
  {
    int byte_size = _impl_._destination_tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_destination_tags(), byte_size, target);
    }
  }

  // int32 protocol = 5;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_protocol(), target);
  }

  // int32 source_port = 6;
  if (this->_internal_source_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_source_port(), target);
  }

  // int32 destination_port = 7;
  if (this->_internal_destination_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_destination_port(), target);
  }

  // int32 icmp_type = 8;
  if (this->_internal_icmp_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_icmp_type(), target);
  }

  // int32 icmp_code = 9;
  if (this->_internal_icmp_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_icmp_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  return target;
}

size_t PolicyLookupMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 source_tags = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.source_tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._source_tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 destination_tags = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.destination_tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._destination_tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress source_ip = 1;
  if (this->_internal_has_source_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress destination_ip = 3;
  if (this->_internal_has_destination_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destination_ip_);
  }

  // int32 protocol = 5;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // int32 source_port = 6;
  if (this->_internal_source_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_port());
  }

  // int32 destination_port = 7;
  if (this->_internal_destination_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destination_port());
  }

  // int32 icmp_type = 8;
  if (this->_internal_icmp_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icmp_type());
  }

  // int32 icmp_code = 9;
  if (this->_internal_icmp_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icmp_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyLookupMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PolicyLookupMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyLookupMatch::GetClassData() const { return &_class_data_; }


void PolicyLookupMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PolicyLookupMatch*>(&to_msg);
  auto& from = static_cast<const PolicyLookupMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_tags_.MergeFrom(from._impl_.source_tags_);
  _this->_impl_.destination_tags_.MergeFrom(from._impl_.destination_tags_);
  if (from._internal_has_source_ip()) {
    _this->_internal_mutable_source_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_source_ip());
  }
  if (from._internal_has_destination_ip()) {
    _this->_internal_mutable_destination_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(
        from._internal_destination_ip());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_source_port() != 0) {
    _this->_internal_set_source_port(from._internal_source_port());
  }
  if (from._internal_destination_port() != 0) {
    _this->_internal_set_destination_port(from._internal_destination_port());
  }
  if (from._internal_icmp_type() != 0) {
    _this->_internal_set_icmp_type(from._internal_icmp_type());
  }
  if (from._internal_icmp_code() != 0) {
    _this->_internal_set_icmp_code(from._internal_icmp_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyLookupMatch::CopyFrom(const PolicyLookupMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyLookupMatch::IsInitialized() const {
  return true;
}

void PolicyLookupMatch::InternalSwap(PolicyLookupMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.source_tags_.InternalSwap(&other->_impl_.source_tags_);
  _impl_.destination_tags_.InternalSwap(&other->_impl_.destination_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyLookupMatch, _impl_.icmp_code_)
      + sizeof(PolicyLookupMatch::_impl_.icmp_code_)
      - PROTOBUF_FIELD_OFFSET(PolicyLookupMatch, _impl_.source_ip_)>(
          reinterpret_cast<char*>(&_impl_.source_ip_),
          reinterpret_cast<char*>(&other->_impl_.source_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyLookupMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[16]);
}

// ===================================================================

class SecurityPolicyLookupRequest_VnicLookupInfo::_Internal {
 public:
};

SecurityPolicyLookupRequest_VnicLookupInfo::SecurityPolicyLookupRequest_VnicLookupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
}
SecurityPolicyLookupRequest_VnicLookupInfo::SecurityPolicyLookupRequest_VnicLookupInfo(const SecurityPolicyLookupRequest_VnicLookupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityPolicyLookupRequest_VnicLookupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnic_name_ref_){}
    , decltype(_impl_.policy_direction_){}
    , decltype(_impl_.address_family_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vnic_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vnic_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vnic_name_ref().empty()) {
    _this->_impl_.vnic_name_ref_.Set(from._internal_vnic_name_ref(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.policy_direction_, &from._impl_.policy_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.address_family_) -
    reinterpret_cast<char*>(&_impl_.policy_direction_)) + sizeof(_impl_.address_family_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
}

inline void SecurityPolicyLookupRequest_VnicLookupInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnic_name_ref_){}
    , decltype(_impl_.policy_direction_){0}
    , decltype(_impl_.address_family_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vnic_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vnic_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityPolicyLookupRequest_VnicLookupInfo::~SecurityPolicyLookupRequest_VnicLookupInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityPolicyLookupRequest_VnicLookupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vnic_name_ref_.Destroy();
}

void SecurityPolicyLookupRequest_VnicLookupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityPolicyLookupRequest_VnicLookupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vnic_name_ref_.ClearToEmpty();
  ::memset(&_impl_.policy_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.address_family_) -
      reinterpret_cast<char*>(&_impl_.policy_direction_)) + sizeof(_impl_.address_family_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityPolicyLookupRequest_VnicLookupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vnic_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vnic_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.PolicyDir policy_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy_direction(static_cast<::opi_api::network::opinetcommon::v1alpha1::PolicyDir>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_address_family(static_cast<::opi_api::network::opinetcommon::v1alpha1::IpAf>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityPolicyLookupRequest_VnicLookupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vnic_name_ref = 1;
  if (!this->_internal_vnic_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vnic_name_ref().data(), static_cast<int>(this->_internal_vnic_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vnic_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.PolicyDir policy_direction = 2;
  if (this->_internal_policy_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_policy_direction(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
  if (this->_internal_address_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_address_family(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  return target;
}

size_t SecurityPolicyLookupRequest_VnicLookupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vnic_name_ref = 1;
  if (!this->_internal_vnic_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vnic_name_ref());
  }

  // .opi_api.network.opinetcommon.v1alpha1.PolicyDir policy_direction = 2;
  if (this->_internal_policy_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_policy_direction());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
  if (this->_internal_address_family() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_address_family());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityPolicyLookupRequest_VnicLookupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityPolicyLookupRequest_VnicLookupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityPolicyLookupRequest_VnicLookupInfo::GetClassData() const { return &_class_data_; }


void SecurityPolicyLookupRequest_VnicLookupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityPolicyLookupRequest_VnicLookupInfo*>(&to_msg);
  auto& from = static_cast<const SecurityPolicyLookupRequest_VnicLookupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vnic_name_ref().empty()) {
    _this->_internal_set_vnic_name_ref(from._internal_vnic_name_ref());
  }
  if (from._internal_policy_direction() != 0) {
    _this->_internal_set_policy_direction(from._internal_policy_direction());
  }
  if (from._internal_address_family() != 0) {
    _this->_internal_set_address_family(from._internal_address_family());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityPolicyLookupRequest_VnicLookupInfo::CopyFrom(const SecurityPolicyLookupRequest_VnicLookupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityPolicyLookupRequest_VnicLookupInfo::IsInitialized() const {
  return true;
}

void SecurityPolicyLookupRequest_VnicLookupInfo::InternalSwap(SecurityPolicyLookupRequest_VnicLookupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vnic_name_ref_, lhs_arena,
      &other->_impl_.vnic_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityPolicyLookupRequest_VnicLookupInfo, _impl_.address_family_)
      + sizeof(SecurityPolicyLookupRequest_VnicLookupInfo::_impl_.address_family_)
      - PROTOBUF_FIELD_OFFSET(SecurityPolicyLookupRequest_VnicLookupInfo, _impl_.policy_direction_)>(
          reinterpret_cast<char*>(&_impl_.policy_direction_),
          reinterpret_cast<char*>(&other->_impl_.policy_direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityPolicyLookupRequest_VnicLookupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[17]);
}

// ===================================================================

class SecurityPolicyLookupRequest::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo& vnic_lookup_info(const SecurityPolicyLookupRequest* msg);
  static const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch& match_fields(const SecurityPolicyLookupRequest* msg);
};

const ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo&
SecurityPolicyLookupRequest::_Internal::vnic_lookup_info(const SecurityPolicyLookupRequest* msg) {
  return *msg->_impl_.lookup_info_.vnic_lookup_info_;
}
const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch&
SecurityPolicyLookupRequest::_Internal::match_fields(const SecurityPolicyLookupRequest* msg) {
  return *msg->_impl_.match_fields_;
}
void SecurityPolicyLookupRequest::set_allocated_vnic_lookup_info(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* vnic_lookup_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_lookup_info();
  if (vnic_lookup_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vnic_lookup_info);
    if (message_arena != submessage_arena) {
      vnic_lookup_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnic_lookup_info, submessage_arena);
    }
    set_has_vnic_lookup_info();
    _impl_.lookup_info_.vnic_lookup_info_ = vnic_lookup_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.vnic_lookup_info)
}
SecurityPolicyLookupRequest::SecurityPolicyLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
}
SecurityPolicyLookupRequest::SecurityPolicyLookupRequest(const SecurityPolicyLookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecurityPolicyLookupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_fields_){nullptr}
    , decltype(_impl_.lookup_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_fields()) {
    _this->_impl_.match_fields_ = new ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch(*from._impl_.match_fields_);
  }
  clear_has_lookup_info();
  switch (from.lookup_info_case()) {
    case kPolicyNameRef: {
      _this->_internal_set_policy_name_ref(from._internal_policy_name_ref());
      break;
    }
    case kVnicLookupInfo: {
      _this->_internal_mutable_vnic_lookup_info()->::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo::MergeFrom(
          from._internal_vnic_lookup_info());
      break;
    }
    case LOOKUP_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
}

inline void SecurityPolicyLookupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_fields_){nullptr}
    , decltype(_impl_.lookup_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_lookup_info();
}

SecurityPolicyLookupRequest::~SecurityPolicyLookupRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityPolicyLookupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.match_fields_;
  if (has_lookup_info()) {
    clear_lookup_info();
  }
}

void SecurityPolicyLookupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecurityPolicyLookupRequest::clear_lookup_info() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  switch (lookup_info_case()) {
    case kPolicyNameRef: {
      _impl_.lookup_info_.policy_name_ref_.Destroy();
      break;
    }
    case kVnicLookupInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.lookup_info_.vnic_lookup_info_;
      }
      break;
    }
    case LOOKUP_INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOOKUP_INFO_NOT_SET;
}


void SecurityPolicyLookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.match_fields_ != nullptr) {
    delete _impl_.match_fields_;
  }
  _impl_.match_fields_ = nullptr;
  clear_lookup_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityPolicyLookupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string policy_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo vnic_lookup_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnic_lookup_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PolicyLookupMatch match_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityPolicyLookupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string policy_name_ref = 1;
  if (_internal_has_policy_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_name_ref().data(), static_cast<int>(this->_internal_policy_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_name_ref(), target);
  }

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo vnic_lookup_info = 2;
  if (_internal_has_vnic_lookup_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vnic_lookup_info(this),
        _Internal::vnic_lookup_info(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PolicyLookupMatch match_fields = 3;
  if (this->_internal_has_match_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::match_fields(this),
        _Internal::match_fields(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  return target;
}

size_t SecurityPolicyLookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.PolicyLookupMatch match_fields = 3;
  if (this->_internal_has_match_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.match_fields_);
  }

  switch (lookup_info_case()) {
    // string policy_name_ref = 1;
    case kPolicyNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy_name_ref());
      break;
    }
    // .opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo vnic_lookup_info = 2;
    case kVnicLookupInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lookup_info_.vnic_lookup_info_);
      break;
    }
    case LOOKUP_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityPolicyLookupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecurityPolicyLookupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityPolicyLookupRequest::GetClassData() const { return &_class_data_; }


void SecurityPolicyLookupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecurityPolicyLookupRequest*>(&to_msg);
  auto& from = static_cast<const SecurityPolicyLookupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_fields()) {
    _this->_internal_mutable_match_fields()->::opi_api::network::cloud::v1alpha1::PolicyLookupMatch::MergeFrom(
        from._internal_match_fields());
  }
  switch (from.lookup_info_case()) {
    case kPolicyNameRef: {
      _this->_internal_set_policy_name_ref(from._internal_policy_name_ref());
      break;
    }
    case kVnicLookupInfo: {
      _this->_internal_mutable_vnic_lookup_info()->::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo::MergeFrom(
          from._internal_vnic_lookup_info());
      break;
    }
    case LOOKUP_INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityPolicyLookupRequest::CopyFrom(const SecurityPolicyLookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityPolicyLookupRequest::IsInitialized() const {
  return true;
}

void SecurityPolicyLookupRequest::InternalSwap(SecurityPolicyLookupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.match_fields_, other->_impl_.match_fields_);
  swap(_impl_.lookup_info_, other->_impl_.lookup_info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityPolicyLookupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[18]);
}

// ===================================================================

class PolicyLookupResult::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& rule_hw_handle(const PolicyLookupResult* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
PolicyLookupResult::_Internal::rule_hw_handle(const PolicyLookupResult* msg) {
  return *msg->_impl_.rule_hw_handle_;
}
void PolicyLookupResult::clear_rule_hw_handle() {
  if (GetArenaForAllocation() == nullptr && _impl_.rule_hw_handle_ != nullptr) {
    delete _impl_.rule_hw_handle_;
  }
  _impl_.rule_hw_handle_ = nullptr;
}
PolicyLookupResult::PolicyLookupResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
}
PolicyLookupResult::PolicyLookupResult(const PolicyLookupResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PolicyLookupResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_hw_handle_){nullptr}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.alg_type_){}
    , decltype(_impl_.terminating_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rule_hw_handle()) {
    _this->_impl_.rule_hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from._impl_.rule_hw_handle_);
  }
  ::memcpy(&_impl_.priority_, &from._impl_.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.terminating_) -
    reinterpret_cast<char*>(&_impl_.priority_)) + sizeof(_impl_.terminating_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
}

inline void PolicyLookupResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_hw_handle_){nullptr}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.alg_type_){0}
    , decltype(_impl_.terminating_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PolicyLookupResult::~PolicyLookupResult() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolicyLookupResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rule_hw_handle_;
}

void PolicyLookupResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolicyLookupResult::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rule_hw_handle_ != nullptr) {
    delete _impl_.rule_hw_handle_;
  }
  _impl_.rule_hw_handle_ = nullptr;
  ::memset(&_impl_.priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.terminating_) -
      reinterpret_cast<char*>(&_impl_.priority_)) + sizeof(_impl_.terminating_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyLookupResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle rule_hw_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alg_type(static_cast<::opi_api::network::cloud::v1alpha1::ALGType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool terminating = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.terminating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyLookupResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle rule_hw_handle = 1;
  if (this->_internal_has_rule_hw_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rule_hw_handle(this),
        _Internal::rule_hw_handle(this).GetCachedSize(), target, stream);
  }

  // int32 priority = 2;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_priority(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 4;
  if (this->_internal_alg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_alg_type(), target);
  }

  // bool terminating = 5;
  if (this->_internal_terminating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_terminating(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  return target;
}

size_t PolicyLookupResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle rule_hw_handle = 1;
  if (this->_internal_has_rule_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rule_hw_handle_);
  }

  // int32 priority = 2;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 4;
  if (this->_internal_alg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_alg_type());
  }

  // bool terminating = 5;
  if (this->_internal_terminating() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyLookupResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PolicyLookupResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyLookupResult::GetClassData() const { return &_class_data_; }


void PolicyLookupResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PolicyLookupResult*>(&to_msg);
  auto& from = static_cast<const PolicyLookupResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rule_hw_handle()) {
    _this->_internal_mutable_rule_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(
        from._internal_rule_hw_handle());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_alg_type() != 0) {
    _this->_internal_set_alg_type(from._internal_alg_type());
  }
  if (from._internal_terminating() != 0) {
    _this->_internal_set_terminating(from._internal_terminating());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyLookupResult::CopyFrom(const PolicyLookupResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyLookupResult::IsInitialized() const {
  return true;
}

void PolicyLookupResult::InternalSwap(PolicyLookupResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyLookupResult, _impl_.terminating_)
      + sizeof(PolicyLookupResult::_impl_.terminating_)
      - PROTOBUF_FIELD_OFFSET(PolicyLookupResult, _impl_.rule_hw_handle_)>(
          reinterpret_cast<char*>(&_impl_.rule_hw_handle_),
          reinterpret_cast<char*>(&other->_impl_.rule_hw_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyLookupResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkpolicy_2eproto_getter, &descriptor_table_networkpolicy_2eproto_once,
      file_level_metadata_networkpolicy_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityPolicy*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::FTPOptions*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::FTPOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::FTPOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DNSOptions*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DNSOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DNSOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::MSRPCOptions*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MSRPCOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::MSRPCOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SunRPCOptions*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SunRPCOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SunRPCOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::ALGSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::ALGSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::ALGSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityRule*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityRule >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityProfile*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PolicyLookupResult*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PolicyLookupResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PolicyLookupResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
