// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: port.proto

#include "port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR Port::Port(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortDefaultTypeInternal() {}
  union {
    Port _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortDefaultTypeInternal _Port_default_instance_;
PROTOBUF_CONSTEXPR PortSpec::PortSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_number_)*/0
  , /*decltype(_impl_.admin_state_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.fec_type_)*/0
  , /*decltype(_impl_.debounce_timeout_)*/0
  , /*decltype(_impl_.mtu_)*/0
  , /*decltype(_impl_.pause_type_)*/0
  , /*decltype(_impl_.autoneg_enable_)*/false
  , /*decltype(_impl_.tx_pause_en_)*/false
  , /*decltype(_impl_.rx_pause_en_)*/false
  , /*decltype(_impl_.loopback_mode_)*/0
  , /*decltype(_impl_.lanes_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortSpecDefaultTypeInternal() {}
  union {
    PortSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortSpecDefaultTypeInternal _PortSpec_default_instance_;
PROTOBUF_CONSTEXPR PortStatus::PortStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fsm_record_)*/{}
  , /*decltype(_impl_.link_status_)*/nullptr
  , /*decltype(_impl_.xcvr_status_)*/nullptr
  , /*decltype(_impl_.if_index_)*/0u
  , /*decltype(_impl_.fsm_state_)*/0
  , /*decltype(_impl_.mac_id_)*/0
  , /*decltype(_impl_.mac_ch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortStatusDefaultTypeInternal() {}
  union {
    PortStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortStatusDefaultTypeInternal _PortStatus_default_instance_;
PROTOBUF_CONSTEXPR PortLinkStatus::PortLinkStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oper_state_)*/0
  , /*decltype(_impl_.port_speed_)*/0
  , /*decltype(_impl_.autoneg_en_)*/false
  , /*decltype(_impl_.lanes_count_)*/0
  , /*decltype(_impl_.fec_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortLinkStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortLinkStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortLinkStatusDefaultTypeInternal() {}
  union {
    PortLinkStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortLinkStatusDefaultTypeInternal _PortLinkStatus_default_instance_;
PROTOBUF_CONSTEXPR PortXcvrStatus::PortXcvrStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xcvr_sprom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_oui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.media_type_)*/0
  , /*decltype(_impl_.encoding_type_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.warn_temperature_)*/0
  , /*decltype(_impl_.alarm_temperature_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortXcvrStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortXcvrStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortXcvrStatusDefaultTypeInternal() {}
  union {
    PortXcvrStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortXcvrStatusDefaultTypeInternal _PortXcvrStatus_default_instance_;
PROTOBUF_CONSTEXPR PortLinkFSMRecord::PortLinkFSMRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duration_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_time_)*/nullptr
  , /*decltype(_impl_.fsm_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortLinkFSMRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortLinkFSMRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortLinkFSMRecordDefaultTypeInternal() {}
  union {
    PortLinkFSMRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortLinkFSMRecordDefaultTypeInternal _PortLinkFSMRecord_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_port_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_port_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_port_2eproto = nullptr;

const uint32_t TableStruct_port_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Port, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Port, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Port, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.port_number_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.admin_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.fec_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.autoneg_enable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.debounce_timeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.pause_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.tx_pause_en_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.rx_pause_en_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortSpec, _impl_.lanes_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.if_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.link_status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.xcvr_status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.fsm_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.mac_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.mac_ch_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortStatus, _impl_.fsm_record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkStatus, _impl_.oper_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkStatus, _impl_.port_speed_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkStatus, _impl_.autoneg_en_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkStatus, _impl_.lanes_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkStatus, _impl_.fec_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.media_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.xcvr_sprom_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.vendorname_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.vendor_oui_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.encoding_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.part_number_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.revision_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.warn_temperature_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortXcvrStatus, _impl_.alarm_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord, _impl_.fsm_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord, _impl_.state_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord, _impl_.duration_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Port)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PortSpec)},
  { 28, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PortStatus)},
  { 41, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PortLinkStatus)},
  { 52, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PortXcvrStatus)},
  { 72, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::network::cloud::v1alpha1::_Port_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PortSpec_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PortStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PortLinkStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PortXcvrStatus_default_instance_._instance,
  &::opi_api::network::cloud::v1alpha1::_PortLinkFSMRecord_default_instance_._instance,
};

const char descriptor_table_protodef_port_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nport.proto\022\036opi_api.network.cloud.v1al"
  "pha1\032\037google/protobuf/timestamp.proto\032\031g"
  "oogle/api/resource.proto\"\300\001\n\004Port\022\014\n\004nam"
  "e\030\001 \001(\t\0226\n\004spec\030\002 \001(\0132(.opi_api.network."
  "cloud.v1alpha1.PortSpec\022:\n\006status\030\003 \001(\0132"
  "*.opi_api.network.cloud.v1alpha1.PortSta"
  "tus:6\352A3\n#opi_api.network.cloud.v1alpha1"
  "/port\022\014ports/{port}\"\237\004\n\010PortSpec\022\023\n\013port"
  "_number\030\001 \001(\005\022C\n\013admin_state\030\002 \001(\0162..opi"
  "_api.network.cloud.v1alpha1.PortAdminSta"
  "te\0226\n\004type\030\003 \001(\0162(.opi_api.network.cloud"
  ".v1alpha1.PortType\0228\n\005speed\030\004 \001(\0162).opi_"
  "api.network.cloud.v1alpha1.PortSpeed\022=\n\010"
  "fec_type\030\005 \001(\0162+.opi_api.network.cloud.v"
  "1alpha1.PortFecType\022\026\n\016autoneg_enable\030\006 "
  "\001(\010\022\030\n\020debounce_timeout\030\007 \001(\005\022\013\n\003mtu\030\010 \001"
  "(\005\022A\n\npause_type\030\t \001(\0162-.opi_api.network"
  ".cloud.v1alpha1.PortPauseType\022\023\n\013tx_paus"
  "e_en\030\n \001(\010\022\023\n\013rx_pause_en\030\013 \001(\010\022G\n\rloopb"
  "ack_mode\030\014 \001(\01620.opi_api.network.cloud.v"
  "1alpha1.PortLoopBackMode\022\023\n\013lanes_count\030"
  "\r \001(\005\"\317\002\n\nPortStatus\022\020\n\010if_index\030\001 \001(\r\022C"
  "\n\013link_status\030\002 \001(\0132..opi_api.network.cl"
  "oud.v1alpha1.PortLinkStatus\022C\n\013xcvr_stat"
  "us\030\003 \001(\0132..opi_api.network.cloud.v1alpha"
  "1.PortXcvrStatus\022>\n\tfsm_state\030\004 \001(\0162+.op"
  "i_api.network.cloud.v1alpha1.PortLinkFSM"
  "\022\016\n\006mac_id\030\005 \001(\005\022\016\n\006mac_ch\030\006 \001(\005\022E\n\nfsm_"
  "record\030\007 \003(\01321.opi_api.network.cloud.v1a"
  "lpha1.PortLinkFSMRecord\"\372\001\n\016PortLinkStat"
  "us\022A\n\noper_state\030\001 \001(\0162-.opi_api.network"
  ".cloud.v1alpha1.PortOperState\022=\n\nport_sp"
  "eed\030\002 \001(\0162).opi_api.network.cloud.v1alph"
  "a1.PortSpeed\022\022\n\nautoneg_en\030\003 \001(\010\022\023\n\013lane"
  "s_count\030\004 \001(\005\022=\n\010fec_type\030\005 \001(\0162+.opi_ap"
  "i.network.cloud.v1alpha1.PortFecType\"\260\003\n"
  "\016PortXcvrStatus\022\014\n\004port\030\001 \001(\005\022<\n\005state\030\002"
  " \001(\0162-.opi_api.network.cloud.v1alpha1.Po"
  "rtXcvrState\0228\n\003pid\030\003 \001(\0162+.opi_api.netwo"
  "rk.cloud.v1alpha1.PortXcvrPid\022=\n\nmedia_t"
  "ype\030\004 \001(\0162).opi_api.network.cloud.v1alph"
  "a1.MediaType\022\022\n\nxcvr_sprom\030\005 \001(\014\022\022\n\nvend"
  "orname\030\006 \001(\t\022\022\n\nvendor_oui\030\007 \001(\t\022\025\n\renco"
  "ding_type\030\010 \001(\005\022\025\n\rserial_number\030\t \001(\t\022\023"
  "\n\013part_number\030\n \001(\t\022\020\n\010revision\030\013 \001(\t\022\023\n"
  "\013temperature\030\014 \001(\005\022\030\n\020warn_temperature\030\r"
  " \001(\005\022\031\n\021alarm_temperature\030\016 \001(\005\"\225\001\n\021Port"
  "LinkFSMRecord\022>\n\tfsm_state\030\001 \001(\0162+.opi_a"
  "pi.network.cloud.v1alpha1.PortLinkFSM\022.\n"
  "\nstate_time\030\002 \001(\0132\032.google.protobuf.Time"
  "stamp\022\020\n\010duration\030\003 \001(\t*f\n\016PortAdminStat"
  "e\022 \n\034PORT_ADMIN_STATE_UNSPECIFIED\020\000\022\031\n\025P"
  "ORT_ADMIN_STATE_DOWN\020\001\022\027\n\023PORT_ADMIN_STA"
  "TE_UP\020\002*\257\001\n\rPortXcvrState\022\037\n\033PORT_XCVR_S"
  "TATE_UNSPECIFIED\020\000\022\034\n\030PORT_XCVR_STATE_IN"
  "SERTED\020\001\022\033\n\027PORT_XCVR_STATE_PENDING\020\002\022\036\n"
  "\032PORT_XCVR_STATE_SPROM_READ\020\003\022\"\n\036PORT_XC"
  "VR_STATE_SPROM_READ_ERR\020\004*\370\010\n\013PortXcvrPi"
  "d\022\035\n\031PORT_XCVR_PID_UNSPECIFIED\020\000\022\037\n\033PORT"
  "_XCVR_PID_QSFP_100G_CR4\020\001\022\"\n\036PORT_XCVR_P"
  "ID_QSFP_40GBASE_CR4\020\002\022\"\n\036PORT_XCVR_PID_S"
  "FP_25GBASE_CR_S\020\003\022\"\n\036PORT_XCVR_PID_SFP_2"
  "5GBASE_CR_L\020\004\022\"\n\036PORT_XCVR_PID_SFP_25GBA"
  "SE_CR_N\020\005\022!\n\035PORT_XCVR_PID_QSFP_50G_CR2_"
  "FC\020\006\022\036\n\032PORT_XCVR_PID_QSFP_50G_CR2\020\007\022\037\n\033"
  "PORT_XCVR_PID_QSFP_200G_CR4\020\010\022\037\n\033PORT_XC"
  "VR_PID_QSFP_100G_AOC\0202\022\037\n\033PORT_XCVR_PID_"
  "QSFP_100G_ACC\0203\022\037\n\033PORT_XCVR_PID_QSFP_10"
  "0G_SR4\0204\022\037\n\033PORT_XCVR_PID_QSFP_100G_LR4\020"
  "5\022\037\n\033PORT_XCVR_PID_QSFP_100G_ER4\0206\022\"\n\036PO"
  "RT_XCVR_PID_QSFP_40GBASE_ER4\0207\022\"\n\036PORT_X"
  "CVR_PID_QSFP_40GBASE_SR4\0208\022\"\n\036PORT_XCVR_"
  "PID_QSFP_40GBASE_LR4\0209\022\"\n\036PORT_XCVR_PID_"
  "QSFP_40GBASE_AOC\020:\022 \n\034PORT_XCVR_PID_SFP_"
  "25GBASE_SR\020;\022 \n\034PORT_XCVR_PID_SFP_25GBAS"
  "E_LR\020<\022 \n\034PORT_XCVR_PID_SFP_25GBASE_ER\020="
  "\022!\n\035PORT_XCVR_PID_SFP_25GBASE_AOC\020>\022 \n\034P"
  "ORT_XCVR_PID_SFP_10GBASE_SR\020\?\022 \n\034PORT_XC"
  "VR_PID_SFP_10GBASE_LR\020@\022!\n\035PORT_XCVR_PID"
  "_SFP_10GBASE_LRM\020A\022 \n\034PORT_XCVR_PID_SFP_"
  "10GBASE_ER\020B\022!\n\035PORT_XCVR_PID_SFP_10GBAS"
  "E_AOC\020C\022 \n\034PORT_XCVR_PID_SFP_10GBASE_CU\020"
  "D\022!\n\035PORT_XCVR_PID_QSFP_100G_CWDM4\020E\022 \n\034"
  "PORT_XCVR_PID_QSFP_100G_PSM4\020F\022!\n\035PORT_X"
  "CVR_PID_SFP_25GBASE_ACC\020G\022\037\n\033PORT_XCVR_P"
  "ID_SFP_10GBASE_T\020H\022 \n\034PORT_XCVR_PID_SFP_"
  "1000BASE_T\020I*T\n\tMediaType\022\032\n\026MEDIA_TYPE_"
  "UNSPECIFIED\020\000\022\025\n\021MEDIA_TYPE_COPPER\020\001\022\024\n\020"
  "MEDIA_TYPE_FIBER\020\002*b\n\rPortOperState\022\037\n\033P"
  "ORT_OPER_STATE_UNSPECIFIED\020\000\022\026\n\022PORT_OPE"
  "R_STATE_UP\020\001\022\030\n\024PORT_OPER_STATE_DOWN\020\002*c"
  "\n\rPortPauseType\022\037\n\033PORT_PAUSE_TYPE_UNSPE"
  "CIFIED\020\000\022\030\n\024PORT_PAUSE_TYPE_LINK\020\001\022\027\n\023PO"
  "RT_PAUSE_TYPE_PFC\020\002*\266\006\n\013PortLinkFSM\022\035\n\031P"
  "ORT_LINK_FSM_UNSPECIFIED\020\000\022\031\n\025PORT_LINK_"
  "FSM_ENABLED\020\001\022\030\n\024PORT_LINK_FSM_AN_CFG\020\002\022"
  "\035\n\031PORT_LINK_FSM_AN_DISABLED\020\003\022\032\n\026PORT_L"
  "INK_FSM_AN_START\020\004\022\"\n\036PORT_LINK_FSM_AN_S"
  "IGNAL_DETECT\020\005\022\035\n\031PORT_LINK_FSM_AN_WAIT_"
  "HCD\020\006\022\035\n\031PORT_LINK_FSM_AN_COMPLETE\020\007\022\034\n\030"
  "PORT_LINK_FSM_SERDES_CFG\020\010\022!\n\035PORT_LINK_"
  "FSM_WAIT_SERDES_RDY\020\t\022\031\n\025PORT_LINK_FSM_M"
  "AC_CFG\020\n\022\037\n\033PORT_LINK_FSM_SIGNAL_DETECT\020"
  "\013\022\037\n\033PORT_LINK_FSM_AN_DFE_TUNING\020\014\022\034\n\030PO"
  "RT_LINK_FSM_DFE_TUNING\020\r\022\036\n\032PORT_LINK_FS"
  "M_DFE_DISABLED\020\016\022 \n\034PORT_LINK_FSM_DFE_ST"
  "ART_ICAL\020\017\022\037\n\033PORT_LINK_FSM_DFE_WAIT_ICA"
  "L\020\020\022 \n\034PORT_LINK_FSM_DFE_START_PCAL\020\021\022\037\n"
  "\033PORT_LINK_FSM_DFE_WAIT_PCAL\020\022\022%\n!PORT_L"
  "INK_FSM_DFE_PCAL_CONTINUOUS\020\023\022)\n%PORT_LI"
  "NK_FSM_CLEAR_MAC_REMOTE_FAULTS\020\024\022\037\n\033PORT"
  "_LINK_FSM_WAIT_MAC_SYNC\020\025\022\'\n#PORT_LINK_F"
  "SM_WAIT_MAC_FAULTS_CLEAR\020\026\022\"\n\036PORT_LINK_"
  "FSM_WAIT_PHY_LINK_UP\020\027\022\024\n\020PORT_LINK_FSM_"
  "UP\020\030*q\n\020PortLoopBackMode\022#\n\037PORT_LOOP_BA"
  "CK_MODE_UNSPECIFIED\020\000\022\033\n\027PORT_LOOP_BACK_"
  "MODE_MAC\020\001\022\033\n\027PORT_LOOP_BACK_MODE_PHY\020\002*"
  "X\n\013PortFecType\022\035\n\031PORT_FEC_TYPE_UNSPECIF"
  "IED\020\000\022\024\n\020PORT_FEC_TYPE_FC\020\001\022\024\n\020PORT_FEC_"
  "TYPE_RS\020\002*P\n\010PortType\022\031\n\025PORT_TYPE_UNSPE"
  "CIFIED\020\000\022\021\n\rPORT_TYPE_ETH\020\001\022\026\n\022PORT_TYPE"
  "_ETH_MGMT\020\002*\362\001\n\tPortSpeed\022\032\n\026PORT_SPEED_"
  "UNSPECIFIED\020\000\022\022\n\016PORT_SPEED_10M\020\001\022\023\n\017POR"
  "T_SPEED_100M\020\002\022\021\n\rPORT_SPEED_1G\020\003\022\022\n\016POR"
  "T_SPEED_10G\020\004\022\022\n\016PORT_SPEED_25G\020\005\022\022\n\016POR"
  "T_SPEED_40G\020\006\022\022\n\016PORT_SPEED_50G\020\007\022\023\n\017POR"
  "T_SPEED_100G\020\010\022\023\n\017PORT_SPEED_200G\020\t\022\023\n\017P"
  "ORT_SPEED_400G\020\nBj\n\036opi_api.network.clou"
  "d.v1alpha1B\tPortProtoP\001Z;github.com/opip"
  "roject/opi-api/network/cloud/v1alpha1/ge"
  "n/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_port_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_port_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_port_2eproto = {
    false, false, 5212, descriptor_table_protodef_port_2eproto,
    "port.proto",
    &descriptor_table_port_2eproto_once, descriptor_table_port_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_port_2eproto::offsets,
    file_level_metadata_port_2eproto, file_level_enum_descriptors_port_2eproto,
    file_level_service_descriptors_port_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_port_2eproto_getter() {
  return &descriptor_table_port_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_port_2eproto(&descriptor_table_port_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortAdminState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[0];
}
bool PortAdminState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortXcvrState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[1];
}
bool PortXcvrState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortXcvrPid_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[2];
}
bool PortXcvrPid_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[3];
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortOperState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[4];
}
bool PortOperState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortPauseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[5];
}
bool PortPauseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortLinkFSM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[6];
}
bool PortLinkFSM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortLoopBackMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[7];
}
bool PortLoopBackMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortFecType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[8];
}
bool PortFecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[9];
}
bool PortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortSpeed_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_port_2eproto);
  return file_level_enum_descriptors_port_2eproto[10];
}
bool PortSpeed_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Port::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::PortSpec& spec(const Port* msg);
  static const ::opi_api::network::cloud::v1alpha1::PortStatus& status(const Port* msg);
};

const ::opi_api::network::cloud::v1alpha1::PortSpec&
Port::_Internal::spec(const Port* msg) {
  return *msg->_impl_.spec_;
}
const ::opi_api::network::cloud::v1alpha1::PortStatus&
Port::_Internal::status(const Port* msg) {
  return *msg->_impl_.status_;
}
Port::Port(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Port)
}
Port::Port(const Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Port* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::opi_api::network::cloud::v1alpha1::PortSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::opi_api::network::cloud::v1alpha1::PortStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Port)
}

inline void Port::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Port)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Port::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Port::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Port)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Port::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.Port.name"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Port::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Port)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.Port.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PortStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Port)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.PortSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .opi_api.network.cloud.v1alpha1.PortStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Port::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Port::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Port::GetClassData() const { return &_class_data_; }


void Port::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Port*>(&to_msg);
  auto& from = static_cast<const Port&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Port)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::PortSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::opi_api::network::cloud::v1alpha1::PortStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::InternalSwap(Port* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Port, _impl_.status_)
      + sizeof(Port::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Port, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Port::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_port_2eproto_getter, &descriptor_table_port_2eproto_once,
      file_level_metadata_port_2eproto[0]);
}

// ===================================================================

class PortSpec::_Internal {
 public:
};

PortSpec::PortSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PortSpec)
}
PortSpec::PortSpec(const PortSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_number_){}
    , decltype(_impl_.admin_state_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.fec_type_){}
    , decltype(_impl_.debounce_timeout_){}
    , decltype(_impl_.mtu_){}
    , decltype(_impl_.pause_type_){}
    , decltype(_impl_.autoneg_enable_){}
    , decltype(_impl_.tx_pause_en_){}
    , decltype(_impl_.rx_pause_en_){}
    , decltype(_impl_.loopback_mode_){}
    , decltype(_impl_.lanes_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_number_, &from._impl_.port_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lanes_count_) -
    reinterpret_cast<char*>(&_impl_.port_number_)) + sizeof(_impl_.lanes_count_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PortSpec)
}

inline void PortSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_number_){0}
    , decltype(_impl_.admin_state_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.fec_type_){0}
    , decltype(_impl_.debounce_timeout_){0}
    , decltype(_impl_.mtu_){0}
    , decltype(_impl_.pause_type_){0}
    , decltype(_impl_.autoneg_enable_){false}
    , decltype(_impl_.tx_pause_en_){false}
    , decltype(_impl_.rx_pause_en_){false}
    , decltype(_impl_.loopback_mode_){0}
    , decltype(_impl_.lanes_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PortSpec::~PortSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PortSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PortSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lanes_count_) -
      reinterpret_cast<char*>(&_impl_.port_number_)) + sizeof(_impl_.lanes_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortAdminState admin_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_state(static_cast<::opi_api::network::cloud::v1alpha1::PortAdminState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::PortType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortSpeed speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speed(static_cast<::opi_api::network::cloud::v1alpha1::PortSpeed>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortFecType fec_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fec_type(static_cast<::opi_api::network::cloud::v1alpha1::PortFecType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool autoneg_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.autoneg_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 debounce_timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.debounce_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mtu = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortPauseType pause_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pause_type(static_cast<::opi_api::network::cloud::v1alpha1::PortPauseType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool tx_pause_en = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.tx_pause_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rx_pause_en = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.rx_pause_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortLoopBackMode loopback_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_loopback_mode(static_cast<::opi_api::network::cloud::v1alpha1::PortLoopBackMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 lanes_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lanes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PortSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_number = 1;
  if (this->_internal_port_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_number(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortAdminState admin_state = 2;
  if (this->_internal_admin_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_admin_state(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortSpeed speed = 4;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_speed(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortFecType fec_type = 5;
  if (this->_internal_fec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_fec_type(), target);
  }

  // bool autoneg_enable = 6;
  if (this->_internal_autoneg_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_autoneg_enable(), target);
  }

  // int32 debounce_timeout = 7;
  if (this->_internal_debounce_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_debounce_timeout(), target);
  }

  // int32 mtu = 8;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mtu(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortPauseType pause_type = 9;
  if (this->_internal_pause_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_pause_type(), target);
  }

  // bool tx_pause_en = 10;
  if (this->_internal_tx_pause_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_tx_pause_en(), target);
  }

  // bool rx_pause_en = 11;
  if (this->_internal_rx_pause_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_rx_pause_en(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortLoopBackMode loopback_mode = 12;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_loopback_mode(), target);
  }

  // int32 lanes_count = 13;
  if (this->_internal_lanes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_lanes_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PortSpec)
  return target;
}

size_t PortSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PortSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port_number = 1;
  if (this->_internal_port_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port_number());
  }

  // .opi_api.network.cloud.v1alpha1.PortAdminState admin_state = 2;
  if (this->_internal_admin_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_admin_state());
  }

  // .opi_api.network.cloud.v1alpha1.PortType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .opi_api.network.cloud.v1alpha1.PortSpeed speed = 4;
  if (this->_internal_speed() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_speed());
  }

  // .opi_api.network.cloud.v1alpha1.PortFecType fec_type = 5;
  if (this->_internal_fec_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fec_type());
  }

  // int32 debounce_timeout = 7;
  if (this->_internal_debounce_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_debounce_timeout());
  }

  // int32 mtu = 8;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtu());
  }

  // .opi_api.network.cloud.v1alpha1.PortPauseType pause_type = 9;
  if (this->_internal_pause_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pause_type());
  }

  // bool autoneg_enable = 6;
  if (this->_internal_autoneg_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_pause_en = 10;
  if (this->_internal_tx_pause_en() != 0) {
    total_size += 1 + 1;
  }

  // bool rx_pause_en = 11;
  if (this->_internal_rx_pause_en() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.cloud.v1alpha1.PortLoopBackMode loopback_mode = 12;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_loopback_mode());
  }

  // int32 lanes_count = 13;
  if (this->_internal_lanes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lanes_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortSpec::GetClassData() const { return &_class_data_; }


void PortSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortSpec*>(&to_msg);
  auto& from = static_cast<const PortSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PortSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port_number() != 0) {
    _this->_internal_set_port_number(from._internal_port_number());
  }
  if (from._internal_admin_state() != 0) {
    _this->_internal_set_admin_state(from._internal_admin_state());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_fec_type() != 0) {
    _this->_internal_set_fec_type(from._internal_fec_type());
  }
  if (from._internal_debounce_timeout() != 0) {
    _this->_internal_set_debounce_timeout(from._internal_debounce_timeout());
  }
  if (from._internal_mtu() != 0) {
    _this->_internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_pause_type() != 0) {
    _this->_internal_set_pause_type(from._internal_pause_type());
  }
  if (from._internal_autoneg_enable() != 0) {
    _this->_internal_set_autoneg_enable(from._internal_autoneg_enable());
  }
  if (from._internal_tx_pause_en() != 0) {
    _this->_internal_set_tx_pause_en(from._internal_tx_pause_en());
  }
  if (from._internal_rx_pause_en() != 0) {
    _this->_internal_set_rx_pause_en(from._internal_rx_pause_en());
  }
  if (from._internal_loopback_mode() != 0) {
    _this->_internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_lanes_count() != 0) {
    _this->_internal_set_lanes_count(from._internal_lanes_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortSpec::CopyFrom(const PortSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PortSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortSpec::IsInitialized() const {
  return true;
}

void PortSpec::InternalSwap(PortSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortSpec, _impl_.lanes_count_)
      + sizeof(PortSpec::_impl_.lanes_count_)
      - PROTOBUF_FIELD_OFFSET(PortSpec, _impl_.port_number_)>(
          reinterpret_cast<char*>(&_impl_.port_number_),
          reinterpret_cast<char*>(&other->_impl_.port_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_port_2eproto_getter, &descriptor_table_port_2eproto_once,
      file_level_metadata_port_2eproto[1]);
}

// ===================================================================

class PortStatus::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::PortLinkStatus& link_status(const PortStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::PortXcvrStatus& xcvr_status(const PortStatus* msg);
};

const ::opi_api::network::cloud::v1alpha1::PortLinkStatus&
PortStatus::_Internal::link_status(const PortStatus* msg) {
  return *msg->_impl_.link_status_;
}
const ::opi_api::network::cloud::v1alpha1::PortXcvrStatus&
PortStatus::_Internal::xcvr_status(const PortStatus* msg) {
  return *msg->_impl_.xcvr_status_;
}
PortStatus::PortStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PortStatus)
}
PortStatus::PortStatus(const PortStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fsm_record_){from._impl_.fsm_record_}
    , decltype(_impl_.link_status_){nullptr}
    , decltype(_impl_.xcvr_status_){nullptr}
    , decltype(_impl_.if_index_){}
    , decltype(_impl_.fsm_state_){}
    , decltype(_impl_.mac_id_){}
    , decltype(_impl_.mac_ch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_link_status()) {
    _this->_impl_.link_status_ = new ::opi_api::network::cloud::v1alpha1::PortLinkStatus(*from._impl_.link_status_);
  }
  if (from._internal_has_xcvr_status()) {
    _this->_impl_.xcvr_status_ = new ::opi_api::network::cloud::v1alpha1::PortXcvrStatus(*from._impl_.xcvr_status_);
  }
  ::memcpy(&_impl_.if_index_, &from._impl_.if_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mac_ch_) -
    reinterpret_cast<char*>(&_impl_.if_index_)) + sizeof(_impl_.mac_ch_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PortStatus)
}

inline void PortStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fsm_record_){arena}
    , decltype(_impl_.link_status_){nullptr}
    , decltype(_impl_.xcvr_status_){nullptr}
    , decltype(_impl_.if_index_){0u}
    , decltype(_impl_.fsm_state_){0}
    , decltype(_impl_.mac_id_){0}
    , decltype(_impl_.mac_ch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PortStatus::~PortStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PortStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fsm_record_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.link_status_;
  if (this != internal_default_instance()) delete _impl_.xcvr_status_;
}

void PortStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PortStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fsm_record_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.link_status_ != nullptr) {
    delete _impl_.link_status_;
  }
  _impl_.link_status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.xcvr_status_ != nullptr) {
    delete _impl_.xcvr_status_;
  }
  _impl_.xcvr_status_ = nullptr;
  ::memset(&_impl_.if_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mac_ch_) -
      reinterpret_cast<char*>(&_impl_.if_index_)) + sizeof(_impl_.mac_ch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 if_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.if_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortLinkStatus link_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortXcvrStatus xcvr_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_xcvr_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortLinkFSM fsm_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fsm_state(static_cast<::opi_api::network::cloud::v1alpha1::PortLinkFSM>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 mac_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mac_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mac_ch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mac_ch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.PortLinkFSMRecord fsm_record = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fsm_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PortStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 if_index = 1;
  if (this->_internal_if_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_if_index(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortLinkStatus link_status = 2;
  if (this->_internal_has_link_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::link_status(this),
        _Internal::link_status(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PortXcvrStatus xcvr_status = 3;
  if (this->_internal_has_xcvr_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::xcvr_status(this),
        _Internal::xcvr_status(this).GetCachedSize(), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PortLinkFSM fsm_state = 4;
  if (this->_internal_fsm_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fsm_state(), target);
  }

  // int32 mac_id = 5;
  if (this->_internal_mac_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mac_id(), target);
  }

  // int32 mac_ch = 6;
  if (this->_internal_mac_ch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mac_ch(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.PortLinkFSMRecord fsm_record = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fsm_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_fsm_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PortStatus)
  return target;
}

size_t PortStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PortStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.PortLinkFSMRecord fsm_record = 7;
  total_size += 1UL * this->_internal_fsm_record_size();
  for (const auto& msg : this->_impl_.fsm_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.cloud.v1alpha1.PortLinkStatus link_status = 2;
  if (this->_internal_has_link_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.link_status_);
  }

  // .opi_api.network.cloud.v1alpha1.PortXcvrStatus xcvr_status = 3;
  if (this->_internal_has_xcvr_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.xcvr_status_);
  }

  // uint32 if_index = 1;
  if (this->_internal_if_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_if_index());
  }

  // .opi_api.network.cloud.v1alpha1.PortLinkFSM fsm_state = 4;
  if (this->_internal_fsm_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fsm_state());
  }

  // int32 mac_id = 5;
  if (this->_internal_mac_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mac_id());
  }

  // int32 mac_ch = 6;
  if (this->_internal_mac_ch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mac_ch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortStatus::GetClassData() const { return &_class_data_; }


void PortStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortStatus*>(&to_msg);
  auto& from = static_cast<const PortStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PortStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fsm_record_.MergeFrom(from._impl_.fsm_record_);
  if (from._internal_has_link_status()) {
    _this->_internal_mutable_link_status()->::opi_api::network::cloud::v1alpha1::PortLinkStatus::MergeFrom(
        from._internal_link_status());
  }
  if (from._internal_has_xcvr_status()) {
    _this->_internal_mutable_xcvr_status()->::opi_api::network::cloud::v1alpha1::PortXcvrStatus::MergeFrom(
        from._internal_xcvr_status());
  }
  if (from._internal_if_index() != 0) {
    _this->_internal_set_if_index(from._internal_if_index());
  }
  if (from._internal_fsm_state() != 0) {
    _this->_internal_set_fsm_state(from._internal_fsm_state());
  }
  if (from._internal_mac_id() != 0) {
    _this->_internal_set_mac_id(from._internal_mac_id());
  }
  if (from._internal_mac_ch() != 0) {
    _this->_internal_set_mac_ch(from._internal_mac_ch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortStatus::CopyFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PortStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortStatus::IsInitialized() const {
  return true;
}

void PortStatus::InternalSwap(PortStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fsm_record_.InternalSwap(&other->_impl_.fsm_record_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortStatus, _impl_.mac_ch_)
      + sizeof(PortStatus::_impl_.mac_ch_)
      - PROTOBUF_FIELD_OFFSET(PortStatus, _impl_.link_status_)>(
          reinterpret_cast<char*>(&_impl_.link_status_),
          reinterpret_cast<char*>(&other->_impl_.link_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_port_2eproto_getter, &descriptor_table_port_2eproto_once,
      file_level_metadata_port_2eproto[2]);
}

// ===================================================================

class PortLinkStatus::_Internal {
 public:
};

PortLinkStatus::PortLinkStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PortLinkStatus)
}
PortLinkStatus::PortLinkStatus(const PortLinkStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortLinkStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oper_state_){}
    , decltype(_impl_.port_speed_){}
    , decltype(_impl_.autoneg_en_){}
    , decltype(_impl_.lanes_count_){}
    , decltype(_impl_.fec_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.oper_state_, &from._impl_.oper_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fec_type_) -
    reinterpret_cast<char*>(&_impl_.oper_state_)) + sizeof(_impl_.fec_type_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PortLinkStatus)
}

inline void PortLinkStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.oper_state_){0}
    , decltype(_impl_.port_speed_){0}
    , decltype(_impl_.autoneg_en_){false}
    , decltype(_impl_.lanes_count_){0}
    , decltype(_impl_.fec_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PortLinkStatus::~PortLinkStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortLinkStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortLinkStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortLinkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.oper_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fec_type_) -
      reinterpret_cast<char*>(&_impl_.oper_state_)) + sizeof(_impl_.fec_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortLinkStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.PortOperState oper_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_state(static_cast<::opi_api::network::cloud::v1alpha1::PortOperState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortSpeed port_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port_speed(static_cast<::opi_api::network::cloud::v1alpha1::PortSpeed>(val));
        } else
          goto handle_unusual;
        continue;
      // bool autoneg_en = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.autoneg_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lanes_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lanes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortFecType fec_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fec_type(static_cast<::opi_api::network::cloud::v1alpha1::PortFecType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortLinkStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.PortOperState oper_state = 1;
  if (this->_internal_oper_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper_state(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortSpeed port_speed = 2;
  if (this->_internal_port_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_port_speed(), target);
  }

  // bool autoneg_en = 3;
  if (this->_internal_autoneg_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_autoneg_en(), target);
  }

  // int32 lanes_count = 4;
  if (this->_internal_lanes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_lanes_count(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortFecType fec_type = 5;
  if (this->_internal_fec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_fec_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  return target;
}

size_t PortLinkStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.PortOperState oper_state = 1;
  if (this->_internal_oper_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_oper_state());
  }

  // .opi_api.network.cloud.v1alpha1.PortSpeed port_speed = 2;
  if (this->_internal_port_speed() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_port_speed());
  }

  // bool autoneg_en = 3;
  if (this->_internal_autoneg_en() != 0) {
    total_size += 1 + 1;
  }

  // int32 lanes_count = 4;
  if (this->_internal_lanes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lanes_count());
  }

  // .opi_api.network.cloud.v1alpha1.PortFecType fec_type = 5;
  if (this->_internal_fec_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fec_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortLinkStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortLinkStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortLinkStatus::GetClassData() const { return &_class_data_; }


void PortLinkStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortLinkStatus*>(&to_msg);
  auto& from = static_cast<const PortLinkStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oper_state() != 0) {
    _this->_internal_set_oper_state(from._internal_oper_state());
  }
  if (from._internal_port_speed() != 0) {
    _this->_internal_set_port_speed(from._internal_port_speed());
  }
  if (from._internal_autoneg_en() != 0) {
    _this->_internal_set_autoneg_en(from._internal_autoneg_en());
  }
  if (from._internal_lanes_count() != 0) {
    _this->_internal_set_lanes_count(from._internal_lanes_count());
  }
  if (from._internal_fec_type() != 0) {
    _this->_internal_set_fec_type(from._internal_fec_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortLinkStatus::CopyFrom(const PortLinkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PortLinkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortLinkStatus::IsInitialized() const {
  return true;
}

void PortLinkStatus::InternalSwap(PortLinkStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortLinkStatus, _impl_.fec_type_)
      + sizeof(PortLinkStatus::_impl_.fec_type_)
      - PROTOBUF_FIELD_OFFSET(PortLinkStatus, _impl_.oper_state_)>(
          reinterpret_cast<char*>(&_impl_.oper_state_),
          reinterpret_cast<char*>(&other->_impl_.oper_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortLinkStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_port_2eproto_getter, &descriptor_table_port_2eproto_once,
      file_level_metadata_port_2eproto[3]);
}

// ===================================================================

class PortXcvrStatus::_Internal {
 public:
};

PortXcvrStatus::PortXcvrStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
}
PortXcvrStatus::PortXcvrStatus(const PortXcvrStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortXcvrStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xcvr_sprom_){}
    , decltype(_impl_.vendorname_){}
    , decltype(_impl_.vendor_oui_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.part_number_){}
    , decltype(_impl_.revision_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.media_type_){}
    , decltype(_impl_.encoding_type_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.warn_temperature_){}
    , decltype(_impl_.alarm_temperature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.xcvr_sprom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xcvr_sprom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_xcvr_sprom().empty()) {
    _this->_impl_.xcvr_sprom_.Set(from._internal_xcvr_sprom(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendorname().empty()) {
    _this->_impl_.vendorname_.Set(from._internal_vendorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_oui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_oui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor_oui().empty()) {
    _this->_impl_.vendor_oui_.Set(from._internal_vendor_oui(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_number().empty()) {
    _this->_impl_.part_number_.Set(from._internal_part_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_revision().empty()) {
    _this->_impl_.revision_.Set(from._internal_revision(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alarm_temperature_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.alarm_temperature_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
}

inline void PortXcvrStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xcvr_sprom_){}
    , decltype(_impl_.vendorname_){}
    , decltype(_impl_.vendor_oui_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.part_number_){}
    , decltype(_impl_.revision_){}
    , decltype(_impl_.port_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.media_type_){0}
    , decltype(_impl_.encoding_type_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.warn_temperature_){0}
    , decltype(_impl_.alarm_temperature_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.xcvr_sprom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.xcvr_sprom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_oui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_oui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortXcvrStatus::~PortXcvrStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortXcvrStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.xcvr_sprom_.Destroy();
  _impl_.vendorname_.Destroy();
  _impl_.vendor_oui_.Destroy();
  _impl_.serial_number_.Destroy();
  _impl_.part_number_.Destroy();
  _impl_.revision_.Destroy();
}

void PortXcvrStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortXcvrStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xcvr_sprom_.ClearToEmpty();
  _impl_.vendorname_.ClearToEmpty();
  _impl_.vendor_oui_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  _impl_.part_number_.ClearToEmpty();
  _impl_.revision_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.alarm_temperature_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.alarm_temperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortXcvrStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortXcvrState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::opi_api::network::cloud::v1alpha1::PortXcvrState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PortXcvrPid pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pid(static_cast<::opi_api::network::cloud::v1alpha1::PortXcvrPid>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MediaType media_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media_type(static_cast<::opi_api::network::cloud::v1alpha1::MediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes xcvr_sprom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_xcvr_sprom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vendorname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_vendorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.PortXcvrStatus.vendorname"));
        } else
          goto handle_unusual;
        continue;
      // string vendor_oui = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_vendor_oui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.PortXcvrStatus.vendor_oui"));
        } else
          goto handle_unusual;
        continue;
      // int32 encoding_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.encoding_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.PortXcvrStatus.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // string part_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_part_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.PortXcvrStatus.part_number"));
        } else
          goto handle_unusual;
        continue;
      // string revision = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.PortXcvrStatus.revision"));
        } else
          goto handle_unusual;
        continue;
      // int32 temperature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 warn_temperature = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.warn_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 alarm_temperature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.alarm_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortXcvrStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortXcvrState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .opi_api.network.cloud.v1alpha1.PortXcvrPid pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pid(), target);
  }

  // .opi_api.network.cloud.v1alpha1.MediaType media_type = 4;
  if (this->_internal_media_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_media_type(), target);
  }

  // bytes xcvr_sprom = 5;
  if (!this->_internal_xcvr_sprom().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_xcvr_sprom(), target);
  }

  // string vendorname = 6;
  if (!this->_internal_vendorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendorname().data(), static_cast<int>(this->_internal_vendorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.PortXcvrStatus.vendorname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_vendorname(), target);
  }

  // string vendor_oui = 7;
  if (!this->_internal_vendor_oui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_oui().data(), static_cast<int>(this->_internal_vendor_oui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.PortXcvrStatus.vendor_oui");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_vendor_oui(), target);
  }

  // int32 encoding_type = 8;
  if (this->_internal_encoding_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_encoding_type(), target);
  }

  // string serial_number = 9;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.PortXcvrStatus.serial_number");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_serial_number(), target);
  }

  // string part_number = 10;
  if (!this->_internal_part_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_number().data(), static_cast<int>(this->_internal_part_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.PortXcvrStatus.part_number");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_part_number(), target);
  }

  // string revision = 11;
  if (!this->_internal_revision().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_revision().data(), static_cast<int>(this->_internal_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.PortXcvrStatus.revision");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_revision(), target);
  }

  // int32 temperature = 12;
  if (this->_internal_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_temperature(), target);
  }

  // int32 warn_temperature = 13;
  if (this->_internal_warn_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_warn_temperature(), target);
  }

  // int32 alarm_temperature = 14;
  if (this->_internal_alarm_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_alarm_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  return target;
}

size_t PortXcvrStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes xcvr_sprom = 5;
  if (!this->_internal_xcvr_sprom().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_xcvr_sprom());
  }

  // string vendorname = 6;
  if (!this->_internal_vendorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendorname());
  }

  // string vendor_oui = 7;
  if (!this->_internal_vendor_oui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_oui());
  }

  // string serial_number = 9;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // string part_number = 10;
  if (!this->_internal_part_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_number());
  }

  // string revision = 11;
  if (!this->_internal_revision().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_revision());
  }

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // .opi_api.network.cloud.v1alpha1.PortXcvrState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .opi_api.network.cloud.v1alpha1.PortXcvrPid pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pid());
  }

  // .opi_api.network.cloud.v1alpha1.MediaType media_type = 4;
  if (this->_internal_media_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_media_type());
  }

  // int32 encoding_type = 8;
  if (this->_internal_encoding_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoding_type());
  }

  // int32 temperature = 12;
  if (this->_internal_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_temperature());
  }

  // int32 warn_temperature = 13;
  if (this->_internal_warn_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warn_temperature());
  }

  // int32 alarm_temperature = 14;
  if (this->_internal_alarm_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alarm_temperature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortXcvrStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortXcvrStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortXcvrStatus::GetClassData() const { return &_class_data_; }


void PortXcvrStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortXcvrStatus*>(&to_msg);
  auto& from = static_cast<const PortXcvrStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_xcvr_sprom().empty()) {
    _this->_internal_set_xcvr_sprom(from._internal_xcvr_sprom());
  }
  if (!from._internal_vendorname().empty()) {
    _this->_internal_set_vendorname(from._internal_vendorname());
  }
  if (!from._internal_vendor_oui().empty()) {
    _this->_internal_set_vendor_oui(from._internal_vendor_oui());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (!from._internal_part_number().empty()) {
    _this->_internal_set_part_number(from._internal_part_number());
  }
  if (!from._internal_revision().empty()) {
    _this->_internal_set_revision(from._internal_revision());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_media_type() != 0) {
    _this->_internal_set_media_type(from._internal_media_type());
  }
  if (from._internal_encoding_type() != 0) {
    _this->_internal_set_encoding_type(from._internal_encoding_type());
  }
  if (from._internal_temperature() != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (from._internal_warn_temperature() != 0) {
    _this->_internal_set_warn_temperature(from._internal_warn_temperature());
  }
  if (from._internal_alarm_temperature() != 0) {
    _this->_internal_set_alarm_temperature(from._internal_alarm_temperature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortXcvrStatus::CopyFrom(const PortXcvrStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PortXcvrStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortXcvrStatus::IsInitialized() const {
  return true;
}

void PortXcvrStatus::InternalSwap(PortXcvrStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.xcvr_sprom_, lhs_arena,
      &other->_impl_.xcvr_sprom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendorname_, lhs_arena,
      &other->_impl_.vendorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_oui_, lhs_arena,
      &other->_impl_.vendor_oui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_number_, lhs_arena,
      &other->_impl_.part_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.revision_, lhs_arena,
      &other->_impl_.revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortXcvrStatus, _impl_.alarm_temperature_)
      + sizeof(PortXcvrStatus::_impl_.alarm_temperature_)
      - PROTOBUF_FIELD_OFFSET(PortXcvrStatus, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortXcvrStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_port_2eproto_getter, &descriptor_table_port_2eproto_once,
      file_level_metadata_port_2eproto[4]);
}

// ===================================================================

class PortLinkFSMRecord::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& state_time(const PortLinkFSMRecord* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PortLinkFSMRecord::_Internal::state_time(const PortLinkFSMRecord* msg) {
  return *msg->_impl_.state_time_;
}
void PortLinkFSMRecord::clear_state_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_time_ != nullptr) {
    delete _impl_.state_time_;
  }
  _impl_.state_time_ = nullptr;
}
PortLinkFSMRecord::PortLinkFSMRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
}
PortLinkFSMRecord::PortLinkFSMRecord(const PortLinkFSMRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortLinkFSMRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){}
    , decltype(_impl_.state_time_){nullptr}
    , decltype(_impl_.fsm_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_duration().empty()) {
    _this->_impl_.duration_.Set(from._internal_duration(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_state_time()) {
    _this->_impl_.state_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.state_time_);
  }
  _this->_impl_.fsm_state_ = from._impl_.fsm_state_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
}

inline void PortLinkFSMRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){}
    , decltype(_impl_.state_time_){nullptr}
    , decltype(_impl_.fsm_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortLinkFSMRecord::~PortLinkFSMRecord() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortLinkFSMRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.duration_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_time_;
}

void PortLinkFSMRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortLinkFSMRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.duration_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.state_time_ != nullptr) {
    delete _impl_.state_time_;
  }
  _impl_.state_time_ = nullptr;
  _impl_.fsm_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortLinkFSMRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.PortLinkFSM fsm_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fsm_state(static_cast<::opi_api::network::cloud::v1alpha1::PortLinkFSM>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp state_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_duration();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.PortLinkFSMRecord.duration"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortLinkFSMRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.PortLinkFSM fsm_state = 1;
  if (this->_internal_fsm_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fsm_state(), target);
  }

  // .google.protobuf.Timestamp state_time = 2;
  if (this->_internal_has_state_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state_time(this),
        _Internal::state_time(this).GetCachedSize(), target, stream);
  }

  // string duration = 3;
  if (!this->_internal_duration().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.PortLinkFSMRecord.duration");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  return target;
}

size_t PortLinkFSMRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string duration = 3;
  if (!this->_internal_duration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_duration());
  }

  // .google.protobuf.Timestamp state_time = 2;
  if (this->_internal_has_state_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_time_);
  }

  // .opi_api.network.cloud.v1alpha1.PortLinkFSM fsm_state = 1;
  if (this->_internal_fsm_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fsm_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortLinkFSMRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortLinkFSMRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortLinkFSMRecord::GetClassData() const { return &_class_data_; }


void PortLinkFSMRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortLinkFSMRecord*>(&to_msg);
  auto& from = static_cast<const PortLinkFSMRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_duration().empty()) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_has_state_time()) {
    _this->_internal_mutable_state_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_state_time());
  }
  if (from._internal_fsm_state() != 0) {
    _this->_internal_set_fsm_state(from._internal_fsm_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortLinkFSMRecord::CopyFrom(const PortLinkFSMRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PortLinkFSMRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortLinkFSMRecord::IsInitialized() const {
  return true;
}

void PortLinkFSMRecord::InternalSwap(PortLinkFSMRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_, lhs_arena,
      &other->_impl_.duration_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortLinkFSMRecord, _impl_.fsm_state_)
      + sizeof(PortLinkFSMRecord::_impl_.fsm_state_)
      - PROTOBUF_FIELD_OFFSET(PortLinkFSMRecord, _impl_.state_time_)>(
          reinterpret_cast<char*>(&_impl_.state_time_),
          reinterpret_cast<char*>(&other->_impl_.state_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortLinkFSMRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_port_2eproto_getter, &descriptor_table_port_2eproto_once,
      file_level_metadata_port_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Port*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Port >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PortSpec*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PortSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PortSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PortStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PortStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PortStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PortLinkStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PortLinkStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PortLinkStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PortXcvrStatus*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PortXcvrStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PortXcvrStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord*
Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PortLinkFSMRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
